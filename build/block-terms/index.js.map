{"version":3,"file":"block-terms/index.js","mappings":";;;;;;;;;;;;;;;;AAgBA;;AAKA;;AAKA;;AAKA;;AAKO,SAASA,WAAWA,CACzBC,aAAiD,EACjDC,YAAmJ,EAClG;EACjD,OAAOA,YAAY;AACrB;AAGO,SAASC,gBAAgBA,CAG9BC,IAAQ,EAAEC,SAAY,EAAmB;EACzC,OAAOD,IAAI;AACb;AACO,SAASE,eAAeA,CAC7BC,SAA8C,EAC9CC,YAAsC,EACtCJ,IAAiF,EACtC;EAC3C,MAAMK,cAAc,GAAIF,SAAS,CAAwEG,QAAQ,EAC7GD,cAAc;EAElB,IAAI,CAACA,cAAc,EAAE,OAAO,IAAI;EAEhC,MAAME,OAAO,GAAGH,YAAY,CAACI,WAAW,CAAC,CAAC,CAAuC;EACjF,MAAMC,QAAQ,GAAGF,OAAO,EAAEG,IAAI,EAAEC,KAAK;EAErC,MAAMC,MAAM,GAAIH,QAAQ,IAAIJ,cAAc,CAACI,QAAQ,CAAC,IAAK,EAAE;EAC3D,OAAOG,MAAM,CAACC,MAAM,GAAG,CAAC,IAAID,MAAM,CAACE,KAAK,CAACC,KAAK,IAAIf,IAAI,IAAIe,KAAK,IAAIf,IAAI,CAAC;AAC1E;;;;;;;;;;;;;;;ACjEA;AACmC;AAGnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,SAAS,GAAG;EACd,mgBAAmgB,EAAED,sEAAsC;EAC3iB,4KAA4K,EAAEA,uEAAuC;EACrN,yKAAyK,EAAEA,wEAAwC;EACnN,0nDAA0nD,EAAEA,sEAAsC;EAClqD,+JAA+J,EAAEA,mEAAmC;EACpM,sMAAsM,EAAEA,sEAAsC;EAC9O,ilBAAilB,EAAEA,qEAAqC;EACxnB,w+BAAw+B,EAAEA,qEAAqCS;AACnhC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGO,SAASC,OAAOA,CAACC,MAAc,EAAE;EAAA,IAAAC,OAAA;EACtC,QAAAA,OAAA,GAAQX,SAAS,CAASU,MAAM,CAAC,cAAAC,OAAA,cAAAA,OAAA,GAAI,CAAC,CAAC;AACzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA,qBASA,sEAWA,uCAMA,4HA2BA,0JACO,GAAK,CAAAC,gBAAgB,uBAAhBA,gBAAgB,EAAhBA,gBAAgB,UAAhBA,gBAAgB,YAAhBA,gBAAgB,UAAhBA,gBAAgB,gBAAhB,CAAAA,gBAAgB,OAW5B,wCAMA,yBAgEA,yBASA,yBAUA,yBAUA,yBASA,yBASA,yBASA,oCAUA,oDAQA,yDAYA,6EACO,GAAK,CAAAC,cAAc,uBAAdA,cAAc,EAAdA,cAAc,6BAAdA,cAAc,YAAdA,cAAc,gBAAdA,cAAc,gBAAdA,cAAc,oBAAd,CAAAA,cAAc,OAa1B,kEAWA,+BASA,0EAaA,kEAWA,+BASA,iEAaA,2EA8CA,qEAWA,+BASA,oEAaA,8EAyCA,kEASA,8DAWA,+BASA,6DAaA,uEAmEA,kEASA,mBASA,wBAkDA,wBAMA,wBAMA,wBASA,+BAoBA,+BAOA,mCAUA,mDAQA,wDAYA,yHACO,GAAK,CAAAC,qBAAqB,uBAArBA,qBAAqB,EAArBA,qBAAqB,6BAArBA,qBAAqB,kBAArB,CAAAA,qBAAqB,OAOjC,wCACO,GAAK,CAAAC,iBAAiB,uBAAjBA,iBAAiB,EAAjBA,iBAAiB,sBAAjBA,iBAAiB,gBAAjBA,iBAAiB,gBAAjBA,iBAAiB,wBAAjB,CAAAA,iBAAiB,OAW7B,gEAWA,+BASA,+DAaA,yEA8DA,kEASA,oEASA,gEASA,+EA8DA,+BAkBA,qDAQA,0CACO,GAAK,CAAAC,6BAA6B,uBAA7BA,6BAA6B,EAA7BA,6BAA6B,iCAA7BA,6BAA6B,uCAA7BA,6BAA6B,mCAA7BA,6BAA6B,8CAA7BA,6BAA6B,wCAA7BA,6BAA6B,0CAA7BA,6BAA6B,qCAA7BA,6BAA6B,+BAA7BA,6BAA6B,sCAA7BA,6BAA6B,2BAA7BA,6BAA6B,2BAA7BA,6BAA6B,iCAA7BA,6BAA6B,mCAA7BA,6BAA6B,oCAA7BA,6BAA6B,+BAA7BA,6BAA6B,2BAA7B,CAAAA,6BAA6B,OAmCzC,6DAmHA,yIAUA,oCA4DA,oCASA,oCAQA,uCAUA,uDAQA,4DAYA,6EACO,GAAK,CAAAC,qBAAqB,uBAArBA,qBAAqB,EAArBA,qBAAqB,6BAArBA,qBAAqB,YAArBA,qBAAqB,oBAArB,CAAAA,qBAAqB,OASjC,wEASA,iEASA,iEAWA,2EAWA,+BASA,0EAaA,+EAWA,+BASA,8EAaA,kDAMA,2BAyEA,2BASA,2BASA,uCAUA,uDAQA,4DAYA,4BACO,GAAK,CAAAC,eAAe,uBAAfA,eAAe,EAAfA,eAAe,4BAAfA,eAAe,gBAAfA,eAAe,sBAAf,CAAAA,eAAe,OAS3B,8HACO,GAAK,CAAAC,qBAAqB,uBAArBA,qBAAqB,EAArBA,qBAAqB,YAArBA,qBAAqB,sBAArB,CAAAA,qBAAqB,OAOjC,wEAWA,+BASA,uEAaA,iFAyCA,qEAWA,+BASA,oEAaA,sDACO,GAAK,CAAAC,0BAA0B,uBAA1BA,0BAA0B,EAA1BA,0BAA0B,sBAA1B,CAAAA,0BAA0B,OAKtC,wDACO,GAAK,CAAAC,4BAA4B,uBAA5BA,4BAA4B,EAA5BA,4BAA4B,sBAA5B,CAAAA,4BAA4B,OAKxC,iDACO,GAAK,CAAAC,qBAAqB,uBAArBA,qBAAqB,EAArBA,qBAAqB,sBAArB,CAAAA,qBAAqB,OAKjC,yCAyBA,iDAyBA,yCA2BA,8CA2BA,yCAyBA,+CAuBA,yCAyBA,8CASA,yCA2BA,+CA2CA,yCA2BA,gDAuBA,yCAyBA,iDAyBA,yCAyBA,mDA2BA,yCA2BA,6CA6BA,yCA2BA,+CAmCA,yCA2BA,gDAmCA,yCAyBA,0DA2BA,yCAyBA,uDAuBA,yCAyBA,oDAyBA,yCAyBA,wDAuBA,yCAyBA,yDAqBA,yCAyBA,wDAiBA,yCAyBA,iDA2BA,yCAyBA,2DA2BA,yCAyBA,+DAqBA,yCAyBA,kEAmBA,yCAyBA,mEAqBA,yCAyBA,sDAiCA,yCA2BA,8CAyDA,yCAyBA,8CAyBA,yCA2BA,6CAiCA,yCAyBA,iDASA,yCA2BA,gDA2CA,yCA2BA,8CA+BA,yCA2BA,gDAmCA,yCAyBA,iDAiBA,yCAyBA,6CASA,yCA2BA,8CA+CA,yCAyBA,uDAqBA,yCAyBA,oDA2DA,yCAyBA,qDAaA,yCA2BA,6CAqCA,yCAyBA,iDAmBA,yCAyBA,iDAaA,yCA2BA,kDA2DA,yCAyBA,gDAaA,yCAyBA,6CAWA,yCAyBA,mDAuDA,yCAyBA,uDAmCA,yCAyBA,0DA6BA,yCAyBA,iDAOA,yCAyBA,iDAmBA,yCAyBA,qDAmBA,yCA2BA,kDAmCA,yCAyBA,gDAWA,yCAyBA,mDAmCA,yCAyBA,4DAuBA,yCAyBA,uDA2BA,yCAyBA,qDAuBA,yCAyBA,yDAqBA,yCAyBA,oDAmBA,yCAyBA,iDA6BA,yCAyBA,oDA2BA,yCAyBA,0DAuCA,yCAyBA,2DA+BA,yCAyBA,qDAyBA,yCAyBA,kDA+BA,yCAyBA,kDAiCA,yCA2BA,qDAyBA,yCA2BA,kDAiCA,yCAyBA,8CAuBA,yCAyBA,uDAuBA,yCAyBA,wDA2BA,yCAyBA,4DAqBA,yCAyBA,+DAmBA,yCAyBA,gEAqBA,yCAyBA,mDAiCA,yCA2BA,8CA+BA,yCAyBA,iDA2BA,yCAyBA,4CA2BA,yCAyBA,+CA2CA,yCA2BA,kDAuBA,yCAyBA,kDASA,yCAyBA,iDAqBA,yCAyBA,oDAyBA,yCAyBA,kDA+BA,yCAyBA,mDAiBA,yCA2BA,oDAuCA,yCA2BA,+CAiBA,yCA2BA,8CAqCA,yCAyBA,iDAyBA,yCAyBA,qDAmBA,yCAyBA,wDAuBA,yCAyBA,oDAeA,yCA2BA,8CA2BA,yCA2BA,8CAqCA,yCAyBA,oDAWA,8CAgBA,oDASA,6CA0BA,mDAWA,+CAkCA,qDASA,0CA0BA,gDASA,gDAcA,sDASA,0CAkDA,gDASA,yCAcA,+CASA,0CAwCA,gDASA,wDAMA,mBAUA,4CA8BA,yCAOA,8CAQA,oDAWA,6CAUA,mDAWA,+CAUA,qDAWA,0CAYA,gDAWA,gDAQA,sDAWA,0CAYA,gDAWA,yCAQA,+CAWA,0CAUA,gDAWA,mCASA,kDAQA,+DAsBA,iCAkBA,kCAmBA,0CAUA,0DAQA,+DAYA,sCAmBA,8CAUA,8DAQA,mEAYA,gCAuBA,yDAYA,+DAWA,8BACO,GAAK,CAAAC,yBAAyB,uBAAzBA,yBAAyB,EAAzBA,yBAAyB,0CAAzBA,yBAAyB,sBAAzBA,yBAAyB,oBAAzBA,yBAAyB,gCAAzB,CAAAA,yBAAyB,OAOrC,mEAsEA,mEAUA,mEAUA,mEASA,mEAQA,oFAWA,+BASA,4FAaA,sGAyCA,oFAWA,+BASA,2FAaA,qGAyCA,oFASA,2DAYA,gEA4CA,gEASA,gEAQA,qCAgBA,qCAMA,0BAgHA,0BAUA,0BAMA,0BAUA,0BAUA,0BAMA,0BASA,0BASA,0BAMA,0BAMA,0BAMA,0BAMA,0BAKA,qCAUA,qDAQA,0DAYA,6EACO,GAAK,CAAAC,eAAe,uBAAfA,eAAe,EAAfA,eAAe,6BAAfA,eAAe,YAAfA,eAAe,gBAAfA,eAAe,2BAAfA,eAAe,oBAAf,CAAAA,eAAe,OAa3B,qCA6BA,yCACO,GAAK,CAAAC,iBAAiB,uBAAjBA,iBAAiB,EAAjBA,iBAAiB,kBAAjBA,iBAAiB,oBAAjBA,iBAAiB,+BAAjBA,iBAAiB,0BAAjBA,iBAAiB,2BAAjBA,iBAAiB,iCAAjB,CAAAA,iBAAiB,OAe7B,2CACO,GAAK,CAAAC,mBAAmB,uBAAnBA,mBAAmB,EAAnBA,mBAAmB,2BAAnBA,mBAAmB,sBAAnBA,mBAAmB,sBAAnBA,mBAAmB,wBAAnB,CAAAA,mBAAmB,OAW/B,kEAWA,+BASA,iEAaA,2EA8DA,qDAmBA,mJA2BA,mJASA,gCAUA,gDAQA,qDAYA,gIAwDA,gIASA,oCAUA,oDAQA,yDAYA,iDAiBA,4DAQA,iHACO,GAAK,CAAAC,sBAAsB,uBAAtBA,sBAAsB,EAAtBA,sBAAsB,6BAAtBA,sBAAsB,kBAAtB,CAAAA,sBAAsB,OAOlC,0DAGA,8DASA,kEAWA,+BASA,iEAaA,2EAYA,0EASA,mBAYA,gCACO,GAAK,CAAAC,gBAAgB,uBAAhBA,gBAAgB,EAAhBA,gBAAgB,oBAAhBA,gBAAgB,4BAAhB,CAAAA,gBAAgB,OAO5B,iHACO,GAAK,CAAAC,kBAAkB,uBAAlBA,kBAAkB,EAAlBA,kBAAkB,6BAAlBA,kBAAkB,YAAlBA,kBAAkB,wBAAlBA,kBAAkB,gBAAlBA,kBAAkB,sBAAlB,CAAAA,kBAAkB,OAa9B,8DAWA,+BASA,6DAaA,uEAYA,iCACO,GAAK,CAAAC,YAAY,uBAAZA,YAAY,EAAZA,YAAY,gDAAZA,YAAY,kDAAZA,YAAY,uCAAZA,YAAY,2CAAZA,YAAY,sDAAZA,YAAY,6CAAZA,YAAY,uCAAZA,YAAY,qCAAZA,YAAY,qCAAZA,YAAY,yCAAZA,YAAY,qCAAZA,YAAY,8CAAZA,YAAY,+DAAZA,YAAY,+DAAZA,YAAY,2DAAZA,YAAY,uDAAZA,YAAY,qDAAZA,YAAY,+FAAZA,YAAY,4GAAZA,YAAY,+FAAZA,YAAY,qGAAZA,YAAY,+DAAZA,YAAY,+DAAZA,YAAY,yGAAZA,YAAY,uHAAZA,YAAY,iHAAZA,YAAY,yGAAZA,YAAY,+GAAZA,YAAY,yDAAZA,YAAY,mGAAZA,YAAY,mGAAZA,YAAY,qDAAZA,YAAY,iEAAZA,YAAY,oFAAZA,YAAY,0FAAZA,YAAY,wFAAZA,YAAY,0FAAZA,YAAY,kGAAZA,YAAY,gGAAZA,YAAY,kFAAZA,YAAY,qJAAZA,YAAY,uIAAZA,YAAY,+IAAZA,YAAY,6IAAZA,YAAY,qIAAZA,YAAY,2IAAZA,YAAY,iJAAZA,YAAY,iJAAZA,YAAY,qDAAZA,YAAY,4DAAZA,YAAY,0CAAZA,YAAY,wCAAZA,YAAY,qCAAZA,YAAY,yBAAZA,YAAY,2BAAZA,YAAY,2BAAZA,YAAY,2BAAZA,YAAY,yBAAZA,YAAY,yBAAZA,YAAY,sCAAZA,YAAY,iCAAZA,YAAY,iCAAZA,YAAY,wCAAZA,YAAY,uBAAZA,YAAY,uBAAZA,YAAY,yBAAZA,YAAY,yBAAZA,YAAY,2BAAZA,YAAY,2BAAZA,YAAY,yBAAZA,YAAY,gCAAZA,YAAY,2BAAZA,YAAY,2BAAZA,YAAY,8BAAZA,YAAY,iCAAZA,YAAY,uBAAZA,YAAY,uBAAZA,YAAY,2BAAZA,YAAY,iCAAZA,YAAY,uDAAZA,YAAY,uBAAZA,YAAY,4BAAZA,YAAY,8BAAZA,YAAY,yBAAZA,YAAY,2BAAZA,YAAY,yBAAZA,YAAY,2BAAZA,YAAY,yBAAZA,YAAY,qCAAZA,YAAY,2BAAZA,YAAY,4BAAZA,YAAY,sCAAZA,YAAY,iCAAZA,YAAY,+BAAZA,YAAY,iCAAZA,YAAY,uCAAZ,CAAAA,YAAY,OAmMxB,yCAyBA,4DAqBA,yCAyBA,yDASA,4BAMA,qDAYA,oEASA,wDAUA,+CASA,+CAKA,uDAOA,uDAKA,uCASA,uCAKA,iDAYA,gFASA,4CAQA,4DAOA,4DAKA,4DAOA,4DAKA,sCAUA,8EASA,0DAQA,oCASA,oCAKA,qDAYA,mIAQA,8CACO,GAAK,CAAAC,SAAS,uBAATA,SAAS,EAATA,SAAS,cAATA,SAAS,sBAAT,CAAAA,SAAS,OAOrB,qBAoHA,qBAUA,qBAUA,qBAUA,qBAMA,qBAMA,qBASA,qBASA,qBAUA,qBAKA,gCAUA,gDAQA,qDAYA,iDAsBA,6EACO,GAAK,CAAAC,UAAU,uBAAVA,UAAU,EAAVA,UAAU,6BAAVA,UAAU,YAAVA,UAAU,oBAAV,CAAAA,UAAU,OAStB,qDAYA,6DAWA,+BASA,4DAaA,sEA8DA,0DASA,0DAWA,+BASA,6DAaA,uEA+CA,wBAuBA,kCAUA,kDAQA,uDAYA,0CACO,GAAK,CAAAC,gBAAgB,uBAAhBA,gBAAgB,EAAhBA,gBAAgB,oBAAhBA,gBAAgB,qBAAhBA,gBAAgB,wBAAhBA,gBAAgB,uBAAhBA,gBAAgB,oBAAhBA,gBAAgB,qCAAhBA,gBAAgB,4BAAhB,CAAAA,gBAAgB,OAiB5B,qBA4HA,qBAUA,qBAUA,qBAMA,qBAMA,qBASA,qBASA,qBAMA,qBAUA,qBAUA,qBAUA,qBAUA,qBAKA,wDAQA,2WAYA,gCAUA,gDAQA,qDAYA,iDAsBA,2BAsDA,2BAUA,2BASA,2BASA,2BASA,sCAUA,sDAQA,2DAYA,6EACO,GAAK,CAAAC,gBAAgB,uBAAhBA,gBAAgB,EAAhBA,gBAAgB,6BAAhBA,gBAAgB,YAAhBA,gBAAgB,gBAAhBA,gBAAgB,gBAAhBA,gBAAgB,oBAAhB,CAAAA,gBAAgB,OAa5B,uEAWA,+BASA,sEAaA,gFAyCA,gEAWA,+BASA,+DAaA,yEAmEA,oEASA,mBASA,6EACO,GAAK,CAAAC,UAAU,uBAAVA,UAAU,EAAVA,UAAU,6BAAVA,UAAU,YAAVA,UAAU,gBAAVA,UAAU,oBAAV,CAAAA,UAAU,OAWtB,qCACO,GAAK,CAAAC,yBAAyB,uBAAzBA,yBAAyB,EAAzBA,yBAAyB,cAAzBA,yBAAyB,8BAAzB,CAAAA,yBAAyB,OAOrC,+CACO,GAAK,CAAAC,mCAAmC,uBAAnCA,mCAAmC,EAAnCA,mCAAmC,gBAAnCA,mCAAmC,8BAAnC,CAAAA,mCAAmC,OAO/C,uCACO,GAAK,CAAAC,gCAAgC,uBAAhCA,gCAAgC,EAAhCA,gCAAgC,oBAAhCA,gCAAgC,iCAAhCA,gCAAgC,gBAAhCA,gCAAgC,YAAhCA,gCAAgC,2BAAhCA,gCAAgC,wBAAhCA,gCAAgC,qBAAhCA,gCAAgC,oBAAhCA,gCAAgC,gBAAhCA,gCAAgC,wBAAhC,CAAAA,gCAAgC,OAuB5C,2CAQA,yDAQA,4WAYA,gCACO,GAAK,CAAAC,cAAc,uBAAdA,cAAc,EAAdA,cAAc,+BAAdA,cAAc,2BAAdA,cAAc,kBAAdA,cAAc,oBAAdA,cAAc,sBAAdA,cAAc,sBAAdA,cAAc,sBAAdA,cAAc,sBAAdA,cAAc,yCAAdA,cAAc,yCAAdA,cAAc,mCAAdA,cAAc,qCAAdA,cAAc,wBAAd,CAAAA,cAAc,OA6B1B,kDAQA,qWAYA,8DAWA,+BASA,6DAaA,uEA8CA,6DAWA,+BASA,4DAaA,sEA8DA,gEAWA,+BASA,+DAaA,yEA8CA,0DASA,0DAWA,+BASA,6DAaA,uEAmEA,yDAWA,+BASA,wDAaA,kEA8CA,8DAWA,+BASA,6DAaA,uEAgDA,0CAuDA,mBAQA,mBAeA,mBAQA,mBAkBA,gEAUA,gCAaA,4CAsCA,kDASA,wFACO,GAAK,CAAAC,YAAY,uBAAZA,YAAY,EAAZA,YAAY,cAAZA,YAAY,kBAAZ,CAAAA,YAAY,OAOxB,iDAYA,uDASA,8CAQA,oDAWA,yBAoEA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAMA,yBAKA,2CAiHA,2CAUA,2CAOA,2CAOA,2CAUA,2CASA,2CAUA,2CAOA,2CASA,2CAMA,2CAQA,2CASA,2CAUA,2CAOA,2CAOA,2CAUA,2CAUA,2CAMA,2CAMA,2CAQA,2CAQA,2CAUA,2CAMA,2CAUA,2CAQA,2CASA,2CAOA,2CAUA,2CAUA,2CASA,2CASA,2CAUA,2CAOA,2CAUA,2CASA,2CAOA,2CAQA,2CAUA,2CAMA,2CASA,2CAOA,2CAMA,2CASA,2CASA,mEAWA,+BASA,kEAaA,4EA8CA,kEAWA,+BASA,iEAaA,2EA8DA,sEAWA,+BASA,qEAaA,+EAyCA,sEAWA,+BASA,qEAaA,yEAWA,+BASA,wEAaA,6EAWA,+BASA,4EAaA,oEAWA,+BASA,mEAaA,6EA+CA,+DAWA,+BASA,8DAaA,wEAUA,mEAWA,+BASA,kEAaA,4EAYA,+DAWA,+BASA,8DAaA,wEA+CA,iEAWA,+BASA,gEAaA,0EAUA,+DAWA,+BASA,8DAaA,wEAmEA,qEAWA,+BASA,oEAaA,8EA8CA,sEAWA,+BASA,mEAaA,6EAyCA,8DAWA,+BASA,6DAaA,uEA8CA,mEAWA,+BASA,kEAaA,mEAWA,+BASA,kEAaA,4EAgDA,gEAWA,+BASA,+DAaA,+DAWA,+BASA,8DAaA,wEAkCA,mEAWA,+BASA,kEAaA,sDAQA,4DAcA,sCAyCA,oBAsDA,oBAUA,oBASA,oBASA,oBASA,+BAUA,+CAQA,oDAYA,6EACO,GAAK,CAAAC,SAAS,uBAATA,SAAS,EAATA,SAAS,6BAATA,SAAS,YAATA,SAAS,gBAATA,SAAS,gBAATA,SAAS,oBAAT,CAAAA,SAAS,OAarB,gEAWA,+BASA,+DAaA,yEAyCA,yDAWA,+BASA,wDAaA,kEAmEA,6DASA,mBAmBA,kDAMA,yEACO,GAAK,CAAAC,aAAa,uBAAbA,aAAa,EAAbA,aAAa,YAAbA,aAAa,gBAAbA,aAAa,gBAAbA,aAAa,mCAAb,CAAAA,aAAa,OAOlB,GAAK,CAAAC,gBAAgB,uBAAhBA,gBAAgB,EAAhBA,gBAAgB,cAAhBA,gBAAgB,oBAAhBA,gBAAgB,YAAhBA,gBAAgB,2BAAhBA,gBAAgB,yBAAhB,CAAAA,gBAAgB,OAQ5B,yBA8CA,yBAQA,oCAUA,oDAQA,yDAYA,yBACO,GAAK,CAAAC,YAAY,uBAAZA,YAAY,EAAZA,YAAY,wBAAZA,YAAY,4BAAZA,YAAY,oBAAZ,CAAAA,YAAY,OASxB,0HACO,GAAK,CAAAC,kBAAkB,uBAAlBA,kBAAkB,EAAlBA,kBAAkB,YAAlBA,kBAAkB,sBAAlB,CAAAA,kBAAkB,OAO9B,qEAWA,+BASA,oEAaA,yCAOA,yCAOA,yCAOA,yCAOA,yCAOA,gFAwCA,gFASA,gFAQA,oCAUA,oDAQA,yDAYA,qHACO,GAAK,CAAAC,kBAAkB,uBAAlBA,kBAAkB,EAAlBA,kBAAkB,6BAAlBA,kBAAkB,YAAlBA,kBAAkB,gBAAlBA,kBAAkB,gBAAlBA,kBAAkB,oBAAlB,CAAAA,kBAAkB,OAa9B,wEAWA,+BASA,uEAaA,4EAWA,+BASA,2EAaA,6CACO,GAAK,CAAAC,gCAAgC,uBAAhCA,gCAAgC,EAAhCA,gCAAgC,kBAAhCA,gCAAgC,8BAAhCA,gCAAgC,gBAAhCA,gCAAgC,gBAAhCA,gCAAgC,2BAAhCA,gCAAgC,qBAAhCA,gCAAgC,iCAAhC,CAAAA,gCAAgC,OAiB5C,sBA2BA,iCAUA,iDAQA,sDAYA,+BAeA,8CAkBA,oDASA,6CA4BA,mDAWA,+CAoCA,qDASA,0CA8BA,gDASA,gDAgBA,sDASA,0CAsDA,gDASA,8CA0CA,oDAiBA,yCAgBA,+CASA,0CAuDA,gDASA,qBA+EA,qBAQA,qBAUA,qBASA,qBASA,qBAUA,qBAUA,qBAUA,qBAUA,qBAQA,gCAUA,gDAQA,qDAYA,sHACO,GAAK,CAAAC,kBAAkB,uBAAlBA,kBAAkB,EAAlBA,kBAAkB,6BAAlBA,kBAAkB,kBAAlBA,kBAAkB,YAAlBA,kBAAkB,gBAAlBA,kBAAkB,cAAlBA,kBAAkB,8BAAlB,CAAAA,kBAAkB,OAe9B,0BAeA,oCAUA,oDAQA,yDAYA,oCACO,GAAK,CAAAC,YAAY,uBAAZA,YAAY,EAAZA,YAAY,kCAAZA,YAAY,oBAAZA,YAAY,8BAAZA,YAAY,oBAAZA,YAAY,kCAAZ,CAAAA,YAAY,OAaxB,6DAWA,+BASA,4DAaA,sEA8DA,oEAWA,+BASA,mEAaA,wEAWA,+BASA,uEAaA,+DAWA,+BASA,8DAaA,wEA+CA,0DAWA,+BASA,yDAaA,mEA+CA,0DAWA,+BASA,yDAaA,mEAmEA,iEAWA,+BASA,8DAaA,wEAyCA,8DAWA,+BASA,6DAaA,mBAyBA,uCACO,GAAK,CAAAC,0BAA0B,uBAA1BA,0BAA0B,EAA1BA,0BAA0B,+BAA1BA,0BAA0B,kBAA1BA,0BAA0B,kBAA1BA,0BAA0B,uBAA1BA,0BAA0B,yBAA1BA,0BAA0B,8BAA1BA,0BAA0B,4BAA1BA,0BAA0B,oBAA1B,CAAAA,0BAA0B,OAmBtC,2CAQA,2CACO,GAAK,CAAAC,+BAA+B,uBAA/BA,+BAA+B,EAA/BA,+BAA+B,kBAA/BA,+BAA+B,YAA/BA,+BAA+B,kBAA/BA,+BAA+B,wBAA/BA,+BAA+B,oBAA/B,CAAAA,+BAA+B,OAa3C,qDAYA,+BAiHO,KAAM,CAAA9C,6BAA6B,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAiE,CACjzB,KAAM,CAAAJ,gCAAgC,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAoE,CACv0F,KAAM,CAAAC,iCAAiC,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAqE,CACl6G,KAAM,CAAAI,gCAAgC,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAoE,CACjzB,KAAM,CAAAF,gCAAgC,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAoE,CACv/O,KAAM,CAAAD,kCAAkC,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAsE,CACjlQ,KAAM,CAAAI,+BAA+B,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,qBAAqB,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAiG,CAClnX,KAAM,CAAAC,+BAA+B,CAAG,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,qBAAqB,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAiG;;;;;;;;;;;;;;;;;;;ACp/c3mJ;;;;;;;;;;;;;;;ACanC,MAAM4C,UAA8C,GAAG;EACtDC,QAAQ,EAAE;IACTC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;EACV,CAAC;EACDC,SAAS,EAAE;IACVF,IAAI,EAAE,OAAO;IACbC,OAAO,EAAE;EACV,CAAC;EACDE,KAAK,EAAE;IACNH,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;EACV,CAAC;EACDG,OAAO,EAAE;IACRJ,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;EACV,CAAC;EACDI,cAAc,EAAE;IACfL,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;EACV,CAAC;EACDK,YAAY,EAAE;IACbN,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;EACV,CAAC;EACDM,aAAa,EAAE;IACdP,IAAI,EAAE,SAAS;IACfC,OAAO,EAAE;EACV,CAAC;EACDO,QAAQ,EAAE;IACTR,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;EACV;AACD,CAAC;AAED,iEAAeH,UAAU;;;;;;;;;;;;;;AChDzB,MAAMW,EAAE,GAAG,CAAC,CAAC;AACb,MAAMC,EAAE,GAAG,CAAC,CAAC;AAEb,MAAMC,UAAU,GAAG,CAACD,EAAE,EAAED,EAAE,CAAC;AAE3B,iEAAeE,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLzB;AACA;AACA;AAC6C;AAMd;AACM;AAGsC;AAGpB;AACR;AACuE;AAEtH,MAAMa,QAAQ,GAAG,CAAC;AAClB,MAAMC,QAAQ,GAAG,GAAG;AAEpB,MAAMC,IAA8C,GAAIC,KAAK,IAAK;EACjE,MAAM;IAAEC,UAAU;IAAEC;EAAc,CAAC,GAAGF,KAAK;EAE3C,MAAM;IACLtB,cAAc;IACdC,YAAY;IACZC,aAAa;IACbC,QAAQ;IACRT,QAAQ;IACRI,KAAK;IACLC;EACD,CAAC,GAAGwB,UAAU;EAEd,MAAM;IAAEnG,IAAI;IAAEqG,SAAS;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAU,CAAC,GACnDZ,kEAAe,CAACO,UAAU,CAAC;;EAE5B;EACAf,gDAAS,CAAC,MAAM;IACf,IAAImB,OAAO,EAAE;MACZ;IACD;IACAE,OAAO,CAACC,GAAG,CAAC,GAAG,EAAE,YAAY,EAAE;MAC9BH,OAAO;MACPD,KAAK;MACLtG,IAAI;MACJwG,SAAS;MACTH;IACD,CAAC,CAAC;IACFD,aAAa,CAAC;MACb3B,SAAS,EAAE4B;IACZ,CAAC,CAAC;EACH,CAAC,EAAE,CAACE,OAAO,CAAC,CAAC;EAEb,MAAMI,iBAAiB,GACtBC,iEAAA,CAAClB,sEAAiB,QACjBkB,iEAAA,CAACvB,4DAAS;IAACwB,KAAK,EAAC;EAAQ,GACxBD,iEAAA;IAAKE,SAAS,EAAC;EAAa,GAC3BF,iEAAA,CAACrB,gEAAa;IACbwB,KAAK,EAAEtB,mDAAE,CAAC,0BAA0B,EAAE,SAAS,CAAE;IACjD9E,KAAK,EAAEiE,cAAe;IACtBoC,OAAO,EAAE,CACR;MAAED,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,SAAS;MAAEpG,KAAK,EAAE;IAAU,CAAC,EACtC;MAAEoG,KAAK,EAAE,UAAU;MAAEpG,KAAK,EAAE;IAAW,CAAC,CACvC;IACFsG,QAAQ,EAAGrC,cAAc,IAAKwB,aAAa,CAAC;MAAExB;IAAe,CAAC;EAAE,CAChE,CACG,CACK,CAAC,EACZgC,iEAAA,CAACvB,4DAAS;IAACwB,KAAK,EAAEpB,mDAAE,CAAC,UAAU;EAAE,GAChCmB,iEAAA,CAACrB,gEAAa;IACb2B,uBAAuB;IACvBH,KAAK,EAAEtB,mDAAE,CAAC,UAAU,CAAE;IACtBuB,OAAO,EAAE,CACR;MAAED,KAAK,EAAE,UAAU;MAAEpG,KAAK,EAAE;IAAW,CAAC,EACxC;MAAEoG,KAAK,EAAE,YAAY;MAAEpG,KAAK,EAAE;IAAa,CAAC,EAC5C;MAAEoG,KAAK,EAAE,KAAK;MAAEpG,KAAK,EAAE;IAAM,CAAC,CAC7B;IACFA,KAAK,EAAEoE,QAAS;IAChBkC,QAAQ,EAAGE,gBAAgB,IAC1Bf,aAAa,CAAC;MACbrB,QAAQ,EAAEoC;IACX,CAAC;EACD,CACD,CAAC,EAEFP,iEAAA,CAACf,sDAAgB;IACVnB,KAAK;IAAEC,OAAO;IACpBsC,QAAQ,EAAEA,CAAC;MAAEvC,KAAK;MAAEC;IAAQ,CAAC,KAAK;MACjCyB,aAAa,CAAC;QAAE1B,KAAK;QAAEC;MAAQ,CAAC,CAAC;IAClC;EAAE,CACF,CAAC,EAEFiC,iEAAA,CAACtB,gEAAa;IACb4B,uBAAuB;IACvBH,KAAK,EAAEtB,mDAAE,CAAC,kBAAkB,CAAE;IAC9B2B,OAAO,EAAEtC,aAAc;IACvBmC,QAAQ,EAAEA,CAAA,KAAMb,aAAa,CAAC;MAAEtB,aAAa,EAAE,CAACA;IAAc,CAAC;EAAE,CACjE,CAAC,EACF8B,iEAAA,CAACpB,+DAAY;IACZ0B,uBAAuB;IACvBH,KAAK,EAAEtB,mDAAE,CAAC,gBAAgB,CAAE;IAC5B9E,KAAK,EAAEkE,YAAa;IACpBoC,QAAQ,EAAGtG,KAAK,IAAKyF,aAAa,CAAC;MAAEvB,YAAY,EAAElE;IAAM,CAAC,CAAE;IAC5D0G,GAAG,EAAEtB,QAAS;IACduB,GAAG,EAAEtB,QAAS;IACduB,QAAQ;EAAA,CACR,CACS,CACO,CACnB;EAED,OACCX,iEAAA,CAAAY,wDAAA,QACEb,iBAAiB,EAClBC,iEAAA;IAAA,GAASjB,sEAAa,CAAC;EAAC,GACvBiB,iEAAA;IAAKE,SAAS,EAAC;EAAa,GAC1BP,OAAO,IAAIK,iEAAA,YAAInB,mDAAE,CAAC,UAAU,CAAK,CAAC,EAClCa,KAAK,IACLM,iEAAA,cACCA,iEAAA,eAAOa,IAAI,CAACC,SAAS,CAACpB,KAAK,CAAQ,CAC/B,CAEF,CAAC,EAENM,iEAAA,CAACd,kHAA0B;IAC1B6B,KAAK,EAAE3H,IAAI,EAAE2H,KAAK,EAAEC,KAAK,IAAI,EAAG;IAChCC,gBAAgB,EAAC;EAAO,CACxB,CACG,CACJ,CAAC;AAEL,CAAC;;AAED;AACA,iEAAe5B,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;ACjJmC;AAChC;;AAEtB;AACA;AACA;AAC0B;AACA;AACU;AACE;AACA;AACtC;AACiC;AACe;AACF;AACE;AAEhD6B,oEAAiB,CAACE,6CAAa,EAAE;EAChCK,IAAI,EAAGnC,KAAK,IACXU,iEAAA,CAACsB,2DAAc;IAACD,MAAM,EAAEA,yCAAMA;EAAC,GAC9BrB,iEAAA,CAACuB,wDAAQ;IAACG,QAAQ,EAAE1B,iEAAA,CAACwB,0DAAO,MAAE;EAAE,GAC/BxB,iEAAA,CAACX,6CAAI;IAAA,GAAKC;EAAK,CAAG,CACT,CACK,CAChB;EACD6B,IAAI;EACJ5B,UAAU;EACVjB,UAAU,EAAEA,mDAAU;EACtBqD,OAAO,EAAE,CAAC,CAAC;EACXC,IAAI,EACH5B,iEAAA;IACCE,SAAS,EAAC,mCAAmC;IAC7C2B,KAAK,EAAE,EAAG;IACVC,MAAM,EAAE,EAAG;IACXC,OAAO,EAAC,WAAW;IACnBC,IAAI,EAAC,MAAM;IACXC,KAAK,EAAC;EAA4B,GAElCjC,iEAAA;IACCkC,CAAC,EAAC,sEAAsE;IACxEC,MAAM,EAAC,cAAc;IACrBC,WAAW,EAAC,KAAK;IACjBC,gBAAgB,EAAE,EAAG;IACrBC,aAAa,EAAC,OAAO;IACrBC,cAAc,EAAC;EAAO,CACtB,CAAC,EACFvC,iEAAA;IACCkC,CAAC,EAAC,kFAAkF;IACpFC,MAAM,EAAC,cAAc;IACrBC,WAAW,EAAC,KAAK;IACjBC,gBAAgB,EAAE,EAAG;IACrBC,aAAa,EAAC,OAAO;IACrBC,cAAc,EAAC;EAAO,CACtB,CAAC,EACFvC,iEAAA;IACCkC,CAAC,EAAC,6FAA6F;IAC/FC,MAAM,EAAC,cAAc;IACrBC,WAAW,EAAC,KAAK;IACjBC,gBAAgB,EAAE,EAAG;IACrBC,aAAa,EAAC,OAAO;IACrBC,cAAc,EAAC;EAAO,CACtB,CAAC,EACFvC,iEAAA;IACCkC,CAAC,EAAC,iFAAiF;IACnFC,MAAM,EAAC,cAAc;IACrBC,WAAW,EAAC,KAAK;IACjBC,gBAAgB,EAAE,EAAG;IACrBC,aAAa,EAAC,OAAO;IACrBC,cAAc,EAAC;EAAO,CACtB,CACG;AAEP,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;ACxEF;AACA;AACA;AAC0B;AAC4B;AACjB;AAGrC,MAAMC,YAGH,GAAG,CACL;EACCrC,KAAK,EAAEtB,mDAAE,CAAC,iBAAiB,CAAC;EAC5B9E,KAAK,EAAE;AACR,CAAC,EACD;EACCoG,KAAK,EAAEtB,mDAAE,CAAC,gBAAgB,CAAC;EAC3B9E,KAAK,EAAE;AACR,CAAC,EACD;EACC;EACAoG,KAAK,EAAEtB,mDAAE,CAAC,OAAO,CAAC;EAClB9E,KAAK,EAAE;AACR,CAAC,EACD;EACC;EACAoG,KAAK,EAAEtB,mDAAE,CAAC,OAAO,CAAC;EAClB9E,KAAK,EAAE;AACR,CAAC,EACD;EACC;EACAoG,KAAK,EAAEtB,mDAAE,CAAC,gBAAgB,CAAC;EAC3B9E,KAAK,EAAE;AACR,CAAC,EACD;EACC;EACAoG,KAAK,EAAEtB,mDAAE,CAAC,iBAAiB,CAAC;EAC5B9E,KAAK,EAAE;AACR,CAAC,EACD;EACC;EACAoG,KAAK,EAAEtB,mDAAE,CAAC,gBAAgB,CAAC;EAC3B9E,KAAK,EAAE;AACR,CAAC,EACD;EACC;EACAoG,KAAK,EAAEtB,mDAAE,CAAC,iBAAiB,CAAC;EAC5B9E,KAAK,EAAE;AACR,CAAC,CACD;AACD,SAASkF,gBAAgBA,CAAC;EACzBnB,KAAK;EACLC,OAAO;EACPsC;AAQD,CAAC,EAAE;EACF,OACCL,iEAAA,CAACrB,gEAAa;IACb2B,uBAAuB;IACvBH,KAAK,EAAEtB,mDAAE,CAAC,UAAU,CAAE;IACtB9E,KAAK,EAAG,GAAEgE,OAAQ,IAAGD,KAAM,EAAE;IAC7BsC,OAAO,EAAEoC,YAAa;IACtBnC,QAAQ,EAAGtG,KAAK,IAAK;MACpB,MAAM,CAAC0I,UAAU,EAAEC,QAAQ,CAAC,GAAG3I,KAAK,CAAC4I,KAAK,CAAC,GAAG,CAAC;MAC/C;MACAtC,QAAQ,CAAC;QAAEvC,KAAK,EAAE4E,QAAQ;QAAE3E,OAAO,EAAE0E;MAAW,CAAC,CAAC;IACnD;EAAE,CACF,CAAC;AAEJ;AAEA,iEAAexD,gBAAgB;;;;;;;;;;;;;;;;;;;;;AC9EyB;AAC9B;AAEX,SAASkC,IAAIA,CAAA,EAAG;EAC9B,OACCnB,iEAAA;IAAA,GAAOjB,kEAAa,CAACoC,IAAI,CAAC;EAAC,GACzB,2CACC,CAAC;AAEN;;;;;;;;;;;;;;;;;;;ACT6C;AAE7C,MAAMyB,KAAK,GAAGA,CAAC;EAAE1C,SAAS,GAAG,UAAU;EAAEpG,IAAI;EAAE+I,KAAK,GAAG,MAAM;EAAEC,IAAI,GAAG;AAAG,CAAC,KAAK;EAC9E,MAAMC,aAAa,GAAGA,CAACC,QAAQ,GAAG,IAAI,KAAK;IAC1C,QAAQH,KAAK;MACZ,KAAK,MAAM;QACV,OAAQ,6BACPG,QAAQ,GAAG,mBAAmB,GAAG,EACjC,EAAC;MACH,KAAK,KAAK;QACT,OAAQ,2BAA0BA,QAAQ,GAAG,kBAAkB,GAAG,EAAG,EAAC;MACvE,KAAK,MAAM;QACV,OAAQ,6BACPA,QAAQ,GAAG,mBAAmB,GAAG,EACjC,EAAC;MACH,KAAK,OAAO;QACX,OAAQ,+BACPA,QAAQ,GAAG,oBAAoB,GAAG,EAClC,EAAC;MACH,KAAK,QAAQ;QACZ,OAAQ,iCACPA,QAAQ,GAAG,qBAAqB,GAAG,EACnC,EAAC;MACH,KAAK,QAAQ;QACZ,OAAQ,iCACPA,QAAQ,GAAG,qBAAqB,GAAG,EACnC,EAAC;MACH,KAAK,QAAQ;QACZ,OAAQ,iCACPA,QAAQ,GAAG,qBAAqB,GAAG,EACnC,EAAC;MACH,KAAK,MAAM;QACV,OAAQ,6BACPA,QAAQ,GAAG,mBAAmB,GAAG,EACjC,EAAC;MACH;QACC,OAAQ,6BACPA,QAAQ,GAAG,mBAAmB,GAAG,EACjC,EAAC;IACJ;EACD,CAAC;EAED,MAAMC,OAAO,GACZ,qEAAqE,GACrE/C,SAAS;EACV,OAAO,CAAC,CAAC4C,IAAI,GACZ9C,iEAAA;IACC8C,IAAI,EAAEA,IAAI,IAAI,EAAG;IACjB5C,SAAS,EAAG,mDAAkD+C,OAAQ,IAAGF,aAAa,CAAC,CAAE;EAAE,GAE1FjJ,IACC,CAAC,GAEJkG,iEAAA;IAAME,SAAS,EAAG,GAAE+C,OAAQ,IAAGF,aAAa,CAAC,KAAK,CAAE,IAAG7C,SAAU;EAAE,GACjEpG,IACI,CACN;AACF,CAAC;AAED,iEAAe8I,KAAK;;;;;;;;;;;;;;;;;;;;AC3Dc;AAEO;AAQzC,MAAMO,aAAqC,GAAGA,CAAC;EAC9CjD,SAAS,GAAG,EAAE;EACdkD,IAAI,GAAG,QAAQ;EACfjF;AACD,CAAC,KAAK;EACL,MAAM;IAAEkF,KAAK;IAAEvJ,IAAI;IAAEwJ;EAAe,CAAC,GAAGnF,QAAQ;EAChD,OACC6B,iEAAA;IAAME,SAAS,EAAG,sCAAqCA,SAAU;EAAE,GAClEF,iEAAA,CAACkD,wDAAO;IACPK,GAAG,EAAC,EAAE;IACNC,kBAAkB,EAAG,0BACpBJ,IAAI,KAAK,OAAO,GAAG,WAAW,GAAG,WACjC,kCAAkC;IACnCK,GAAG,EAAEH,cAAc,EAAEI,aAAa,EAAEC,SAAS,IAAI,EAAG;IACpD3B,IAAI;IACJ9B,SAAS,EAAC,cAAc;IACxB0D,KAAK,EAAC;EAAM,CACZ,CAAC,EACF5D,iEAAA,cACCA,iEAAA;IACCE,SAAS,EAAG,GACXkD,IAAI,KAAK,OAAO,GAAG,SAAS,GAAG,WAC/B;EAAyG,GAEzGtJ,IACE,CAAC,EACLkG,iEAAA;IACCE,SAAS,EAAG,GACXkD,IAAI,KAAK,OAAO,GAAG,SAAS,GAAG,SAC/B;EAAwD,GAExDC,KAAK,EAAC,WACF,CACF,CACA,CAAC;AAET,CAAC;AAED,iEAAeF,aAAa;;;;;;;;;;;;;;;;;;;;;AChDM;AACO;AAGN;AAQnC,MAAMU,aAAqC,GAAGA,CAAC;EAC9C3D,SAAS,GAAG,EAAE;EACd/B,QAAQ;EACR2F;AACD,CAAC,KAAK;EACL,MAAM;IAAET,KAAK;IAAEvJ,IAAI;IAAEwJ;EAAe,CAAC,GAAGnF,QAAQ;EAChD,OACC6B,iEAAA;IACCE,SAAS,EAAG,+JAA8JA,SAAU;EAAE,GAErL4D,KAAK,IACL9D,iEAAA,CAAC4C,oDAAK;IACLC,KAAK,EAAES,cAAc,EAAET,KAAqB;IAC5C/I,IAAI,EAAEgK,KAAM;IACZ5D,SAAS,EAAC;EAAiC,CAC3C,CACD,EACDF,iEAAA,CAACkD,wDAAO;IACPM,kBAAkB,EAAG,6EAA6E;IAClGC,GAAG,EAAEH,cAAc,EAAEI,aAAa,EAAEC,SAAS,IAAI,EAAG;IACpD3B,IAAI;IACJ4B,KAAK,EAAC,MAAM;IACZL,GAAG,EAAC,YAAY;IAChBrD,SAAS,EAAC;EAAe,CACzB,CAAC,EACFF,iEAAA;IAAKE,SAAS,EAAC;EAAM,GACpBF,iEAAA;IAAIE,SAAS,EAAG;EAAyB,GAAEpG,IAAS,CAAC,EACrDkG,iEAAA;IACCE,SAAS,EAAG;EAA2D,GAEtEmD,KAAK,EAAC,WACF,CACF,CACA,CAAC;AAET,CAAC;AAED,iEAAeQ,aAAa;;;;;;;;;;;;;;;;;;;;ACjDM;AAEO;AAOzC,MAAME,aAAqC,GAAGA,CAAC;EAC9C7D,SAAS,GAAG,EAAE;EACd/B;AACD,CAAC,KAAK;EACL,MAAM;IAAEkF,KAAK;IAAEvJ,IAAI;IAAEwJ;EAAe,CAAC,GAAGnF,QAAQ;EAChD,OACC6B,iEAAA;IAAME,SAAS,EAAG,kCAAiCA,SAAU;EAAE,GAC9DF,iEAAA;IAAKE,SAAS,EAAC;EAA2F,GACzGF,iEAAA,CAACkD,wDAAO;IACPO,GAAG,EAAEH,cAAc,EAAEI,aAAa,EAAEC,SAAS,IAAI,EAAG;IACpDzD,SAAS,EAAC,wCAAwC;IAClD0D,KAAK,EAAC,4DAA4D;IAClE5B,IAAI;IACJuB,GAAG,EAAC;EAAE,CACN,CAAC,EACFvD,iEAAA;IAAME,SAAS,EAAC;EAA8F,CAAO,CACjH,CAAC,EACNF,iEAAA;IAAKE,SAAS,EAAC;EAAO,GACrBF,iEAAA;IACCE,SAAS,EAAG;EAAiE,GAE5EpG,IACE,CAAC,EACLkG,iEAAA;IACCE,SAAS,EAAG;EAA4D,GAEvEmD,KAAK,EAAC,WACF,CACF,CACA,CAAC;AAET,CAAC;AAED,iEAAeU,aAAa;;;;;;;;;;;;;;;;;;;;;AC1CM;AAEO;AACN;AASnC,MAAMC,aAAqC,GAAGA,CAAC;EAC9C9D,SAAS,GAAG,EAAE;EACd/B,QAAQ;EACR2F;AACD,CAAC,KAAK;EACL,MAAM;IAAET,KAAK;IAAEvJ,IAAI;IAAEwJ;EAAe,CAAC,GAAGnF,QAAQ;EAChD,MAAM4E,aAAa,GAAGA,CAAA,KAAM;IAC3B,QAAQO,cAAc,EAAET,KAAK;MAC5B,KAAK,MAAM;QACV,OAAO,aAAa;MACrB,KAAK,KAAK;QACT,OAAO,YAAY;MACpB,KAAK,MAAM;QACV,OAAO,aAAa;MACrB,KAAK,OAAO;QACX,OAAO,cAAc;MACtB,KAAK,QAAQ;QACZ,OAAO,eAAe;MACvB,KAAK,QAAQ;QACZ,OAAO,eAAe;MACvB,KAAK,QAAQ;QACZ,OAAO,eAAe;MACvB,KAAK,MAAM;QACV,OAAO,aAAa;MACrB;QACC,OAAO,aAAa;IACtB;EACD,CAAC;EAED,OACC7C,iEAAA;IAAKE,SAAS,EAAG,kCAAiCA,SAAU;EAAE,GAC7DF,iEAAA;IAAKE,SAAS,EAAC;EAA2F,GACzGF,iEAAA,CAACkD,wDAAO;IACPK,GAAG,EAAC,YAAY;IAChBvB,IAAI;IACJyB,GAAG,EAAEH,cAAc,EAAEI,aAAa,EAAEC,SAAS,IAAI,EAAG;IACpDzD,SAAS,EAAC,wCAAwC;IAClD0D,KAAK,EAAC;EAA4D,CAClE,CAAC,EACF5D,iEAAA,cACE8D,KAAK,IACL9D,iEAAA,CAAC4C,oDAAK;IACLC,KAAK,EAAES,cAAc,EAAET,KAAqB;IAC5C/I,IAAI,EAAEgK,KAAM;IACZ5D,SAAS,EAAC;EAAwB,CAClC,CAEE,CAAC,EACNF,iEAAA;IAAME,SAAS,EAAC;EAA8F,CAAO,CACjH,CAAC,EAENF,iEAAA;IAAKE,SAAS,EAAC;EAAwB,GACtCF,iEAAA;IAAKE,SAAS,EAAG,WAAU6C,aAAa,CAAC,CAAE;EAAe,CAAM,CAAC,EACjE/C,iEAAA;IAAKE,SAAS,EAAC;EAAM,GACpBF,iEAAA;IAAIE,SAAS,EAAC;EAA8D,GAC1EpG,IACE,CAAC,EACLkG,iEAAA;IAAME,SAAS,EAAC;EAAsD,GACpEmD,KAAK,EAAC,WACF,CACF,CACD,CACD,CAAC;AAER,CAAC;AAED,iEAAeW,aAAa;;;;;;;;;;;;;;;;;;;;;;AC9EM;AACyB;AAElB;AACN;AAQnC,MAAME,aAAqC,GAAGA,CAAC;EAC9ChE,SAAS,GAAG,EAAE;EACd/B;AACD,CAAC,KAAK;EACL,MAAM;IAAEkF,KAAK;IAAEvJ,IAAI;IAAEwJ;EAAe,CAAC,GAAGnF,QAAQ;EAEhD,OACC6B,iEAAA;IAAKE,SAAS,EAAG,yCAAwCA,SAAU;EAAE,GACpEF,iEAAA;IACCE,SAAS,EAAG;EAA+F,GAE3GF,iEAAA,CAACkD,wDAAO;IACPlB,IAAI;IACJuB,GAAG,EAAC,WAAW;IACfE,GAAG,EAAEH,cAAc,EAAEI,aAAa,EAAEC,SAAS,IAAI,EAAG;IACpDzD,SAAS,EAAC,wCAAwC;IAClD0D,KAAK,EAAC;EAA4D,CAClE,CAAC,EACF5D,iEAAA;IAAME,SAAS,EAAC;EAAqF,CAAO,CACxG,CAAC,EACNF,iEAAA,CAAC4C,oDAAK;IACL1C,SAAS,EAAC,sBAAsB;IAChC2C,KAAK,EAAES,cAAc,EAAET,KAAqB;IAC5C/I,IAAI,EACHkG,iEAAA;MAAKE,SAAS,EAAC;IAAmB,GAChCmD,KAAK,EACNrD,iEAAA,CAACiE,iEAAc;MAAC/D,SAAS,EAAC;IAAmC,CAAE,CAC3D;EACL,CACD,CAAC,EACFF,iEAAA;IAAKE,SAAS,EAAC;EAAmD,GACjEF,iEAAA;IACCE,SAAS,EAAG;EAA+K,GAE1LpG,IACE,CACA,CACD,CAAC;AAER,CAAC;AAED,iEAAeoK,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDsC;AACxB;AACK;AACuB;AAChB;AACb;AACA;AAU1B,SAASU,QAAQA,CAAI;EACnC1E,SAAS,GAAG,EAAE;EACd2E,UAAU,GAAG,CAAC;EACdzL,IAAI;EACJ0L,UAAU,GAAGA,CAAA,KAAM9E,iEAAA,YAAU,CAAC;EAC9B+E,aAAa,GAAG;AACC,CAAC,EAAE;EACpB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,+CAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,+CAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACiB,aAAa,EAAEC,eAAe,CAAC,GAAGlB,+CAAQ,CAAC,CAAC,CAAC;EAEpD,MAAMmB,WAAW,GAAGlB,qDAAa,CAAC,CAAC,CAACvC,KAAK;EACzCrD,gDAAS,CAAC,MAAM;IACf,IAAI8G,WAAW,IAAI,GAAG,EAAE;MACvB,OAAOD,eAAe,CAAC,CAAC,CAAC;IAC1B;IACA,IAAIC,WAAW,GAAG,GAAG,EAAE;MACtB,OAAOD,eAAe,CAACR,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC;IAC5C;IACA,IAAIS,WAAW,GAAG,IAAI,EAAE;MACvB,OAAOD,eAAe,CAACR,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC;IAC5C;IACA,IAAIS,WAAW,GAAG,IAAI,EAAE;MACvB,OAAOD,eAAe,CAACR,UAAU,GAAG,CAAC,CAAC;IACvC;IAEAQ,eAAe,CAACR,UAAU,CAAC;EAC5B,CAAC,EAAE,CAACA,UAAU,EAAES,WAAW,CAAC,CAAC;EAE7B,SAASC,YAAYA,CAACC,MAAc,EAAE;IACrC,IAAIA,MAAM,GAAGR,YAAY,EAAE;MAC1BG,YAAY,CAAC,CAAC,CAAC;IAChB,CAAC,MAAM;MACNA,YAAY,CAAC,CAAC,CAAC,CAAC;IACjB;IACAF,eAAe,CAACO,MAAM,CAAC;EACxB;EAEA,MAAMC,QAAQ,GAAGpB,6DAAY,CAAC;IAC7BqB,YAAY,EAAEA,CAAA,KAAM;MACnB,IAAIV,YAAY,GAAG5L,IAAI,EAAEa,MAAM,GAAG,CAAC,EAAE;QACpCsL,YAAY,CAACP,YAAY,GAAG,CAAC,CAAC;MAC/B;IACD,CAAC;IACDW,aAAa,EAAEA,CAAA,KAAM;MACpB,IAAIX,YAAY,GAAG,CAAC,EAAE;QACrBO,YAAY,CAACP,YAAY,GAAG,CAAC,CAAC;MAC/B;IACD,CAAC;IACDY,UAAU,EAAE;EACb,CAAC,CAAC;EAEF,IAAI,CAACR,aAAa,EAAE;IACnB,OAAOpF,iEAAA,YAAU,CAAC;EACnB;EAEA,MAAM6F,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,EAAEC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAK;EAE3E,OACChG,iEAAA;IAAKE,SAAS,EAAG,eAAcA,SAAU;EAAE,GAC1CF,iEAAA,CAACwE,uDAAY;IACZyB,UAAU,EAAE;MACXC,CAAC,EAAE;QAAEvI,IAAI,EAAE,QAAQ;QAAEwI,SAAS,EAAE,GAAG;QAAEC,OAAO,EAAE;MAAG,CAAC;MAClDC,OAAO,EAAE;QAAEC,QAAQ,EAAE;MAAI;IAC1B;EAAE,GAEFtG,iEAAA;IAAKE,SAAS,EAAG,oBAAoB;IAAA,GAAKuF;EAAQ,GACjDzF,iEAAA;IAAKE,SAAS,EAAG;EAAsC,GACtDF,iEAAA,CAACuE,iDAAM,CAACgC,EAAE;IACTC,OAAO,EAAE,KAAM;IACftG,SAAS,EAAC;EAA4C,GAEtDF,iEAAA,CAACsE,0DAAe;IAACkC,OAAO,EAAE,KAAM;IAACC,MAAM,EAAEvB;EAAU,GACjD9L,IAAI,CAACsN,GAAG,CAAC,CAACC,IAAI,EAAEC,IAAI,KACpB5G,iEAAA,CAACuE,iDAAM,CAACsC,EAAE;IACT3G,SAAS,EAAG,sDAAsD;IAClEuG,MAAM,EAAEvB,SAAU;IAClBsB,OAAO,EAAE;MACRN,CAAC,EAAE,CAACL,KAAK,GACL,GAAE,CAACb,YAAY,GAAG,CAAC,IAAI,CAAC,GAAI,GAAE,GAC9B,GAAE,CAACA,YAAY,GAAG,CAAC,IAAI,GAAI;IAChC,CAAE;IACF8B,OAAO,EAAE;MACRZ,CAAC,EAAE,CAACL,KAAK,GACL,GAAEb,YAAY,GAAG,CAAC,GAAI,GAAE,GACxB,GAAEA,YAAY,GAAG,GAAI;IAC1B,CAAE;IACFP,QAAQ,EAAEA,kEAAQ,CAAC,GAAG,EAAE,CAAC,CAAE;IAC3BsC,GAAG,EAAEH,IAAK;IACVI,KAAK,EAAE;MACNnF,KAAK,EAAG,UAASuD,aAAc;IAChC;EAAE,GAEDN,UAAU,CAAC6B,IAAI,EAAEC,IAAI,CACZ,CACX,CACe,CACP,CACP,CAAC,EAEL5B,YAAY,GACZhF,iEAAA,CAAC0E,yDAAO;IACPuC,OAAO,EAAEA,CAAA,KAAM1B,YAAY,CAACP,YAAY,GAAG,CAAC,CAAE;IAC9C9E,SAAS,EAAG,uEAAsE6E,aAAc;EAAE,CAClG,CAAC,GACC,IAAI,EAEP3L,IAAI,CAACa,MAAM,GAAG+K,YAAY,GAAGI,aAAa,GAC1CpF,iEAAA,CAAC2E,yDAAO;IACPsC,OAAO,EAAEA,CAAA,KAAM1B,YAAY,CAACP,YAAY,GAAG,CAAC,CAAE;IAC9C9E,SAAS,EAAG,mEAAkE6E,aAAc;EAAE,CAC9F,CAAC,GACC,IACA,CACQ,CACV,CAAC;AAER;;;;;;;;;;;;;;;;;;;ACrIqD;AAOrD,MAAM7B,OAAyB,GAAGA,CAAC;EAClCM,kBAAkB,GAAG,EAAE;EACvBD,GAAG,GAAG,SAAS;EACfrD,SAAS,GAAG,4BAA4B;EACxCP,OAAO,GAAG,MAAM;EAChB8D,GAAG;EACHG,KAAK;EACL5B,IAAI,GAAG,KAAK;EACZ,GAAGkF;AACJ,CAAC,KAAK;EACL,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;IACtC,OACCnH,iEAAA;MACCE,SAAS,EAAG,GAAEA,SAAU;IAA8G,GAEtIF,iEAAA;MAAKE,SAAS,EAAC;IAAmB,CAAM,CACpC,CAAC;EAER,CAAC;EAED,OACCF,iEAAA;IACCE,SAAS,EAAG,cACX8B,IAAI,GAAG,kBAAkB,GAAG,EAC5B,IAAGwB,kBAAmB,EAAE;IACzB,cAAW;EAAS,GAEnB,CAAC,CAACC,GAAG,IAAIA,GAAG,CAAC2D,QAAQ,CAAC,MAAM,CAAC,GAC7BpH,iEAAA;IACCyD,GAAG,EAAEA,GAAI;IACTF,GAAG,EAAEA,GAAI;IACTrD,SAAS,EAAG,IACX8B,IAAI,GAAG,gCAAgC,GAAG,EAC1C,IAAG9B,SAAU,EAAE;IAChBP,OAAO,EAAEA,OAAQ;IAAA,GACbuH;EAAI,CAEH,CAAC,GAEPC,wBAAwB,CAAC,CAEtB,CAAC;AAER,CAAC;AAED,iEAAejE,OAAO;;;;;;;;;;;;;;;;;;;;ACpDuC;AACL;AAIxD,MAAMyB,OAAkB,GAAGA,CAAC;EAAEzE,SAAS,GAAG,mBAAmB;EAAE,GAAGgH;AAAK,CAAC,KAAK;EAC5E,OACClH,iEAAA;IACCE,SAAS,EAAG,WAAUA,SAAU,gMAAgM;IAAA,GAC5NgH;EAAI,GAERlH,iEAAA,CAACqH,iEAAgB;IAACnH,SAAS,EAAC;EAAwB,CAAE,CAC/C,CAAC;AAEX,CAAC;AAED,iEAAeyE,OAAO;;;;;;;;;;;;;;;;;;;;AChBsC;AACJ;AAIxD,MAAMD,OAAkB,GAAGA,CAAC;EAAExE,SAAS,GAAG,mBAAmB;EAAE,GAAGgH;AAAK,CAAC,KAAK;EAC5E,OACClH,iEAAA;IACCE,SAAS,EAAG,WAAUA,SAAU,+LAA+L;IAAA,GAC3NgH;EAAI,GAERlH,iEAAA,CAACsH,iEAAe;IAACpH,SAAS,EAAC;EAAwB,CAAE,CAC9C,CAAC;AAEX,CAAC;AAED,iEAAewE,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;AChBY;AAMyB;AACA;AACA;AACA;AACA;AACxB;AAgBnC,MAAMxF,0BAA+D,GAAGA,CAAC;EACxEgB,SAAS,GAAG,EAAE;EACda,KAAK;EACL8D,UAAU,GAAG,CAAC;EACd5D,gBAAgB,GAAG;AACpB,CAAC,KAAK;EACL,MAAMsG,UAAU,GAAGA,CAACZ,IAAkB,EAAE7C,KAAa,KAAK;IACzD,MAAM0D,QAAQ,GAAG1D,KAAK,GAAG,CAAC,GAAI,IAAGA,KAAK,GAAG,CAAE,EAAC,GAAG2D,SAAS;IACxD,QAAQxG,gBAAgB;MACvB,KAAK,OAAO;QACX,OAAOjB,iEAAA,CAACmD,oEAAa;UAAC4D,GAAG,EAAEjD,KAAM;UAAC3F,QAAQ,EAAEwI;QAAK,CAAE,CAAC;MACrD,KAAK,OAAO;QACX,OAAO3G,iEAAA,CAAC6D,oEAAa;UAACkD,GAAG,EAAEjD,KAAM;UAACA,KAAK,EAAE0D,QAAS;UAACrJ,QAAQ,EAAEwI;QAAK,CAAE,CAAC;MACtE,KAAK,OAAO;QACX,OAAO3G,iEAAA,CAAC+D,oEAAa;UAACgD,GAAG,EAAEjD,KAAM;UAAC3F,QAAQ,EAAEwI;QAAK,CAAE,CAAC;MACrD,KAAK,OAAO;QACX,OAAO3G,iEAAA,CAACgE,oEAAa;UAAC+C,GAAG,EAAEjD,KAAM;UAACA,KAAK,EAAE0D,QAAS;UAACrJ,QAAQ,EAAEwI;QAAK,CAAE,CAAC;MACtE,KAAK,OAAO;QACX,OAAO3G,iEAAA,CAACkE,oEAAa;UAAC6C,GAAG,EAAEjD,KAAM;UAAC3F,QAAQ,EAAEwI;QAAK,CAAE,CAAC;MACrD;QACC,OAAO,IAAI;IACb;EACD,CAAC;EAED,OACC3G,iEAAA;IAAKE,SAAS,EAAG,iCAAgCA,SAAU;EAAE,GAC5DF,iEAAA,CAAC4E,iDAAQ;IACRxL,IAAI,EAAE2H,KAAM;IACZ+D,UAAU,EAAEA,CAAC6B,IAAI,EAAEC,IAAI,KAAKW,UAAU,CAACZ,IAAI,CAACe,IAAI,EAAEd,IAAI,CAAE;IACxD/B,UAAU,EAAEA;EAAW,CACvB,CACG,CAAC;AAER,CAAC;AAED,iEAAe3F,0BAA0B;;;;;;;;;;;;;;;;AC7DM;AACJ;AAG3C,MAAM0I,+BAA+B,GAAG9M,oDAAO,EAAC,aAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEa,SAASkE,eAAeA,CAACO,UAA4B,EAAE;EACrE,MAAM;IACLvB,cAAc;IACdC,YAAY;IACZC,aAAa;IACbC,QAAQ;IACRT,QAAQ;IACRI,KAAK;IACLC;EACD,CAAC,GAAGwB,UAAU;EACd;EACA,IAAIK,SAAS,GAAG,CAAC,CAAC;EAClB;;EAEA;EACAA,SAAS,GAAG;IACX9B,KAAK;IACL+J,OAAO,EAAE9J,OAAO;IAChB+J,KAAK,EAAEC,MAAM,CAAC9J,YAAY,CAAC;IAC3B+J,UAAU,EAAE7J;EACb,CAAC;;EAED;EACA,MAAM;IAAEwB,OAAO;IAAED,KAAK;IAAEtG;EAAK,CAAC,GAAGuO,wDAAQ,CAACC,+BAA+B,EAAE;IAC1EhI;EACD,CAAC,CAAC;EAEF,MAAMH,SAAS,GAAGrG,IAAI,EAAE2H,KAAK,EAAEC,KAAK,IAAI,EAAE;EAE1C,OAAO;IACNpB,SAAS;IACTD,OAAO;IACPD,KAAK;IACLtG,IAAI;IACJqG;EACD,CAAC;AACF;;;;;;;;;;;;;;;;;;;ACjFwB;AAC8B;AACtD;AACA;AACA;AACA;AACAI,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE,gCAAgC,CAAC;AACpD;;AAEA,MAAMyI,KAAK,GAAG,IAAIL,yDAAa,CAAC;EAC/BM,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,CAAC;AAChB,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAG,IAAIJ,gEAAS,CAAC,CAAC;AAE5B,MAAMK,QAAQ,GAAG,IAAIP,oDAAQ,CAAC;EAC7BQ,GAAG,EAAEC,eAAe,CAACC;AACtB,CAAC,CAAC;AAEK,MAAMzH,MAAM,GAAG,IAAI4G,wDAAY,CAAC;EACtCW,GAAG,EAAEC,eAAe,CAACC,eAAe;EACpCP,KAAK;EACLG,IAAI,EAAEL,oDAAI,CAAC,CAACK,IAAI,EAAEC,QAAQ,CAAC;AAC5B,CAAC,CAAC;;;;;;;;;;;;;;AChCK,MAAMlE,QAAQ,GAAGA,CAACyB,CAAC,GAAG,IAAI,EAAEG,OAAO,GAAG,CAAC,MAAM;EAClD0C,KAAK,EAAG7D,SAAiB,IAAK;IAC5B,OAAO;MACLgB,CAAC,EAAEhB,SAAS,GAAG,CAAC,GAAGgB,CAAC,GAAG,CAACA,CAAC;MACzBG;IACF,CAAC;EACH,CAAC;EACD2C,MAAM,EAAE;IACN9C,CAAC,EAAE,CAAC;IACJG,OAAO,EAAE;EACX,CAAC;EACD4C,IAAI,EAAG/D,SAAiB,IAAK;IAC3B,OAAO;MACLgB,CAAC,EAAEhB,SAAS,GAAG,CAAC,GAAGgB,CAAC,GAAG,CAACA,CAAC;MACzBG;IACF,CAAC;EACH;AACF,CAAC,CAAC;;;;;;;;;;;ACjBF;;;;;;;;;;;;;;;;;;;;;;;;ACAiC;AACW;AACR;AACoD;;AAExF;AACA;AACA;AACA,8BAA8B;AAC9B,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,0BAA0B,8CAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0BAA0B;AACnwDAAwD,2BAA2B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sBAAsB;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,2CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,6EAA6E,yBAAyB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAE0C;AAC1C;;;;;;;;;;;;;;;AC/gBA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uCAAuC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgB;AAChB;;;;;;;;;;;;;;;;;;;;;ACnD+B;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA,kDAAkD,OAAO;AACzD,+DAA+D,2BAA2B,sDAAsD;AAChJ,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,YAAY,gBAAgB;AACjG;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,IAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,wDAAwD;AACxD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sBAAsB,OAAO;AAC3F;AACA,yDAAyD,cAAc;AACvE;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA,yEAAyE,OAAO;AAChF,+DAA+D,2BAA2B,WAAW;AACrG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gDAAgD,iBAAiB,IAAI;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,YAAY,IAAI;AAC/E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY,yBAAyB;AAClF;AACA;AACA;AACA,6CAA6C,YAAY,4CAA4C;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY,4CAA4C;AACrG;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,2BAA2B,yCAAY,iBAAiB;AACxD,2BAA2B,yCAAY,iBAAiB;AACxD;AACA,0BAA0B,yCAAY,iBAAiB;AACvD,4CAA4C;AAC5C;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0CAAa,8HAA8H,YAAY;AAC3L;AACA;AACA;;AAE+C;AAC/C;;;;;;;;;;;;;;;;;;;AC9QO;AACA;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACO;AACA;;;;;;;;;;;;;;;;;ACpB2B;AAClC;AACA,IAAI,gDAAS;AACb;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;ACJyB;AAChB;AACtC;AACA,gBAAgB,6CAAM;AACtB,aAAa,+CAAQ;AACrB,sBAAsB,kDAAW;AACjC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,IAAI,uDAAU;AACd;AACA,KAAK;AACL;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;AChBI;AACa;AAC5C;AACA,gBAAgB,6CAAM;AACtB;AACA;AACA,IAAI,0DAAa,eAAe,qBAAqB,4BAA4B;AACjF;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;;ACRQ;AACM;AACS;AACjD;AACA,mCAAmC;AACnC,oCAAoC;AACpC,aAAa,wDAAW;AACxB,eAAe,iDAAS;AACxB,gBAAgB,iDAAS;AACzB,KAAK;AACL,IAAI,gDAAS;AACb,YAAY,iDAAS;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,YAAY,8CAAE;AACd;AACA,gBAAgB,+CAAG;AACnB;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;AC1B7B;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;ACAyC;AACT;AACqC;AACrE;AACA;AACA,8BAA8B,8CAAI,CAAC,yEAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8CAA8C;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,yBAAyB,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,4DAA4D;AACvH;AACA;AACA,qCAAqC;AACrC,yBAAyB,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,gHAAgH;AAC3K;AACA;AACA,kDAAkD,6CAAM;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0GAA0G,6CAAM;AAChH;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,YAAY;AAC/E;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,YAAY;AAClF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACsB;AACvB;;;;;;;;;;;;;;;ACnFkC;AAClC;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;AAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBoD;AACS;AAC9B;AACO;AACL;AACmG;AACtE;AAC9D;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,OAAO,oEAAe,CAAC,gEAAW;AAC9G;AACA;AACA;AACA,mBAAmB,gEAAW;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAa;AACpC;AACA,gBAAgB,gEAAW;AAC3B;AACA;AACA;AACA;AACA,0BAA0B,kEAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAQ,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+CAAM;AAClB;AACA,+BAA+B,+CAAM;AACrC;AACA;AACA;AACA;AACA,YAAY,+CAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+CAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAW;AACvB;AACA,YAAY,gEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAS,kEAAkE,sEAAS;AACtG,yBAAyB,2DAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mEAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,4EAA4E,8CAA8C;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAAW;AACxC;AACA;AACA,iEAAiE;AACjE;AACA,kCAAkC,kEAAa;AAC/C,kBAAkB,wBAAwB,cAAc,IAAI;AAC5D;AACA;AACA,gCAAgC,mEAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAe,cAAc,+CAAQ,CAAC,+CAAQ,GAAG,sBAAsB,yGAAyG;AAC/M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sDAAsD;AAC1G;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAM;AACvB;AACA;AACA,SAAS;AACT;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+CAAM;AACnC;AACA;AACA,SAAS;AACT;AACA,kDAAkD,6CAAM;AACxD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gDAAgD,2BAA2B;AAC3E;AACA;AACA;AACA;AACA,aAAa,+CAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gEAAW;AAC/B;AACA;AACA,oBAAoB,oEAAe;AACnC;AACA;AACA,4BAA4B,oEAAe;AAC3C;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6CAAG;AACnC,4BAA4B,2CAAI,CAAC,+DAAa;AAC9C;AACA;AACA;AACA;AACA,4BAA4B,mEAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gDAAS;AACjB;AACA;AACA;AACA;AACA,oCAAoC,2CAAI,CAAC,+DAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,kCAAkC;AACnC;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iCAAiC,oDAAK;AACtC;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAQ,CAAC,+CAAQ,GAAG;AACnC;AACA;AACA;AACA,eAAe,+CAAM,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,IAAI,gDAAS;AACb;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,oDAAK;AAChB;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACldkM;AAC3L;AACA;AACP;AACA;AACmB;AACZ;AACP;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,4DAAO;AAClB;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,gEAAW;AACtB;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACO;AACP,QAAQ,oEAAe;AACvB,eAAe,4DAAO;AACtB,6CAA6C,kEAAkE;AAC/G;AACA,oBAAoB,4DAAO,WAAW,kEAAa;AACnD,8BAA8B,2EAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACO;AACP,WAAW,oEAAe;AAC1B,SAAS,gEAAW;AACpB,SAAS,4DAAO;AAChB;AACO;AACP,eAAe,2DAAU;AACzB;AACO;AACP,sBAAsB,sEAAiB,CAAC,2EAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpF4C;AACiB;AAClC;AACK;AACM;AACS;AACa;AACmB;AAC9B;AACD;AACsB;AACA;AAC7B;AACqC;AACvB;AACvD;AACA,IAAI,gDAAS;AACb;AACA,iCAAiC;AACjC;AACA;AACA;AACA,wBAAwB,qDAAO;AAC/B;AACA,uBAAuB,4DAAe;AACtC;AACA,6BAA6B,kDAAQ;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,wDAAW;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yDAAW,8BAA8B,0DAAW;AACnF;AACA;AACA;AACA,6BAA6B,kEAAqB;AAClD;AACA;AACA;AACA;AACA,SAAS;AACT,mCAAmC,8CAAI;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB,sEAAqB;AACzC;AACA,mEAAmE,qEAAkB,GAAG,sDAAsD;AAC9I;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,0DAA0D,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,wHAAwH;AACpN;AACA;AACA,6BAA6B,qEAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+CAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,sHAAsH;AAC9M;AACA;AACA;AACA;AACA,YAAY,6DAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6DAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAW;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAS;AAChC;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA;AACA,sBAAsB,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,kBAAkB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAkB;AAC1B;AACA,oDAAoD,iDAAiD;AACrG;AACA,YAAY,6DAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+CAAQ,CAAC,+CAAQ,GAAG,cAAc;AACpE;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+CAAQ,CAAC,+CAAQ,GAAG,cAAc;AACpE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,wDAAwD,gDAAgD;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yBAAyB,2EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,+CAA+C;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAK;AAC/B;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAW;AACY;AACzB;;;;;;;;;;;;;;;;;;;;;;;;AC3T6D;AACsD;AACpE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA;AACA,sBAAsB,sEAAS,iJAAiJ,sEAAS;AACzL;AACA,SAAS;AACT;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAe;AAC5C;AACA,iEAAiE,0CAA0C;AAC3G,6CAA6C,6EAAwB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+CAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC;AAClC;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,qBAAqB,2DAAU;AAC/B;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD,kCAAkC;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAO;AACvB,4DAA4D,+CAA+C;AAC3G;AACA;AACA;AACA;AACA,qBAAqB,4DAAO;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,4DAAO;AACtB,yCAAyC,6BAA6B;AACtE;AACA,KAAK;AACL;AACA;AACA,QAAQ,oEAAe;AACvB,YAAY,4DAAO;AACnB;AACA;AACA,kFAAkF,qCAAqC;AACvH;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrHiC;AACS;AACT;AAC4E;AACtE;AACvC;AACA,QAAQ,oEAAe;AACvB,eAAe,oDAAO;AACtB;AACA,cAAc,+CAAQ,GAAG,yCAAyC;AAClE;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAa;AACvC,wBAAwB,2CAAI,CAAC,8DAAa;AAC1C;AACA;AACA,kCAAkC;AAClC;AACA;AACA,eAAe,oEAAe;AAC9B;AACA;AACA,YAAY,oEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,0BAA0B;AAClF;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AAChB;AACP,QAAQ,oEAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B,8DAAa;AACvC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvHyC;AACoC;AACmF;AACY;AAC9H;AACS;AAC+B;AACtF,gEAAe,cAAc,gEAAkB;AAC/C;AACA;AACA,qBAAqB,6EAAwB;AAC7C;AACA,oCAAoC;AACpC,kDAAkD;AAClD;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAQ,GAAG,kBAAkB,gEAAuB,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAQ,CAAC,+CAAQ,GAAG,qBAAqB;AAC/D;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,sCAAsC,+CAAQ,CAAC,+CAAQ,GAAG;AAC1D,gBAAgB,oDAAO;AACvB,wBAAwB,2EAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0JAA0J,6CAAM;AAChK;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAAM;AACtB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAO,cAAc,2EAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAO,YAAY,yEAAsB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB,sEAAS,6FAA6F,sEAAS;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAqB;AAC/D;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa,+CAAM;AACnB;AACA;AACA;AACA;AACA;AACA,wFAAwF,6CAAM;AAC9F;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA,uCAAuC,kEAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAO;AAC3B,4BAA4B,yEAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0EAAqB;AACvC,kBAAkB,oEAAe;AACjC;AACA;AACA;AACA;AACA,6BAA6B,mEAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAsB;AAC9C;AACA;AACA;AACA;AACA,2HAA2H,gEAAW;AACtI;AACA;AACA,mBAAmB,uDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,6FAA6F;AAC/K;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA,oBAAoB,mEAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAQ,GAAG;AAC7B,aAAa,+CAAM;AACnB;AACA;AACA;AACA;AACA,mBAAmB,kEAAS,oEAAoE,wEAAmB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAO,cAAc,oDAAO;AACxC,gCAAgC,uEAAc,4CAA4C,uEAAc;AACxG;AACA,YAAY,oEAAe;AAC3B,YAAY,oEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAW;AAC3B,gBAAgB,oEAAuB;AACvC;AACA;AACA;AACA,gBAAgB,oEAAuB;AACvC,gBAAgB,gEAAW;AAC3B;AACA;AACA;AACA,gBAAgB,oEAAuB;AACvC,gBAAgB,oEAAuB;AACvC,uBAAuB,+CAAQ,CAAC,+CAAQ,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/Z+B;AACK;AAC7B,oBAAoB,8CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6CAAG;AACpB,SAAS;AACT;AACA;AACA;AACO;AACP,qDAAqD,+BAA+B;AACpF;AACO;AACP,qDAAqD,+BAA+B;AACpF;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2DAA2D,yBAAyB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEiC;AAC4C;AAC7C;AACA;AACuR;AAC9N;AACyB;AACtD;AACQ;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAAa;AAC9C,sBAAsB,4DAAO;AAC7B;AACA,6BAA6B,kEAAqB;AAClD,SAAS;AACT,yCAAyC,yDAAW;AACpD,mCAAmC,8CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG,YAAY,yCAAyC;AACpG;AACA;AACA;AACA,YAAY,+EAA8B;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB,sEAAqB;AACzC,oEAAoE,gEAAW;AAC/E;AACA;AACA,SAAS;AACT,uCAAuC,8CAAI;AAC3C,YAAY,+EAA8B;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB,sEAAqB;AACzC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,yDAAW;AACpC;AACA;AACA;AACA;AACA,oBAAoB,+CAAQ,CAAC,+CAAQ,GAAG,EAAE,qEAAgB,CAAC,uEAAkB;AAC7E,sBAAsB,kEAAa;AACnC;AACA,0BAA0B,sEAAiB;AAC3C;AACA;AACA,qBAAqB,+CAAQ,GAAG,iFAAiF,oEAAkB,+CAA+C,EAAE,mEAAsB;AAC1M,SAAS;AACT;AACA;AACA,2BAA2B,qEAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAU;AAC1C;AACA;AACA;AACA,kCAAkC,sBAAsB;AACxD;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mEAAa;AAC9B;AACA,gBAAgB,4DAAO;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iCAAiC,2EAAsB;AACvD;AACA,yBAAyB,uEAAqB;AAC9C,uEAAuE;AACvE,+GAA+G,gEAAW;AAC1H;AACA;AACA;AACA;AACA;AACA,yBAAyB,qDAAO;AAChC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gEAAW;AACjD;AACA,qBAAqB;AACrB;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,+BAA+B,8EAAwB;AACvD,oDAAoD,0CAAI;AACxD,wCAAwC,uEAAc,0DAA0D,uEAAc;AAC9H;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qBAAqB,oEAAc;AACnC,4BAA4B;AAC5B;AACA;AACA,cAAc,qEAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAU;AAC1C;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAO;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kCAAkC,gEAAW;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAe;AAC/B,0BAA0B,sEAAS,EAAE,gEAAW,4DAA4D,uEAA0B,0EAA0E,sEAAS,EAAE,gEAAW;AACtO;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1QiC;AAC4C;AACvC;AACL;AACD;AAC+P;AACpJ;AACpF;AACG;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,4CAA4C;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2EAAsB;AACxD,qBAAqB,sEAAyB;AAC9C,oBAAoB,+CAAQ,CAAC,+CAAQ,GAAG,EAAE,qEAAgB;AAC1D,sBAAsB,+CAAQ,CAAC,+CAAQ,GAAG;AAC1C;AACA,aAAa,mCAAmC,oEAAkB,aAAa,EAAE,mEAAsB,4BAA4B,qGAAqG;AACxO;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC;AACA,SAAS;AACT,aAAa,gEAAW;AACxB,gCAAgC,uEAAc,oEAAoE,uEAAc;AAChI;AACA;AACA;AACA,4BAA4B,kEAAa;AACzC;AACA;AACA,oBAAoB,gEAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,qDAAqD,mEAAsB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0EAAqB;AACjC;AACA;AACA;AACA;AACA;AACA,0BAA0B,uEAAyB;AACnD,gBAAgB,gEAAW;AAC3B;AACA;AACA,sDAAsD,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,wBAAwB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2EAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gEAAW;AAChC,wBAAwB,oEAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sEAAqB;AACtC;AACA,2BAA2B,kEAAS,gCAAgC,2EAAsB;AAC1F;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,4CAA4C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAS;AACtC;AACA,YAAY,qDAAO;AACnB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,WAAW,0EAAqB;AACnE;AACA;AACA,+BAA+B,2CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAa;AAClC;AACA;AACA;AACA,oBAAoB,6DAAe;AACnC;AACA;AACA;AACA;AACA;AACA,uCAAuC,6EAAwB;AAC/D;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,oBAAoB,4DAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8EAAwB;AAC3D,wDAAwD,0CAAI;AAC5D,4CAA4C,uEAAc,0DAA0D,uEAAc;AAClI;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAW;AAC9C,wBAAwB,qDAAO;AAC/B,iBAAiB,gEAAW,cAAc,oEAAuB;AACjE;AACA;AACA,kCAAkC,gEAAW;AAC7C;AACA;AACA;AACA,uBAAuB,qDAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAS;AAC7B;AACA,aAAa;AACb;AACA,4BAA4B,qDAAO,uBAAuB,+CAAQ,GAAG;AACrE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+CAAQ,CAAC,+CAAQ,GAAG;AAC7D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAW;AACnB;AACA,QAAQ,oDAAK;AACb;AACA,qDAAqD,uDAAuD;AAC5G;AACA;AACA;AACA;AACA,oBAAoB,mEAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS,qDAAO;AAChB,SAAS,qDAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACzYiC;AACyC;AACd;AACpB;AACS;AACA;AACH;AAC9C;AACqD;AAC7B;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yDAAQ,GAAG,sDAAsD;AACvF,kBAAkB,2DAAU;AAC5B;AACA;AACA,gCAAgC,uEAAc;AAC9C;AACA,0FAA0F,uEAAc;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+CAA+C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAS;AACxC;AACA;AACA;AACA;AACA,uBAAuB,gDAAO;AAC9B,8BAA8B,sDAAU;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,6EAA6E;AAC7E,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA,cAAc;AACd,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAY;AAClC;AACA;AACA;AACA;AACA,sBAAsB,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,4BAA4B;AACpF;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAY;AAClC;AACA,kBAAkB,sEAAS;AAC3B;AACA;AACA,qFAAqF,sEAAS;AAC9F;AACA,sBAAsB,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,4BAA4B;AACpF;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAO;AACtB;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,SAAS,IAAI;AACb,gCAAgC,iEAAiE,cAAc,KAAK;AACpH,gCAAgC,0CAA0C;AAC1E;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,SAAS,IAAI;AACb,gCAAgC,iEAAiE,cAAc,KAAK;AACpH;AACA;AACA;AACA;AACA;AACA,wFAAwF,kBAAkB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,kBAAkB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,kEAAS;AAChC,SAAS;AACT;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;ACrPyD;AACC;AACD;AAC6O;AACxP;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8DAAS;AAC3C,aAAa;AACb;AACA;AACA,6BAA6B,8DAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAS;AACxB,mBAAmB,kDAAW;AAC9B;AACA,iLAAiL,QAAQ,+CAAQ,CAAC,+CAAQ,GAAG,mBAAmB,0BAA0B,KAAK;AAC/P;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iFAA4B;AAC3C;AACA;AACA;AACA,eAAe,+CAAQ,CAAC,+CAAQ,GAAG,cAAc;AACjD;AACA,eAAe;AACf;AACA;AACA,oCAAoC;AACpC,kCAAkC;AAClC,eAAe,gDAAS;AACxB,mBAAmB,kDAAW;AAC9B;AACA,qHAAqH,kEAAkE,QAAQ,+CAAQ,CAAC,+CAAQ,GAAG,yCAAyC;AAC5P;AACA,2BAA2B,+CAAQ,GAAG;AACtC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,QAAQ,8CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mCAAmC,0CAAK;AACxC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,+EAA0B;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC;AAClC,oCAAoC;AACpC,0CAA0C,gCAAgC;AAC1E,iDAAiD;AACjD,eAAe,gDAAS;AACxB;AACA,mBAAmB,kDAAW;AAC9B,iCAAiC,sEAAiB;AAClD,4BAA4B,2EAAsB;AAClD,8BAA8B,sEAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,8BAA8B;AAC7F;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,2JAA2J;AAC3J;AACA;AACA,qBAAqB,IAAI;AACzB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,gDAAS;AACxB;AACA;AACA,mBAAmB,kDAAW;AAC9B;AACA;AACA,iDAAiD,OAAO,gDAAS;AACjE;AACA,2BAA2B,kDAAW;AACtC;AACA;AACA;AACA,6BAA6B,kEAAa;AAC1C;AACA;AACA,4BAA4B,4DAAO;AACnC;AACA;AACA;AACA,oEAAoE;AACpE,+CAA+C,2EAAsB;AACrE;AACA;AACA,iCAAiC;AACjC;AACA,4BAA4B,qEAAgB;AAC5C;AACA;AACA;AACA;AACA,sCAAsC,sEAAS,gEAAgE,sEAAS;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,+BAA+B,mEAAc;AAC7C,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,gDAAS;AACxB;AACA;AACA,mBAAmB,kDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA,mCAAmC,2EAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,sDAAS;AACrE;AACA,gCAAgC,6EAAwB;AACxD;AACA,kCAAkC,oDAAoD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sIAAsI,mCAAmC;AACzK;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAK;AACrB;AACA;AACA;AACA,6DAA6D,yDAAe;AAC5E;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,kCAAkC,sEAAS,6DAA6D,sEAAS;AACjH;AACA;AACA;AACA,6DAA6D,yDAAe;AAC5E;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;AACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5T4C;AACc;AACpB;AACuC;AACuG;AACpL;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA,wBAAwB,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,kEAAkE;AAC5H;AACA,oBAAoB,2EAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,YAAY,4DAAa;AACzB,qBAAqB,+CAAQ,CAAC,+CAAQ,GAAG,iBAAiB,SAAS,2EAAwB,+CAA+C;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAK,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA,6CAA6C,4DAAa;AAC1D;AACA;AACA,2CAA2C,4DAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oDAAK;AAClB,2BAA2B,oDAAK;AAChC;AACA;AACA;AACA;AACA;AACA,oCAAoC,oDAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uEAAkB;AAC7C;AACA,mDAAmD,+CAA+C;AAClG,2BAA2B,kEAAS,kSAAkS,WAAW;AACjV;AACA;AACA,0BAA0B,oDAAK;AAC/B,kEAAkE,+CAAQ,CAAC,+CAAQ,GAAG;AACtF;AACA;AACA,gDAAgD,4DAAa;AAC7D;AACA;AACA;AACA,8BAA8B,+CAAQ,CAAC,+CAAQ,GAAG,+CAA+C,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,GAAG,mBAAmB,mBAAmB,wBAAwB,WAAW,+CAAQ,CAAC,+CAAQ,GAAG,wDAAwD,OAAO,yBAAyB;AAC5T;AACA;AACA;AACA,kCAAkC,4DAAa;AAC/C;AACA;AACA;AACA;AACA,kEAAkE,4DAAa;AAC/E;AACA,4CAA4C,4DAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wBAAwB;AACjD;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAS;AACpC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE,4DAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAS,mFAAmF,sEAAS;AACvH,wDAAwD;AACxD;AACA;AACA;AACA,qBAAqB,2EAAwB;AAC7C;AACA;AACA,qBAAqB,EAAE,4DAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,oBAAoB,+CAAQ,CAAC,+CAAQ,GAAG,gBAAgB;AACxD;AACA,kBAAkB,8DAAS,mCAAmC;AAC9D,aAAa,oEAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,4DAAa;AACrE,iCAAiC,4DAAa;AAC9C,iCAAiC,4DAAa;AAC9C;AACA;AACA,4BAA4B,4DAAO,+BAA+B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oDAAK;AACtB;AACA;AACA;AACA;AACA,uCAAuC,4DAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAAQ,GAAG;AACxD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAsB;AAClC;AACA;AACA;AACA,0BAA0B,+CAAQ,CAAC,+CAAQ,GAAG,2BAA2B,0DAA0D,4DAAa,wBAAwB;AACxK;AACA,QAAQ,2EAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,2BAA2B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,2DAAU;AACe;AAC3B,2EAAqB;AACd;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACO;AACP;AACA,mBAAmB,kEAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACtgBiC;AACK;AACa;AAC6B;AACrB;AACoC;AACjB;AAC9E;AACA,mCAAmC,8DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4DAAa;AAChE;AACA,mCAAmC,4DAAa;AAChD,aAAa,oDAAK;AAClB,4BAA4B,4DAAa;AACzC;AACA,aAAa,oDAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,6BAA6B,oDAAK;AAClC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oDAAK;AAClB;AACA;AACA,8DAA8D,wBAAwB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAmB;AACvC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,yBAAyB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAwB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,2BAA2B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG,qCAAqC,2CAA2C,+BAA+B;AAC9J;AACA,aAAa,oDAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAK;AACjB,YAAY,oDAAK;AACjB;AACA;AACA;AACA,yBAAyB,2DAAU;AACnC,4BAA4B,oEAAe;AAC3C;AACA;AACA;AACA,uCAAuC,oEAAe;AACtD,6BAA6B,4FAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qCAAqC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAa;AACjD;AACA;AACA,6BAA6B,4DAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;AACd;AACP,kCAAkC;AAClC;AACA;AACA,2BAA2B,0EAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9RyD;AACiB;AACpC;AACU;AACsE;AAC/D;AACuQ;AAC9O;AACgB;AAClB;AACD;AAChC;AACkB;AACH;AAC5D;AACA;AACA;AACA,kTAAkT;AAClT;AACA;AACA;AACA,mCAAmC,8DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sDAAU,GAAG,cAAc;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gDAAgD,uEAAc,yDAAyD,uEAAc;AACrI;AACA;AACA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAS;AACxB;AACA,mBAAmB,kDAAW;AAC9B;AACA;AACA,kCAAkC,sEAAS,4GAA4G,sEAAS;AAChK,kCAAkC,sEAAS;AAC3C,wQAAwQ,sEAAS;AACjR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,uCAAuC,6DAAQ,sCAAsC,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,wCAAwC;AAC/J,wCAAwC,0EAAqB;AAC7D,kDAAkD,yDAAW;AAC7D,2DAA2D,+EAA0B;AACrF,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,sDAAsD,+CAAQ,GAAG;AACjE;AACA;AACA;AACA;AACA,wCAAwC,0EAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,yDAAW,aAAa,yDAAW;AACjG;AACA,yCAAyC;AACzC,qCAAqC;AACrC,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,0BAA0B,gEAAiB;AAC3C,iBAAiB,yGAAiC;AAClD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gBAAgB,yGAAiC,YAAY,qEAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iCAAiC,4FAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mDAAmD,sEAAgB;AACnE;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,4BAA4B;AAC3F;AACA;AACA,yCAAyC,8FAAsB;AAC/D,yBAAyB,yGAAiC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yCAAyC,+CAAQ,CAAC,+CAAQ,GAAG,aAAa,mBAAmB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa,8BAA8B,gCAAgC;AAC3E;AACA,iEAAiE,gBAAgB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+CAAQ,CAAC,+CAAQ,GAAG,eAAe,UAAU,cAAc;AACpG;AACA;AACA,2BAA2B,kEAAS;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2FAAqC;AACpE;AACA;AACA;AACA;AACA,kCAAkC,sEAAgB;AAClD;AACA;AACA;AACA,6BAA6B,sEAAgB,CAAC,4EAAsB;AACpE,yBAAyB,+CAAQ,CAAC,+CAAQ,GAAG,kBAAkB;AAC/D;AACA;AACA,mCAAmC,+CAAQ,CAAC,+CAAQ,GAAG,UAAU,oBAAoB;AACrF;AACA;AACA,qBAAqB,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAQ,CAAC,+CAAQ,GAAG;AACnC;AACA;AACA,kBAAkB,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,gEAAgE;AACpH;AACA;AACA;AACA,4BAA4B,oDAAS;AACrC,6BAA6B,iEAAe;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kCAAkC;AAClC,kBAAkB,sEAAS;AAC3B,sCAAsC,sEAAS;AAC/C,kBAAkB,sEAAS,wFAAwF,sEAAS;AAC5H,kBAAkB,sEAAS,yFAAyF,sEAAS;AAC7H,kBAAkB,sEAAS,+EAA+E,sEAAS;AACnH,uEAAuE,kCAAkC;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,gDAAgD,uEAAc,8EAA8E,uEAAc;AAC1J;AACA;AACA,0CAA0C,6DAAa;AACvD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oEAAc;AACvC;AACA;AACA,yBAAyB,qEAAe;AACxC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,8BAA8B,kEAAY;AAC1C;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,iEAAe;AAC5C;AACA;AACA,6BAA6B,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,6BAA6B;AAC5F,iBAAiB;AACjB,gBAAgB,sEAAS;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,kEAAS;AACxC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kKAAkK;AAClK;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,gCAAgC,0EAAqB;AACrD,wCAAwC,gFAA8B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,oEAAsB;AACxF;AACA,8BAA8B,yDAAW;AACzC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,4DAAU;AACjC;AACA,iEAAiE,8CAA8C;AAC/G,qCAAqC;AACrC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,uBAAuB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sEAAgB;AAC/C,6CAA6C,+CAAQ,CAAC,+CAAQ,GAAG,cAAc,4BAA4B;AAC3G;AACA;AACA;AACA;AACA;AACA,gCAAgC,oEAAkB;AAClD;AACA;AACA,sCAAsC,yDAAO;AAC7C,wBAAwB,6DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iCAAiC,yDAAO;AACxC,oBAAoB,6DAAO;AAC3B;AACA;AACA;AACA;AACA,6BAA6B,yDAAO;AACpC,gBAAgB,4DAAU,MAAM,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA,yBAAyB,6DAAQ;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAQ;AACvB,gCAAgC,+EAA0B;AAC1D;AACA;AACA;AACA,kDAAkD,yDAAW;AAC7D;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAa;AAC5C;AACA;AACA;AACA,oCAAoC,6DAAa;AACjD;AACA;AACA,SAAS;AACT,wBAAwB,+DAAa;AACrC;AACA,sBAAsB,yDAAW,GAAG,4BAA4B;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB,6DAAa;AACrE;AACA;AACA;AACA;AACA,4cAA4c;AAC5c,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,qCAAqC,gCAAgC;AACrE,SAAS;AACT;AACA;AACA,0BAA0B,yDAAO;AACjC;AACA,uEAAuE,iCAAiC;AACxG;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uMAAuM,kEAAY;AACnN;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,oDAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,wCAAwC;AAC1G;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC;AACtC;AACA,4CAA4C,2CAA2C,6DAAa;AACpG;AACA;AACA;AACA,iBAAiB,oDAAK,SAAS;AAC/B,gBAAgB,2EAAqB;AACrC;AACA,6CAA6C,OAAO,4DAAU,IAAI,+CAAQ,GAAG,qBAAqB,4EAAwB,+CAA+C,4BAA4B,eAAe;AACpN;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA,iBAAiB,6BAA6B,2CAA2C;AACzF;AACA;AACA,kCAAkC,6DAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAa;AAC5C;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,4EAAwB;AACpC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,0CAA0C,oDAAS;AACnD;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,eAAe,+CAAQ,CAAC,+CAAQ,GAAG,iBAAiB,uCAAuC;AAC3F;AACA;AACA,CAAC;AACuB;AACxB;;;;;;;;;;;;;;;ACh4BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACbiD;AACV;AACiB;AACjD;AACA;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,iBAAiB,oDAAa,CAAC,oDAAa,CAAC,oDAAa;AAC1D;AACA;AACA;AACA,8BAA8B,OAAO,oEAAe,qDAAqD;AACzG;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;;;;;;;;;;;;;;;;;;;;ACvCkC;AAC2C;AACvB;AACsC;AAC5F;AACA,oCAAoC,2DAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,OAAO,2DAAU,QAAQ;AACrE;AACA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2DAAU;AAC/D,sDAAsD,2DAAU;AAChE,aAAa;AACb;AACA;AACA;AACA;AACA,8DAA8D,2DAAU;AACxE,+DAA+D,2DAAU;AACzE,aAAa;AACb;AACA;AACA;AACA,6BAA6B,gEAAe,oBAAoB,mEAAkB,CAAC,kEAAiB,kBAAkB,2DAAU;AAChI;AACA;AACA;AACA;AACA,uBAAuB,kEAAS;AAChC;AACA;AACA;AACA;AACA;AACA,oEAAoE,+BAA+B,2DAAU,QAAQ,KAAK,2DAAU;AACpI,aAAa;AACb;AACA;AACA;AACA;AACA,4DAA4D,2DAAU;AACtE,iBAAiB,KAAK,2DAAU;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uEAAc,qCAAqC,uEAAc;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;AACtB;;;;;;;;;;;;;;;ACnG6C;AACtC,cAAc,sDAAU;AAC/B;;;;;;;;;;;;;;;ACF6C;AACtC,WAAW,sDAAU;AAC5B;;;;;;;;;;;;;;;;;ACFkC;AACY;AACO;AACrD;AACA,IAAI,gDAAS;AACb;AACA,kCAAkC;AAClC,sCAAsC,kEAAc;AACpD;AACA;AACA;AACA;AACA,CAAC,CAAC,sDAAU;AACQ;AACpB;;;;;;;;;;;;;;;ACdkE;AAC3D;AACP;AACA,4BAA4B,uEAAc,0RAA0R,WAAW,yBAAyB,sBAAsB,mCAAmC,yBAAyB,wBAAwB,IAAI,EAAE,eAAe,uEAAc;AACrf;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNyC;AACC;AACmB;AAC7B;AACc;AACuB;AACE;AAC5B;AACmD;AAC7C;AACoE;AAC9C;AACd;AACX;AACsB;AACpE,kBAAkB,kEAAK,eAAe,eAAe;AAC9C;AACP,kCAAkC;AAClC,yJAAyJ,wEAAc,+QAA+Q,6CAAM;AAC5b;AACA,QAAQ,8DAAY;AACpB;AACA;AACA,gBAAgB,8EAA8E;AAC9F;AACA;AACA;AACA;AACA,eAAe,sDAAU;AACzB,wBAAwB,wDAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+CAAQ,CAAC,+CAAQ,GAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8FAAgC,mBAAmB,4EAAkB;AACtF;AACA;AACA,YAAY,8CAAK;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,iCAAiC,+CAAQ,GAAG;AAC5C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB,oFAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sEAAiB;AACvE,uBAAuB,kEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,2BAA2B,kEAAS;AACpC;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uEAAgB;AACrC;AACA,uBAAuB,2DAAS;AAChC;AACA;AACA;AACA;AACA;AACA,+BAA+B,qFAAuB;AACtD;AACA;AACA,uBAAuB,2DAAS;AAChC;AACA;AACA,mBAAmB,4DAAU;AAC7B,iDAAiD,kEAAK,eAAe,eAAe;AACpF;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA,2BAA2B,iFAAiB;AAC5C;AACA;AACA,2BAA2B,4EAAY;AACvC;AACA,aAAa;AACb,wCAAwC,OAAO,2EAAW,kBAAkB;AAC5E;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;;;;;;;;;;;;;;ACvIO;AACP;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;;;;;;;;;;;;;;ACPe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;ACbwE;AACzD;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8BAA8B;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kCAAkC;AACnE;AACA,iCAAiC,8BAA8B;AAC/D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,0EAAyB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtEwE;AACzD;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,8BAA8B,2BAA2B;AACzD,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA,QAAQ,0EAAyB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BwE;AACzD;AACf;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,0EAAyB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACdyD;AACA;AACJ;AACU;AACqB;AACpF;AACO;AACP;AACA,WAAW,gDAAS;AACpB;AACA;AACA,eAAe,kDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yPAAyP;AACzP;AACA;AACA;AACA,+BAA+B,sEAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6FAAqB;AAC7D;AACA;AACA,mDAAmD,+CAAQ,GAAG;AAC9D;AACA;AACA,mDAAmD,+CAAQ,CAAC,+CAAQ,GAAG,WAAW,YAAY,+CAAQ,CAAC,+CAAQ,GAAG,4DAA4D,KAAK,oEAAsB,yBAAyB;AAClO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,gCAAgC,oCAAoC;AACpE;AACO;AACP;AACA;AACA;AACA,wCAAwC,2CAA2C;AACnF;AACA;AACA,gBAAgB,iEAAgB;AAChC;AACA;AACA;AACA;AACA,gBAAgB,iEAAgB;AAChC,qDAAqD,0BAA0B;AAC/E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxKwK;AACvH;AACU;AACN;AACF;AAC5C;AACP;AACA,QAAQ,qFAAc;AACtB;AACA,QAAQ,8FAAuB;AAC/B,eAAe,+DAAa;AAC5B,QAAQ,uFAAgB;AACxB,eAAe,gEAAc;AAC7B,QAAQ,uFAAgB;AACxB,eAAe,gEAAc;AAC7B;AACA,QAAQ,6EAAM;AACd,eAAe,iEAAe;AAC9B,QAAQ,2FAAoB;AAC5B,eAAe,oEAAkB;AACjC;AACA;AACA;;;;;;;;;;;;;;;ACtBuE;AAChE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oFAAuB;AACzD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oFAAuB;AAC1D;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;;;;;;;;;;;;;;;;;AC1CgD;AAChB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO,+CAA+C;AAC/C;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA,0DAA0D,oDAAa;AACvE;AACA;AACO;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,GAAG,+BAA+B,SAAS,+CAAQ,CAAC,+CAAQ,GAAG,qCAAqC;AAChJ;AACA;AACA;AACA,eAAe,+CAAQ,CAAC,+CAAQ,GAAG;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC,0CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;AC7EO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbkE;AAC3D;AACP;AACA;AACA;AACA;AACA;AACA,uCAAuC,uEAAc,6FAA6F,uEAAc;AAChK;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACbO;AACP,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACXO;AACP,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACR0D;AACZ;AACQ;AACG;AACA;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO,gDAAS;AAC1D;AACA,mBAAmB,kDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,IAAI,gDAAS;AACb;AACA;AACA,8BAA8B;AAC9B;AACA,kDAAkD,qEAAkB;AACpE;AACA,wDAAwD,qEAAkB;AAC1E;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAU;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC,CAAC,sDAAU;AACS;AACrB;;;;;;;;;;;;;;;AChJiC;AAC1B;AACP,kBAAkB,+CAAQ,GAAG;AAC7B;AACA;AACA,sBAAsB,+CAAQ,CAAC,+CAAQ,GAAG;AAC1C;AACA;AACA,sBAAsB,+CAAQ,CAAC,+CAAQ,GAAG;AAC1C;AACA;AACA,mCAAmC,QAAQ,+CAAQ,GAAG;AACtD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;ACtBsD;AAC/C;AACP,eAAe,2DAAU;AACzB;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;ACNO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACR4D;AACrD;AACP;AACA,4CAA4C;AAC5C,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAgB;AAClC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChBkE;AAC3D;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA,gCAAgC,uEAAc,yCAAyC,uEAAc;AACrG;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjB+B;AACyB;AACxD,iBAAiB,6DAAY;AAC7B;AACA;AACO;AACP,kBAAkB,gDAAmB;AACrC;AACA,8BAA8B,gDAAmB;AACjD,6BAA6B,gDAAmB,GAAG;AACnD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACkD;AAClD;;;;;;;;;;;;;;;;;ACnB6D;AAC9B;AACuB;AAC/C;AACP;AACA,wBAAwB,mEAAgB;AACxC,YAAY,gDAAmB;AAC/B,kCAAkC;AAClC;AACA,sCAAsC,aAAa,gBAAgB;AACnE;AACA,kBAAkB,sEAAS;AAC3B,qEAAqE,sEAAS;AAC9E,gBAAgB,gDAAmB,2BAA2B,gBAAgB;AAC9E,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;AChB6D;AAC1B;AACoB;AAChD;AACP,kBAAkB,iDAAU,CAAC,mEAAgB;AAC7C;AACA,cAAc,sEAAS;AACvB;AACA,sCAAsC,sEAAS;AAC/C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXyC;AACoB;AACe;AACX;AAC3B;AACa;AACI;AACH;AACC;AACiB;AACf;AAC6C;AACpG;AACO;AACP,8BAA8B;AAC9B,4BAA4B,oEAAe;AAC3C;AACO;AACP,mBAAmB,6CAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+CAAQ;AACrB;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oEAAe;AAChD;AACA;AACA;AACA,2BAA2B,yDAAa;AACxC,SAAS;AACT,iCAAiC,oEAAe;AAChD;AACA;AACA;AACA,2BAA2B,yDAAa;AACxC,SAAS;AACT,uCAAuC,8DAAa;AACpD,QAAQ,oEAAkB,QAAQ,0DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,kCAAkC,sBAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,8BAA8B,iDAAU,CAAC,mEAAgB;AACzD;AACA;AACA,qBAAqB,8EAAoB,CAAC,kDAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA;AACA,uCAAuC,yDAAa;AACpD,qBAAqB;AACrB;AACA;AACA;AACA,iCAAiC,gCAAgC,oCAAoC;AACrG,SAAS;AACT;AACA;AACA;AACA,0BAA0B,kCAAkC,gBAAgB,kCAAkC;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oDAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6DAAO;AAC5B,8BAA8B,yDAAY;AAC1C;AACA;AACA;AACA,6BAA6B;AAC7B,iJAAiJ,8CAAM;AACvJ,8DAA8D,mBAAmB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAO,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,2BAA2B,kEAAS;AACpC,aAAa;AACb;AACA;AACA;AACA,eAAe,qEAAe;AAC9B,kBAAkB,0DAAW,GAAG,8BAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,8CAAM;AACvF,0DAA0D,gDAAQ,CAAC,gDAAQ,CAAC,gDAAQ,GAAG,YAAY,iDAAiD,8JAA8J;AAClT,kCAAkC,qEAAe;AACjD,oCAAoC,0DAAW,GAAG,8BAA8B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yDAAa;AAC5C,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;;;;;;AC5S6D;AAC9B;AAC+B;AAC9D;AACA;AACA,eAAe,yLAAK;AACb;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAS;AAC5B;AACA,aAAa,2CAAc,GAAG,QAAQ,0CAA0C;AAChF,QAAQ,mEAAkB;AAC1B,QAAQ,kDAAqB;AAC7B,kCAAkC,wCAAwC;AAC1E;AACA,8BAA8B,YAAY;AAC1C;AACA,SAAS;AACT;AACA;AACA,8BAA8B,wCAAwC;AACtE;AACA,IAAI,4CAAe;AACnB;AACA,0BAA0B,YAAY;AACtC;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA,SAAS;AACT,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/C6D;AACtD;AACP;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,cAAc,sEAAS;AACvB;AACA,uDAAuD,sEAAS;AAChE;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sEAAS;AACvB;AACA,wEAAwE,sEAAS;AACjF;AACA,cAAc,sEAAS;AACvB;AACA;AACA,mFAAmF,sEAAS;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sEAAS;AACvB;AACA,mFAAmF,sEAAS;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACO;AACP;AACA;AACA;AACA,cAAc,sEAAS;AACvB,wGAAwG,sEAAS;AACjH;AACA;;;;;;;;;;;;;;;AC7FO;AACA;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACJ4C;AACrC;AACP,IAAI,wDAAK,eAAe,2BAA2B;AAC5C;AACA;AACP;AACO;AACA,uBAAuB,wDAAK,eAAe,uCAAuC;AACzF,iBAAiB,wDAAK,eAAe,mDAAmD;AACjF;AACP;;;;;;;;;;;;;;ACVA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChCO;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;AClB8C;AAC6B;AACpE;AACP;AACA,WAAW,2DAAe;AAC1B;AACO;AACP,wBAAwB,2DAAe;AACvC;AACA;AACA,QAAQ,wFAAiC;AACzC,QAAQ,2DAAe;AACvB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpB+C;AACD;AACF;AACrC;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,4DAAe;AAC1B;AACO;AACP;AACA,qBAAqB,qDAAU;AAC/B;AACA,QAAQ,2DAAe;AACvB;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;ACnCA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACN6B;AACkB;AAC/C;AACA;AACA;AACA,YAAY,4DAAe;AAC3B;AACA,oBAAoB,4DAAe;AACnC;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjCgD;AACD;AAC/C;AACO;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA,YAAY,4DAAe,YAAY,4DAAe;AACtD;AACA;AACA;AACA;AACA,mEAAmE,oDAAa;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAQ,GAAG,yCAAyC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;AACtB;;;;;;;;;;;;;;;;AC3EiC;AACM;AAChC;AACP,WAAW,oDAAO;AAClB,mBAAmB,+CAAQ,CAAC,+CAAQ,GAAG;AACvC,KAAK;AACL;AACA;;;;;;;;;;;;;;ACPO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACHwD;AACjD;AACP;AACA;AACO;AACP;AACA;AACO;AACP,cAAc,iEAAyB;AACvC;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;ACpBiD;AAC1C;AACP,kBAAkB,8DAAY;AAC9B;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;ACPiC;AACE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAM;AACpC,mBAAmB,gDAAK,eAAe,OAAO,aAAoB,GAAG;AACrE;AACA;AACA;AACA,SAAS;AACT,eAAe,kDAAM;AACrB;AACA;AACA,iEAAe,QAAQ,EAAC;AACxB;;;;;;;;;;;;;;;;ACnBuD;AACtB;AAC1B;AACP,kBAAkB,2CAAM,kBAAkB,qEAAM,KAAK,qEAAM;AAC3D;AACA;;;;;;;;;;;;;;;ACLmC;AACnC,iEAAgB,gDAAK,eAAe,oBAAoB;AACxD,IAAI,gDAAK,eAAe,gBAAgB;AACxC,IAAI,gDAAK,eAAe,cAAc;AACtC,IAAI,gDAAK,eAAe,gBAAgB,KAAK,gDAAK,eAAe,OAAO,4CAAK,gCAAgC,CAAC,EAAE;AAChH;;;;;;;;;;;;;;;;;;;;;;;;ACLyD;AAC9B;AACZ;AACR;AACP,cAAc,uDAAS,sBAAsB,+CAAG,EAAE,+CAAG,IAAI,uDAAS,sBAAsB,+CAAG;AAC3F;AAC0D;AAC1D,uEAAsB;AACa;AACa;AACX;AACrC;AACA;;;;;;;;;;;;;;ACZO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACNgD;AACR;AACjC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAS,2GAA2G,4DAAS;AACnJ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,IAAI,8CAAK;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO,gDAAgD;AAChD,gDAAgD;AAChD;AACP;AACA;AACA,IAAI,8CAAK;AACT;AACA;AACA;AACA,uBAAuB,0CAAK;AAC5B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAS,0IAA0I,4DAAS;AAClL;AACA,sBAAsB,4DAAS,yHAAyH,4DAAS;AACjK;AACA,sBAAsB,4DAAS;AAC/B,qLAAqL,4DAAS;AAC9L;AACA,0BAA0B,8CAA8C;AACxE,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvEgD;AACgB;AACzD;AACP;AACA;AACA;AACA;AACA,gCAAgC,6DAAc;AAC9C,iHAAiH,6DAAc;AAC/H;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB,4DAAS,mJAAmJ,4DAAS;AACvL;AACA;AACA,gBAAgB,+CAAQ,CAAC,+CAAQ,GAAG,eAAe,aAAa,oDAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,wCAAwC;AACxC;AACA;AACO;AACP,gCAAgC;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAS,wDAAwD,4DAAS;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC/DgE;AACF;AACvD;AACP,cAAc,4DAAS,+LAA+L,4DAAS;AAC/N;AACA,+BAA+B,yCAAyC;AACxE;AACA;AACA,gCAAgC,6DAAc,kGAAkG,6DAAc;AAC9J;AACA;AACA,KAAK;AACL,cAAc,4DAAS,6GAA6G,4DAAS;AAC7I;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA,KAAK;AACL,4BAA4B,sBAAsB;AAClD;AACO;AACP;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,cAAc,4DAAS,mFAAmF,4DAAS;AACnH;AACA;AACO;AACP,cAAc,4DAAS,wLAAwL,4DAAS;AACxN,cAAc,4DAAS,8EAA8E,4DAAS;AAC9G;AACA,cAAc,4DAAS,gFAAgF,4DAAS;AAChH;AACA;AACO;AACP;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAc,+FAA+F,6DAAc;AACnJ;AACO;AACP;AACA;AACA;AACA;AACA;AACA,gBAAgB,2EAA2B;AAC3C;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EqD;AACE;AACG;AACnD;AACP,aAAa;AACb;AACO;AACP;AACA;AACO;AACP,YAAY,mEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAc;AAC1C;AACA,+CAA+C,6DAAc;AAC7D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,QAAQ,mEAAe;AACvB;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,yBAAyB;AAC3E;AACA,yDAAyD,uEAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzNgD;AACA;AACT;AACoG;AACjG;AACU;AACN;AAC9C;AACA,UAAU,yCAAI;AACd;AACA,cAAc,yCAAI;AAClB;AACA,KAAK;AACL;AACA;AACA,0EAA0E,0BAA0B,yCAAI;AACxG,kEAAkE;AAClE;AACA;AACA,mBAAmB,sEAAsB,SAAS,qEAAqB,OAAO,gEAAiB,CAAC,sEAAsB;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kCAAkC;AAClC,qCAAqC,yBAAyB;AAC9D;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,2CAA2C,mDAAmD;AAC9F,gBAAgB,0DAAO;AACvB;AACA,kCAAkC,yCAAI;AACtC;AACA;AACA,kCAAkC,yCAAI;AACtC;AACA;AACA;AACA,mBAAmB,wDAAS;AAC5B;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD,wCAAwC,yCAAI;AAC5C;AACA;AACA;AACA;AACA,oEAAoE,0BAA0B;AAC9F,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,8CAAK;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,2BAA2B,yCAAI;AAC7G,iEAAiE;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yCAAI;AAC7B;AACA;AACA,aAAa;AACb;AACA,8BAA8B,yCAAI;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,8CAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAAQ,CAAC,+CAAQ,GAAG,WAAW,yEAAyE,6DAA6D,GAAG;AACvM;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACO;AACP,WAAW,8CAAK;AAChB;AACA;AACA;AACA,oCAAoC,yCAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAO;AACnC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB,uDAAO;AAC3B;AACA,yDAAyD,mCAAmC;AAC5F;AACA;AACA,uBAAuB,+CAAQ,CAAC,+CAAQ,GAAG,WAAW,YAAY,oDAAa,CAAC,oDAAa,kDAAkD;AAC/I,aAAa;AACb,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,2DAA2D,kCAAkC;AAC7F,2BAA2B,wDAAS;AACpC;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,kEAAkE,6DAAa;AAC/E;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC;AAClC,SAAS,uDAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yCAAI;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA,4BAA4B,8CAAK;AACjC;AACA;AACA,uBAAuB,+CAAQ,CAAC,+CAAQ,GAAG,WAAW;AACtD,6DAA6D,iDAAiD;AAC9G,qBAAqB,QAAQ;AAC7B,aAAa;AACb,SAAS;AACT;AACA;AACA,2EAA2E,0BAA0B;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,yCAAyC,sCAAsC;AAC/E;AACA;AACA;AACA,4BAA4B,8CAAK;AACjC,0BAA0B,cAAc;AACxC,8BAA8B,cAAc;AAC5C,KAAK;AACL;AACO;AACP,qBAAqB,iEAAiB;AACtC;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA,uBAAuB,+CAAQ,CAAC,+CAAQ,GAAG,WAAW,oBAAoB;AAC1E,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP,IAAI,6DAAa;AACjB;AACA;AACA,yCAAyC,2CAA2C;AACpF;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrWkC;AACW;AACW;AACC;AACzD;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA,iCAAiC;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAsB;AAC1C;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA;AACA,oBAAoB,qEAAsB;AAC1C;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAsB;AAC9C;AACA;AACA,oDAAoD,mDAAmD;AACvG;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,2BAA2B,sDAAU;AACrC;AACA;AACA,+CAA+C,+BAA+B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,+BAA+B;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC,CAAC,sDAAU;AACO;AACnB,sEAAqB;AACrB;;;;;;;;;;;;;;;ACxI6C;AACtC;AACP,eAAe,sDAAU;AACzB;AACA;AACA;AACA;AACA;AACA,wDAAwD,6BAA6B;AACrF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6BAA6B;AAC7B,KAAK;AACL;AACA;;;;;;;;;;;;;;AChDO;AACP;AACA,uCAAuC,sDAAsD;AAC7F,iDAAiD,+BAA+B;AAChF;AACA;;;;;;;;;;;;;;;;ACL6C;AACM;AAC5C;AACP;AACA,+CAA+C,OAAO,sDAAU,EAAE;AAClE;AACA,QAAQ,2DAAY;AACpB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACZO;AACP;;;;;;;;;;;;;;;ACD+B;AAC/B;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB,gDAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,+BAA+B,gDAAmB;AACrD;AACA,GAAG,8BAA8B,gDAAmB;AACpD;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,6CAAgB;AACnC,iEAAe,UAAU;;;;;;;;;;;;;;;ACtBM;AAC/B;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB,gDAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,+BAA+B,gDAAmB;AACrD;AACA,GAAG,8BAA8B,gDAAmB;AACpD;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,6CAAgB;AACnC,iEAAe,UAAU;;;;;;;;;;;;;;;ACtBM;AAC/B;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB,gDAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,+BAA+B,gDAAmB;AACrD;AACA,GAAG,8BAA8B,gDAAmB;AACpD;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,6CAAgB;AACnC,iEAAe,UAAU;;;;;;;;;;;;;;;;;;;;ACtBQ;AACjB;AACT,QAAQ,kBAAkB,EAAE,0CAAI;AACvC;AAC+C;AAC/C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpaAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;AClKA,QAAQ,2BAA2B;AACnC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iBAAiB;AACzB,QAAQ,iBAAiB;AAClB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxD8C;AACF;;AAE5C,kCAAkC,yCAAyC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAI;AACvB,oBAAoB,iDAAI;AACxB,mBAAmB,iDAAI;AACvB;AACA;AACA;AACA,aAAa;AACb,qBAAqB,iDAAI;AACzB,uBAAuB,iDAAI;AAC3B;AACA;AACA;AACA,UAAU,2DAAY;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEkC;;;;;;;;;;;;;;;;;ACvC8B;AACR;;AAExD;AACA,6BAA6B,WAAW;AACxC;AACA,qBAAqB,sDAAI;AACzB,oBAAoB,4DAAU;AAC9B;AACA;AACA;AACA;AACA,mBAAmB,0DAAS,gBAAgB,0DAAS;AACrD;AACA;;AAE2B;;;;;;;;;;;;;;;;;;;;;;;AChBgC;AACA;AACJ;AACE;AACI;AACZ;AACiD;AACjB;;AAEjF;AACA,WAAW,4DAAO;AAClB,WAAW;AACX,WAAW,gEAAS;AACpB,eAAe,gEAAS;AACxB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAqC,kEAAe,kJAAkJ;AAC9N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4CAA4C,gEAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAS;AACtC;AACA,gCAAgC,mEAAW;AAC3C;AACA,SAAS;AACT;AACA;AACA,yCAAyC,oCAAoC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0FAAqB;AAC5D;AACA,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,iFAAqB;AACxC,SAAS;AACT;AACA,sBAAsB,iFAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,0FAAqB;AACvC;AACA,mBAAmB,iFAAqB;AACxC,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,iFAAqB;AACjD,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;;;;;;ACzSwC;AACrB;AACW;AACZ;AACwB;AACnB;AACmD;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,mEAAsB;AAC3B,wDAAwD,kCAAkC;AAC1F,mCAAmC,mDAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,UAAU,yCAAyC;AACnD;AACA;AACA;AACA;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,QAAQ,sDAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+EAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,iFAAqB;AACxC,SAAS;AACT;AACA,oCAAoC,iFAAqB;AACzD,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,mBAAmB,iFAAqB;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAU;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA,wCAAwC,2DAAY;AACpD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEsC;;;;;;;;;;;;;;;;;;;AClL8C;;AAEpF;AACA;AACA;AACA,QAAQ,0FAAkB;AAC1B;AACA;AACA,8DAA8D,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0FAAkB;AAC7B;AACA;AACA;AACA;AACA;;AAEsG;;;;;;;;;;;;;;;;AC9B/C;;AAEvD,uDAAuD,qEAAqE,IAAI;AAChI,8BAA8B;AAC9B;AACA;AACA,mBAAmB,oEAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEwB;;;;;;;;;;;;;;;ACtBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoB;;;;;;;;;;;;;;;AChBpB,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;;;ACPgB;AACiB;;AAE7D,mBAAmB,4JAA4J;AAC/K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAM;AACzB;AACA,sBAAsB,0EAAqB;AAC3C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEmB;;;;;;;;;;;;;;;;;;;;;;ACtF+B;AACqB;AACC;AACd;AACM;AACI;;AAEpE;AACA,sCAAsC,uDAAS;AAC/C;AACA,qBAAqB,uEAAuE;AAC5F;AACA;AACA;AACA;AACA,4BAA4B,gFAAa;AACzC,mBAAmB,6EAA0B;AAC7C,UAAU,iFAA0B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6EAAoB;AAC9C;AACA;AACA;AACA;AACA,UAAU,yEAAa;AACvB,8BAA8B,mEAAW;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEoC;;;;;;;;;;;;;;;;;;;;;;;AClDgB;AACH;AACiD;;AAElG;AACA;AACA;AACA;AACA;AACA,sBAAsB,wDAAwD;AAC9E;AACA;AACA,IAAI,0DAAO,aAAa,iFAAqB;AAC7C;AACA;AACA;AACA;AACA,mBAAmB,uDAAK;AACxB,eAAe,uDAAK,2BAA2B,iFAAqB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iFAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyF;;;;;;;;;;;;;;;;;;ACxFd;AACb;AACL;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qDAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,YAAY,wEAAwE;AACpF,wCAAwC,iFAAqB;AAC7D;AACA;AACA,gCAAgC,iFAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0EAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEkB;;;;;;;;;;;;;;;;AChIlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuD;;;;;;;;;;;;;;;;AChBoB;;AAE3E,kCAAkC;AAClC;AACA;AACA,WAAW,iFAAiB;AAC5B;;AAEiC;;;;;;;;;;;;;;;;;;;;;;;;;ACRgB;AACuB;AACa;AACY;AAC/B;AACM;AACd;AACJ;AAC6B;AAC1B;;AAEzD,qEAAqE;AACrE;AACA,gCAAgC,0EAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,4BAA4B,iFAAqB;AACjD,0BAA0B,kEAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sEAAY;AAC/C,mCAAmC,sEAAY;AAC/C,QAAQ,0DAAO,yEAAyE,WAAW,QAAQ,eAAe,QAAQ,eAAe,KAAK,gBAAgB,4DAA4D,gBAAgB,2BAA2B,gBAAgB;AAC7R;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa,2EAAmB;AAChC;AACA;AACA,mBAAmB,oFAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iFAAqB;AACpD;AACA;AACA,kCAAkC,iFAAqB;AACvD;AACA;AACA;AACA,YAAY,0FAAqB;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,8EAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6GAA0B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAY;AAC3B;AACA;;AAE8B;;;;;;;;;;;;;;;;;;ACpG0B;AACJ;AACkB;;AAEtE;AACA,0BAA0B,+EAAa,kBAAkB,6DAAW;AACpE,wBAAwB,qEAAkB;AAC1C;AACA;;AAE8B;;;;;;;;;;;;;;;;;;;;;ACVmB;AACsB;AACQ;AACvB;AACqB;AAClB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA;AACA,oDAAoD,sCAAsC,IAAI;AAC9F,UAAU,8EAA8E;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,sDAAsD,uFAA4B;AAClF;AACA,+FAA+F,sDAAI;AACnG;AACA;AACA,oBAAoB,qEAAkB,8DAA8D,4EAAc;AAClH,gBAAgB;AAChB;AACA;AACA,YAAY,sFAAuB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAS;AACtC,SAAS;AACT;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;;;;ACjEwD;AACrB;;AAE5D,4DAA4D;AAC5D,qBAAqB,0FAAc;AACnC,UAAU,0DAA0D;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yEAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAwD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;;AAE2C;;;;;;;;;;;;;;;;;;AC9DsC;AACrB;AACE;;AAE9D,qEAAqE;AACrE;AACA;AACA;AACA,uDAAuD,2EAAc;AACrE;AACA;AACA;AACA,oBAAoB,2EAAc;AAClC;AACA;AACA;AACA,cAAc,0FAAc;AAC5B;AACA,gCAAgC,yEAAa;AAC7C;AACA;AACA;;AAEgC;;;;;;;;;;;;;;;;;ACvBuC;;AAEvE;AACA,+CAA+C,gFAAW;;AAEK;;;;;;;;;;;;;;;;ACLQ;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA,aAAa,4EAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEgC;;;;;;;;;;;;;;;;ACvC8B;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAO;AACf;AACA;AACA;AACA;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;AC7BxB;AACA;AACA;;AAE+B;;;;;;;;;;;;;;;ACJ/B;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;;;;;ACJwD;AAClC;AACK;AACA;;AAExD;AACA,+BAA+B,gEAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8FAAiB;AAClC;AACA,aAAa,wDAAM;AACnB,iBAAiB,6DAAW;AAC5B;AACA;AACA,QAAQ,wDAAM;AACd;AACA,iBAAiB,6DAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAqB;AACpC;AACA;AACA;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;;;AClC6D;;AAErF;AACA;AACA;AACA;AACA;AACA,+BAA+B,sIAAsI;AACrK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8FAAiB;AAC3B;AACA;AACA;AACA;;AAEwE;;;;;;;;;;;;;;;ACzBxE;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEiC;;;;;;;;;;;;;;;;ACZF;AAC2B;;AAE1D;AACA;AACA;AACA;AACA,8BAA8B,4CAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC,eAAe,4CAAK;AACpB,gBAAgB,6CAAM;AACtB,iBAAiB,6CAAM;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yDAAkB;AACtB,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA,qBAAqB,MAAM;AAC3B,sBAAsB,OAAO;AAC7B,mBAAmB,IAAI;AACvB,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,gDAAmB,oBAAoB,oDAAoD,EAAE,+CAAkB,aAAa,KAAK;AAC7I;;AAEoB;;;;;;;;;;;;;;;;;;;ACtEW;AACQ;AAC6B;AACT;AACjB;;AAE1C,yBAAyB,oFAAoF;AAC7G,6BAA6B,oEAAW;AACxC,eAAe,4CAAK;AACpB,oBAAoB,8CAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8CAAO;AACX;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,4CAAe;AACnB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,gDAAmB,CAAC,mDAAQ,IAAI,sBAAsB;AACzE;AACA,YAAY,gDAAmB,CAAC,yEAAe,aAAa,gBAAgB;AAC5E;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;;;;;;;;;ACvDM;AACoD;AACjB;AACJ;AACV;AACsB;AACQ;AACZ;AACnB;;AAEnD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,2CAAQ;AACZ,YAAY,qDAAc;AAC1B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0BAA0B;AACtC;AACA,2BAA2B,OAAO;AAClC;AACA,QAAQ;AACR;AACA,gBAAgB;AAChB,sBAAsB;AACtB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iHAAiH;AAC5I,IAAI,4DAAS;AACb;AACA;AACA,wBAAwB,2EAAc;AACtC,mCAAmC,iDAAU,CAAC,+EAAkB;AAChE;AACA;AACA,sBAAsB,uEAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6CAAM;AAClC;AACA,wBAAwB,6CAAM;AAC9B;AACA;AACA,4BAA4B,6CAAM;AAClC,IAAI,2FAAyB;AAC7B;AACA;AACA;AACA,KAAK;AACL,IAAI,+EAAgB;AACpB;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,gDAAmB,CAAC,2CAAc,yCAAyC,gDAAmB,CAAC,6DAAa,IAAI,0IAA0I;AAC1Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gDAAmB,CAAC,6DAAa,IAAI,6IAA6I;AACrO,KAAK;AACL;AACA;AACA;AACA;AACA,6CAA6C,gDAAmB,CAAC,6DAAa,IAAI,oGAAoG;AACtL,KAAK;AACL,QAAQ,KAAqC;AAC7C;AACA;AACA;AACA;AACA,YAAY,gDAAmB,CAAC,2CAAc;AAC9C;AACA,0CAA0C,mDAAY;AACtD;;AAE2B;;;;;;;;;;;;;;;;;;;AC3J0B;AACe;;AAEpE;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iDAAU,CAAC,yEAAe;AAC9C;AACA;AACA,YAAY,sCAAsC;AAClD;AACA;AACA,eAAe,4CAAK;AACpB,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iDAAU,CAAC,yEAAe;AAC/C;AACA;AACA;AACA;;AAEgD;;;;;;;;;;;;;;;;;;;ACjEjB;AACa;AACgC;AACM;AACvB;;AAE3D;AACA;AACA;AACA;AACA,YAAY,uBAAuB;AACnC;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D,mBAAmB,2FAAuB;AAC1C;AACA;AACA;AACA,eAAe,GAAG,iDAAU,CAAC,iFAAmB;AAChD;AACA;AACA;AACA;AACA,sBAAsB,oEAAW;AACjC;AACA;AACA;AACA;AACA,oBAAoB,8CAAO;AAC3B,YAAY,gDAAmB,CAAC,iFAAmB,aAAa,gBAAgB;AAChF;;AAEwB;;;;;;;;;;;;;;;;AC1Cc;;AAEtC,2BAA2B,oDAAa,GAAG;;AAEb;;;;;;;;;;;;;;;;ACJQ;;AAEtC,oBAAoB,oDAAa,GAAG,eAAe;;AAE5B;;;;;;;;;;;;;;;;ACJe;;AAEtC;AACA;AACA;AACA,4BAA4B,oDAAa;AACzC;AACA;AACA;AACA,CAAC;;AAE8B;;;;;;;;;;;;;;;;;;ACXa;AACA;AACS;;AAErD;AACA,YAAY,mBAAmB,EAAE,kEAAsB,QAAQ,iDAAU,CAAC,qDAAa;AACvF,WAAW,8CAAO,UAAU,kBAAkB;AAC9C;AACA;AACA;AACA;;AAEkC;;;;;;;;;;;;;;;;ACZI;;AAEtC,sBAAsB,oDAAa,GAAG;;AAEb;;;;;;;;;;;;;;;;;ACJgD;AACc;;AAEvF;AACA,QAAQ,gGAAqB;AAC7B,gBAAgB,mBAAmB;AACnC;AACA,0CAA0C,kFAAc;AACxD;AACA;AACA,qBAAqB,kFAAc;AACnC;AACA;AACA;AACA;;AAEkC;;;;;;;;;;;;;;;;AChBI;;AAEtC;AACA;AACA;AACA,wBAAwB,oDAAa;;AAEV;;;;;;;;;;;;;;;;ACPW;;AAEtC;AACA;AACA;AACA,iCAAiC,oDAAa,GAAG;;AAEb;;;;;;;;;;;;;;;ACPpC;AACA;AACA;AACA;AACA;;AAEkB;;;;;;;;;;;;;;;;ACNkB;;AAEpC,+CAA+C,iDAAM;;AAE/B;;;;;;;;;;;;;;;;;;;;ACJ2B;AACK;AACE;;AAExD,gBAAgB,8DAAW;AAC3B,eAAe,qEAAa;AAC5B,kBAAkB,mEAAY;;AAEQ;;;;;;;;;;;;;;;;;;;ACRgB;AACE;;AAExD;AACA,gBAAgB,qEAAa;AAC7B,kBAAkB,mEAAY;;AAEQ;;;;;;;;;;;;;;;;ACPG;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAI;AACnB;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;AClD0B;;AAEjD,eAAe,8DAAW;AAC1B,gBAAgB,8DAAW;AAC3B,kBAAkB,8DAAW;;AAES;;;;;;;;;;;;;;;ACNtC;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;ACJxB;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;ACJzB;;AAE8B;;;;;;;;;;;;;;;ACF9B;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;;;;;;;;ACJ0B;AACD;AACN;AACa;AACA;AACA;AACV;;AAE/C;AACA,YAAY,iDAAI;AAChB,UAAU;AACV,aAAa;AACb,WAAW;AACX,UAAU;AACV,aAAa;AACb,WAAW;AACX,UAAU;AACV,aAAa;AACb,WAAW;AACX,cAAc;AACd;AACA;AACA;AACA;AACA,QAAQ,4DAAS;AACjB;AACA,eAAe,8DAAW;AAC1B;AACA;AACA;AACA,QAAQ,4DAAS,iEAAiE,WAAW;AAC7F;AACA;AACA;AACA;;AAEsC;;;;;;;;;;;;;;;ACpCtC,6DAA6D,eAAe;AAC5E;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;ACL2B;AACA;;AAElD;AACA,WAAW,+DAAW,oBAAoB,+DAAc;AACxD;;AAE2B;;;;;;;;;;;;;;;;;ACPuC;;AAElE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB,+EAAgB;AACtC;;AAE4C;;;;;;;;;;;;;;;ACd5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;ACjB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;ACvF5B;AACA;AACA;AACA;AACA;;AAEqB;;;;;;;;;;;;;;;;;;;ACNuC;AACrB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAgB;AAC/B;AACA,CAAC,IAAI;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI;AACL;AACA;AACA;AACA,CAAC,IAAI;AACL;AACA,wCAAwC,gDAAS;AACjD;AACA,CAAC,IAAI;AACL,sDAAsD,gDAAS;AAC/D;AACA;AACA,IAAI,gDAAS;AACb;AACA,wCAAwC,gDAAS;AACjD,IAAI,gDAAS;AACb,IAAI,gDAAS;AACb;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gDAAS;AAClB;AACA;;AAEuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDY;AACA;AACF;AACW;AACS;AAC+G;AACnH;AACD;AACI;AACL;AAC6C;AAC/C;AACS;AAC5B;AACoB;AACmB;AAChC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0EAAS;AAChC;AACA;AACA,yBAAyB,uBAAuB,IAAI;AACpD;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wEAAgB;AAClD;AACA;AACA;AACA;AACA,oBAAoB,qCAAqC;AACzD;AACA;AACA;AACA,sCAAsC,8DAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAQ;AACpB;AACA;AACA;AACA;AACA,oBAAoB,mEAAO;AAC3B,4BAA4B,aAAa;AACzC;AACA;AACA;AACA,2CAA2C,+EAAU;AACrD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,sDAAI;AACpB;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA,oBAAoB,+DAA+D;AACnF;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAU;AACxC;AACA;AACA;AACA;AACA,SAAS,IAAI,gEAAgE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA,gBAAgB,YAAY;AAC5B;AACA,YAAY,sDAAI;AAChB;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wEAAgB;AACnC;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C,gBAAgB,SAAS;AACzB;AACA,+BAA+B,qEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+EAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,uBAAuB,0EAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAQ;AACpB;AACA,6CAA6C,6EAAqB;AAClE;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,yDAAyD;AACzE,6BAA6B,qEAAW;AACxC;AACA;AACA,QAAQ,6DAAS;AACjB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA,+BAA+B,8EAAc;AAC7C,kCAAkC,+EAAuB;AACzD;AACA;AACA;AACA;AACA;AACA,6DAA6D,6FAAuB;AACpF;AACA;AACA,sCAAsC,6FAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA,gBAAgB,0FAA0F;AAC1G;AACA,mCAAmC,yEAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA+B,2FAAkB;AACjD;AACA;AACA,QAAQ,yEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yEAAQ;AAChB,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA,wBAAwB,WAAW;AACnC,4CAA4C,oDAAG;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC,gBAAgB,aAAa;AAC7B,aAAa,qEAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,QAAQ,yEAAQ;AAChB;AACA;AACA;AACA,oCAAoC,kEAAU,GAAG,0BAA0B;AAC3E;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B,0BAA0B,oDAAG;AAC7B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+EAAe;AACnD,oBAAoB,4BAA4B;AAChD;AACA,SAAS;AACT;AACA,oBAAoB,kBAAkB;AACtC,gBAAgB,qEAAW;AAC3B;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uEAAW;AAC9C;AACA;AACA;AACA;AACA,sFAAsF,yBAAyB;AAC/G;AACA,gBAAgB,yEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yGAAyG,kEAAc,yBAAyB;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE0D;;;;;;;;;;;;;;;;;;ACxcE;AAChB;AACgC;;AAE5E,0BAA0B,iEAAO;AACjC;AACA;AACA,mCAAmC,iDAAI;AACvC,+BAA+B,iDAAI;AACnC,4BAA4B,qFAAyB;AACrD;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA,+DAA+D,iDAAI;AACnE;AACA;AACA;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BgC;AACkB;AACxB;AACJ;;AAE7C;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA,0BAA0B,mDAAG;AAC7B;AACA;AACA;AACA,0BAA0B,mDAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,0BAA0B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+EAAU;AACnC,yBAAyB,+EAAU;AACnC;AACA,iBAAiB,6DAAQ;AACzB;AACA;AACA,iBAAiB,6DAAQ;AACzB;AACA,WAAW,uDAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwP;;;;;;;;;;;;;;;;;AC5HxP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmD;;;;;;;;;;;;;;;;;;ACpDO;AACD;AAChB;;AAEzC,2BAA2B,iEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAI,CAAC,sEAAW,oDAAoD,sEAAW;AACtG;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;;;;ACxC0C;AACzB;AACY;AACI;AACX;;AAE9C;AACA;AACA;AACA;AACA,sCAAsC,kEAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAI;AAChB;AACA;AACA,WAAW,8EAAe;AAC1B;AACA,KAAK;AACL;AACA,2BAA2B,iEAAO;AAClC;AACA,uBAAuB,qDAAI;AAC3B;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;;;;;;;AC/BuC;AACF;AACkC;AAC1B;AACzB;AACU;AACD;AACwB;;AAE7E;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB,IAAI;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+DAAU,gBAAgB,YAAY;AAClF;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,YAAY,EAAE,0DAAS;AAC3C,gCAAgC,qBAAqB;AACrD,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAI;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sFAAgB;AAC7B;AACA;AACA;AACA,qBAAqB,wEAAgB;AACrC;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,YAAY,EAAE,0DAAS;AACvC,0BAA0B,qBAAqB;AAC/C,gBAAgB,iBAAiB;AACjC;AACA;AACA,+BAA+B,qDAAI,CAAC,8EAAe,iDAAiD,8EAAe,6CAA6C,8EAAe;AAC/K;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAU;AAClB;AACA;AACA;AACA,kCAAkC,wCAAwC;AAC1E;AACA;AACA,aAAa;AACb;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iFAAqB;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB,iFAAqB;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;;;;;;ACpJwB;AACuB;AACT;AAChB;AACK;;AAEjD;AACA;AACA,QAAQ,sDAAI;AACZ;AACA;AACA,yBAAyB,iEAAO;AAChC;AACA;AACA,yCAAyC,iDAAI;AAC7C;AACA;AACA,2BAA2B,uDAAU,+CAA+C,uDAAuD;AAC3I;AACA;AACA,gBAAgB,iDAAiD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sDAAI;AACxB;AACA,aAAa;AACb;AACA;AACA;AACA,yCAAyC,8EAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;;;;;;;;;;AC7CsC;AACF;AACQ;AACT;AAChB;AACY;AACQ;AACpB;AACK;;AAE9C;AACA;AACA;AACA;AACA,mCAAmC,wEAAgB;AACnD;AACA,2BAA2B,iEAAO;AAClC;AACA;AACA,oCAAoC,iDAAI;AACxC,kCAAkC,iDAAI;AACtC,yCAAyC,iDAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C,gBAAgB,sDAAI;AACpB;AACA;AACA;AACA;AACA,qBAAqB,0EAAa;AAClC;AACA;AACA,iBAAiB;AACjB;AACA,4CAA4C,8EAAe,yCAAyC,iDAAiD;AACrJ,gDAAgD,8EAAe,oGAAoG,2DAA2D;AAC9N,sCAAsC,qDAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA,4BAA4B,sDAAI;AAChC;AACA,qBAAqB;AACrB;AACA;AACA,0CAA0C,sEAAW;AACrD;AACA;AACA,iBAAiB;AACjB;AACA,0CAA0C,sEAAW;AACrD;AACA;AACA;AACA;AACA;AACA,uCAAuC,sEAAW;AAClD,6CAA6C,qDAAI;AACjD;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAY;AAC5B;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA,YAAY,sDAAI;AAChB;AACA;AACA;AACA;AACA,sCAAsC,8EAAe,6DAA6D,yDAAyD;AAC3K,oCAAoC,sEAAW;AAC/C,oCAAoC,qDAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;ACvHxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;ACnBzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmB;;;;;;;;;;;;;;;;ACRsB;;AAEzC;AACA,mCAAmC,iDAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oCAAoC;AACpD,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA,uFAAuF,qFAAqF;AAC5K;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEgC;;;;;;;;;;;;;;;;;;AC9ByD;AACR;AACxC;;AAEzC,+BAA+B,iDAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uFAAoB;AAC1E;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA,YAAY,+FAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;;;ACrC6B;AACG;;AAE5D;AACA;AACA,iBAAiB,kEAAgB;AACjC,KAAK;AACL;AACA,iBAAiB,qEAAoB;AACrC,KAAK;AACL;;AAEsB;;;;;;;;;;;;;;;ACZtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;;;;;AC3B8B;AACF;AACC;AACuB;;AAElF;AACA;AACA,iBAAiB,+DAAU;AAC3B,KAAK;AACL;AACA,iBAAiB,iEAAW;AAC5B,wBAAwB,uFAAkB;AAC1C,qBAAqB;AACrB,KAAK;AACL;;AAEgB;;;;;;;;;;;;;;;;;;;AChBwC;AACA;AACA;AACH;;AAErD;AACA;AACA,iBAAiB,8DAAa;AAC9B,KAAK;AACL;AACA,iBAAiB,6DAAY;AAC7B,KAAK;AACL;AACA,iBAAiB,6DAAY;AAC7B,KAAK;AACL;AACA,iBAAiB,6DAAY;AAC7B,KAAK;AACL;;AAE6B;;;;;;;;;;;;;;;;;ACpBqD;AACvB;;AAE3D;AACA;AACA,wBAAwB,uFAAkB;AAC1C,qBAAqB;AACrB,KAAK;AACL;;AAEkB;;;;;;;;;;;;;;;;;;;;;;;;ACVkC;AACD;AACgC;AACN;AACY;AACd;AACc;AACN;AACC;;AAEpF,uCAAuC,4CAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAA0D;AAC1E,gBAAgB,aAAa;AAC7B,QAAQ,0FAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,6EAAqB;AAC7B;AACA;AACA,gBAAgB,mDAAmD;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAI;AACpB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAiE;AACjF,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yFAAW;AACjD,wBAAwB,iDAAU,CAAC,+EAAkB;AACrD,YAAY,gDAA4B,6BAA6B,uDAAuD,iDAAU,CAAC,2FAAwB,qDAAqD;AACpN;AACA;AACA;AACA,WAAW,2FAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB,2FAAmB;AAC5C,0BAA0B,2FAAmB;AAC7C,4BAA4B,2FAAmB;AAC/C,6BAA6B,2FAAmB;AAChD,eAAe,qFAAgB;AAC/B;;AAEyB;;;;;;;;;;;;;;;;AChI8B;;AAEvD;AACA;AACA,QAAQ,gEAAkB;AAC1B,eAAe,gEAAkB;AACjC;AACA;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;ACXiB;AACa;;AAEtD;AACA;AACA;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC,gBAAgB,kDAAkD;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA,eAAe,mEAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe,IAAI,8BAA8B,IAAI;AACzF;AACA;;AAEyB;;;;;;;;;;;;;;;ACvEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,kBAAkB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACgB;AAC0B;AACN;AACD;AACR;AACmB;AACjB;AACR;AACQ;AACW;AACd;AAC0B;AACxB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+EAA+E;AAChH,yBAAyB,yEAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAU,CAAC,iFAAmB;AAC7C;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,wBAAwB,yFAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wEAAe;AACnE;AACA,yBAAyB,4DAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+EAAgB;AACpD;AACA;AACA;AACA;AACA,6CAA6C,iDAAU,CAAC,2FAAwB;AAChF,6BAA6B,iDAAU,CAAC,iEAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,CAAC,2EAAa,aAAa,gBAAgB;AAC9E,sDAAsD,gDAAmB,kBAAkB,yDAAyD;AACpJ,sDAAsD,wEAAY;AAClE;AACA,gCAAgC,iDAAU;AAC1C,wBAAwB,qEAAqB;AAC7C;AACA;AACA,uBAAuB,UAAU;AACjC,0BAA0B,iDAAU,CAAC,gFAAkB;AACvD;AACA;AACA;AACA;;AAEiC;;;;;;;;;;;;;;;;;AC3F8C;AACR;;AAEvE,oCAAoC,kBAAkB;AACtD,YAAY,4EAAc;AAC1B;AACA;AACA,eAAe,oFAAe;AAC9B;;AAE+B;;;;;;;;;;;;;;;ACV/B;;AAEiC;;;;;;;;;;;;;;;;;ACFG;AACwB;;AAE5D;AACA;AACA;AACA;AACA;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAW;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;;;;;AChCkD;AACN;AACE;AACY;AACtB;AACgB;;AAE5E;AACA,YAAY,wBAAwB,EAAE,iDAAU,CAAC,2EAAa;AAC9D,wBAAwB,iDAAU,CAAC,iEAAW;AAC9C,4BAA4B,iDAAU,CAAC,yEAAe;AACtD,gCAAgC,iDAAU,CAAC,iFAAmB;AAC9D,6BAA6B,6CAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,yDAAkB;AACtB;AACA,KAAK;AACL,IAAI,2FAAyB;AAC7B;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,uFAAyB;AACnC,UAAU,4CAAS;AACnB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAE4B;;;;;;;;;;;;;;;;;;;;;;;AC5DO;AACmD;AAClB;AACc;AACvB;AACqB;AACV;AACgC;;AAEtG,qBAAqB,0DAA0D;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iDAAU,CAAC,2EAAa;AAC5C,4BAA4B,iDAAU,CAAC,yEAAe;AACtD;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA,qDAAqD;AACrD;AACA,sBAAsB,yFAAkB;AACxC;AACA,UAAU,mBAAmB;AAC7B,oCAAoC,gGAAqB;AACzD,4BAA4B,wFAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+FAAmB;AAC5B;AACA;AACA,6BAA6B,2FAAuB;AACpD;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;AChF9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;;;;;;AC1DmB;AACI;AACV;AACE;AACsB;;AAElE;AACA;AACA;AACA,qDAAqD,8DAAE;AACvD;AACA;AACA,yBAAyB,mDAAG;AAC5B;AACA;AACA,6BAA6B,mDAAG;AAChC;AACA;AACA,yBAAyB,mDAAG;AAC5B;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mDAAG;AAC9C,gBAAgB,mEAAO,qBAAqB,mEAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mDAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qDAAO;AAChD,6CAA6C,iDAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6DAAQ;AAC9B;AACA;;AAEqB;;;;;;;;;;;;;;;;;AC5FrB;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA,aAAa,uBAAuB;AACpC,aAAa,uBAAuB;AACpC;AACA;AACA,mCAAmC,MAAM;AACzC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE,yCAAyC,iCAAiC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgF;;;;;;;;;;;;;;;;AChChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqC;;;;;;;;;;;;;;;;;;;;;;;;ACnBK;AACgB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mDAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmI;;;;;;;;;;;;;;;;;;;;;;;ACzHzF;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mDAAG;AAC3B;AACA;AACA;AACA;AACA,QAAQ,mDAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8I;;;;;;;;;;;;;;;;;;;;;ACxCpG;AACoB;AACf;;AAE/C;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAU;AACtB;AACA,gBAAgB,4DAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAO;AACf;AACA,iCAAiC,mDAAG;AACpC;AACA;AACA;AACA;AACA,sBAAsB,mDAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwF;;;;;;;;;;;;;;;;;;ACrDxF;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA,CAAC;;AAE8D;;;;;;;;;;;;;;;;;;AChBjB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2DAAU,UAAU,2DAAU;AACzC;;AAE+C;;;;;;;;;;;;;;;;;AClBqB;AACP;;AAE7D,+BAA+B,iFAAoB;AACnD,2CAA2C,sEAAW;AACtD;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAEiC;;;;;;;;;;;;;;;;;;ACZkC;AACE;;AAEtE;AACA;AACA;AACA,2BAA2B,iFAAoB;AAC/C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qCAAqC,+EAAsB,MAAM;AACjE;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAEiD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BsB;AACG;AACnB;AACL;AACuD;AACW;AAClD;AACH;AACW;AACC;AAC5B;AACiB;AACE;AACjB;AACkC;AACxB;AACoB;AAC5B;AACN;AACJ;AACM;AACyB;AACQ;AAC5B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wFAAwF;AACxH;AACA,gDAAgD;AAChgBAAgB,yDAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,iCAAiC,iEAAQ;AACzC;AACA;AACA;AACA,iDAAiD,gFAAmB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kFAAY;AACrC;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uDAAK;AACvC,wBAAwB,6DAAqB;AAC7C,wBAAwB,6DAAqB;AAC7C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uEAAuE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAqD;AACjF;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oFAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAS;AACrB,YAAY,2DAAS;AACrB,YAAY,2DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAS;AAC5C;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gEAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA,uBAAuB,+DAAS;AAChC;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA,gBAAgB,yEAAa;AAC7B,gBAAgB,yEAAa;AAC7B;AACA;AACA;AACA;AACA,qCAAqC,+DAAS;AAC9C,YAAY,gEAAW;AACvB;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAW;AACnC,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA,4BAA4B,yEAAa;AACzC,4BAA4B,yEAAa;AACzC;AACA;AACA,oBAAoB,yEAAa;AACjC,oBAAoB,yEAAa;AACjC;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAS;AAC5C,YAAY,gEAAW;AACvB,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAY;AAChC;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB,uEAAY;AACjC;AACA,gBAAgB,wEAAY;AAC5B;AACA,gBAAgB,uEAAY;AAC5B,gBAAgB,wEAAY;AAC5B;AACA;AACA;AACA;AACA,wCAAwC,+DAAS;AACjD,YAAY,gEAAW;AACvB,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,qBAAqB,uEAAY;AACjC;AACA,gBAAgB,mEAAQ;AACxB,kCAAkC,+DAAS;AAC3C;AACA,gBAAgB,gEAAW;AAC3B,gBAAgB,gFAAmB;AACnC;AACA,gBAAgB,uEAAY;AAC5B,gBAAgB,gFAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,4CAA4C,2DAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+DAAS;AACnD,gDAAgD,+DAAS;AACzD,oBAAoB,+EAAoB;AACxC,oBAAoB,gEAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+DAAS;AACvC,4CAA4C,+DAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0EAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gEAAW;AAC/B;AACA,gBAAgB,yEAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+DAAS;AACnD,gDAAgD,+DAAS;AACzD,oBAAoB,+EAAoB;AACxC,oBAAoB,gEAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAQ;AACxB,gBAAgB,yEAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2DAAS;AAC3D;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAW;AACvB;AACA;AACA;AACA;AACA,YAAY,2EAAe;AAC3B,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,uCAAuC,iEAAW;AAClD,oDAAoD,iEAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAY;AACxB,uCAAuC,gFAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,gCAAgC,iEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+EAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAAS;AACjC;AACA;AACA;AACA,6CAA6C,+DAAS;AACtD,oBAAoB,gEAAW;AAC/B;AACA;AACA;AACA,oBAAoB,qEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sDAAI;AACxC,gBAAgB,6DAAqB;AACrC,wCAAwC,2FAAkB;AAC1D;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qDAAqD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+DAAS;AACjD,gCAAgC,qEAAU;AAC1C;AACA;AACA,gCAAgC,qEAAU;AAC1C;AACA;AACA;AACA,YAAY,gEAAW;AACvB;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAY;AACxB;AACA;AACA;AACA,mDAAmD,yDAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA,kBAAkB,iDAAiD,IAAI;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0FAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0FAAkB;AAC1C;AACA,0CAA0C,uEAAY;AACtD;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gFAAwB;AACvD;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,wCAAwC,eAAe,IAAI,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0EAAe;AAC7C;AACA;AACA,wBAAwB,mBAAmB,EAAE,0EAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0FAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ,qFAAqF;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAiD;AACjE,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA,YAAY,+DAAQ;AACpB;AACA;AACA;AACA,+BAA+B,qEAAU;AACzC;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,+DAAQ;AACpB;AACA;AACA;AACA,+BAA+B,qEAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,4BAA4B,iEAAW;AACvC,QAAQ,uEAAY;AACpB,4BAA4B,iEAAW;AACvC;AACA,YAAY,uEAAY;AACxB;AACA;AACA,YAAY,uEAAY;AACxB;AACA,kCAAkC,gEAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAiD;AACzE;AACA,6CAA6C,+DAAS;AACtD,oBAAoB,+EAAoB;AACxC,2CAA2C,+DAAS;AACpD,oBAAoB,+EAAoB;AACxC,yBAAyB,8DAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,oEAAoE,cAAc;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oDAAG;AAC1B,mBAAmB,oDAAG;AACtB;AACA;AACA;AACA;AACA,iBAAiB,oDAAG;AACpB,iBAAiB,oDAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,UAAU;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iEAAM,CAAC,gEAAW,YAAY,gEAAW;AACtD;;AAEqG;;;;;;;;;;;;;;;;;AC37C1C;AACP;;AAEpD;AACA;AACA,WAAW,oEAAW;AACtB,YAAY,6DAAqB;AACjC;AACA;AACA,KAAK;AACL;;AAE2B;;;;;;;;;;;;;;;ACZ3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiC;;;;;;;;;;;;;;;;AClBiC;;AAElE;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAa;AACrB;AACA;AACA;AACA,QAAQ,4DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqB;;;;;;;;;;;;;;;;;AC/GoC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,EAAE,IAAI,EAAE;AAC1B,KAAK;AACL;;AAEgD;;;;;;;;;;;;;;;;;;ACxCuC;AAC7C;AACoB;;AAE9D;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4FAAgB;AACpD;AACA;AACA,aAAa;AACb;AACA,uBAAuB,mEAAO;AAC9B;AACA;AACA;AACA,yBAAyB,mEAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;;AAE4B;;;;;;;;;;;;;;;;ACxD5B;AACA;AACA;AACA;;AAE8C;;;;;;;;;;;;;;;ACL9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW,MAAM,WAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB,IAAI,gBAAgB;AAClE;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA,mCAAmC,OAAO;AAC1C;AACA,oCAAoC,QAAQ;AAC5C;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc,IAAI,cAAc;AAC9D;AACA;AACA;;AAEoC;;;;;;;;;;;;;;;ACzCpC;AACA;AACA;;AAEoB;;;;;;;;;;;;;;;;;ACJpB;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEkD;;;;;;;;;;;;;;;;;;ACvBuC;AAC7B;;AAE5D;AACA,WAAW,iFAAuB,CAAC,4EAAkB;AACrD;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA,QAAQ,wEAAa;AACrB,QAAQ,wEAAa;AACrB;AACA;AACA;;AAE8C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBY;AACD;AACK;AACL;AACoB;AACsB;AAC3B;AACvB;AACyB;AACP;AACP;AAC+B;AAC7B;AACU;AACD;AACrB;AACsB;AACf;AACR;;AAEjD,iCAAiC,gFAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAY;AACpC;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAmE,cAAc;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sDAAI;AACxC,gBAAgB,4BAA4B;AAC5C;AACA,4BAA4B;AAC5B,+CAA+C,kBAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yFAAqB;AAC1D,6BAA6B,iFAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qCAAqC,4CAA4C;AACjG;AACA;AACA,mDAAmD,+EAAa;AAChE;AACA,oBAAoB,sFAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qFAAwB;AACrC,YAAY,yFAAwB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iFAAoB;AAC1C,YAAY,IAAqC;AACjD,YAAY,8DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAkB;AAC1B;AACA,QAAQ,4DAAU;AAClB,QAAQ,4DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sEAAc;AAC/C;AACA;AACA;AACA,gBAAgB,sDAAI;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAqC;AACjD;AACA;AACA;AACA;AACA,kBAAkB,2DAAO;AACzB,kBAAkB,6DAAS;AAC3B;AACA,wBAAwB,iBAAiB;AACzC;AACA,oBAAoB,iGAAiG,EAAE,gFAAkB;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAqE;AACzF;AACA;AACA;AACA;AACA,wCAAwC,sEAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sFAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C,yBAAyB,kEAAY;AACrC;AACA,gBAAgB,4EAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAAW,iBAAiB,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA,oBAAoB,qFAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+EAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iFAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;;;;ACzfiD;AACV;AACX;;AAErD,+BAA+B,6DAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA,uCAAuC,sCAAsC,IAAI,iBAAiB;AAClG,qBAAqB,6DAAS,yBAAyB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAuB;AACnC,2BAA2B,6EAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;;;;AC/CsC;AACH;AACD;;AAE9D;AACA,WAAW,2EAAc;AACzB,cAAc,uEAAgB,YAAY,mCAAmC;AAC7E,cAAc,0EAAiB,YAAY,kCAAkC;AAC7E;;AAEkC;;;;;;;;;;;;;;;;ACV6B;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,eAAe,wEAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAE6B;;;;;;;;;;;;;;;;;;;;;;;;AC9CkC;AACR;AACW;AACK;AACL;AACZ;AACe;AACX;;AAE1D;AACA,OAAO,uEAAU;AACjB,OAAO,4EAAiB;AACxB,OAAO,2DAAI;AACX,OAAO,+DAAM;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAiB,wBAAwB,+EAAqB,uCAAuC,8EAAsB;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wEAAqB,CAAC,+EAAqB,QAAQ,2BAA2B,qBAAqB,8EAAsB;AACpI;;AAE4C;;;;;;;;;;;;;;;;;;;;;ACzCG;AACM;AACE;AACO;AACX;AACmB;;AAEtE;AACA,8DAA8D,cAAc;AAC5E,+BAA+B,2EAAc;AAC7C,cAAc,2DAAW;AACzB,cAAc,6DAAY;AAC1B;AACA,8BAA8B,oEAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,iCAAiC,8CAAO,QAAQ,+EAAa;AAC7D;AACA;AACA;AACA,eAAe,oDAAa;AAC5B;AACA;AACA,SAAS;AACT;AACA;AACA;;AAE2B;;;;;;;;;;;;;;;ACrC3B;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;;ACLiC;AACJ;AACU;AACE;;AAEhE,4CAA4C,4BAA4B;AACxE,uBAAuB,qEAAc;AACrC,UAAU,mEAAe;AACzB,UAAU,qEAAgB;AAC1B;AACA;AACA;AACA,mBAAmB,gEAAe;AAClC;AACA;AACA;AACA;;AAEiC;;;;;;;;;;;;;;;;;;;AClBqB;AACK;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAAS,6EAA6E,QAAQ;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wEAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,aAAa,wEAAkB;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,wEAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEmE;;;;;;;;;;;;;;;;;ACtFM;;AAEzE,8BAA8B,+EAAiB;AAC/C;AACA;AACA;AACA;AACA,qDAAqD,+EAAiB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+EAAiB;AAC7D,wBAAwB,+EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgD;;;;;;;;;;;;;;;;ACxDhD;AACA;AACA;;AAEiD;;;;;;;;;;;;;;;;ACJuB;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6EAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE0B;;;;;;;;;;;;;;;AC7B1B;AACA;AACA;;AAEwB;;;;;;;;;;;;;;;;;ACJ6C;AACd;;AAEvD;AACA;AACA;AACA;AACA;AACA,qBAAqB,kFAAmB;AACxC;AACA;AACA,WAAW,oEAAc;AACzB;;AAE2B;;;;;;;;;;;;;;;;;;;;;;;ACd0D;AAC/B;AACc;AACG;AACb;AACM;AACJ;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kEAAM,UAAU,8DAAE;AACrD;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yEAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,GAAG,IAAI,uCAAuC;AAC5D,eAAe,GAAG,IAAI,uCAAuC;AAC7D,mBAAmB,KAAK;AACxB,oBAAoB,MAAM;AAC1B,eAAe,GAAG,IAAI,KAAK;AAC3B,cAAc,GAAG,IAAI,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4EAA4E,oBAAoB;AAChG,eAAe;AACf,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mFAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2FAAiB;AAC7B;AACA;AACA;AACA,uBAAuB,mFAAsB;AAC7C,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mFAAsB;AACnD,oBAAoB,4DAAS;AAC7B;AACA;AACA;AACA,oBAAoB,4DAAS,CAAC,mFAAsB;AACpD;AACA;AACA;AACA;AACA,qBAAqB,mFAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,8DAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY,4DAAS;AACrB,8BAA8B,cAAc;AAC5C;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAE4C;;;;;;;;;;;;;;;;;;AChOqB;AACA;AACZ;;AAErD;AACA,2BAA2B,kEAAmB;AAC9C,6BAA6B,mEAAM;AACnC,2BAA2B,mEAAO;AAClC;AACA;AACA;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;;;;;ACdgC;AACI;AACjB;;AAEhD;AACA;AACA;AACA;AACA,OAAO,yDAAgB;AACvB;AACA,SAAS;AACT,qBAAqB,+DAAK;AAC1B,kBAAkB,+DAAK;AACvB,UAAU,+DAAK;AACf,YAAY,+DAAK;AACjB;AACA,iBAAiB,+DAAK;AACtB,oBAAoB,+DAAK;AACzB,sBAAsB,+DAAK;AAC3B,uBAAuB,+DAAK;AAC5B,qBAAqB,+DAAK;AAC1B,UAAU;AACV,kBAAkB,mEAAM;AACxB;AACA;AACA;AACA;AACA;;AAEkD;;;;;;;;;;;;;;;;;;;;AC7Bc;AACsB;AAC3C;AACJ;;AAEvC;AACA;AACA;AACA,6BAA6B,kEAAM,EAAE,8DAAE,EAAE,mEAAO,EAAE,mEAAO,EAAE,8DAAE,EAAE,8DAAE,EAAE,gDAAI;AACvE;AACA;AACA;AACA,+DAA+D,wDAAa;;AAErB;;;;;;;;;;;;;;;;;;;ACdM;AACI;AACV;AACZ;;AAE3C;AACA;AACA;AACA,uBAAuB,gEAAmB,EAAE,+DAAK,EAAE,mEAAO;AAC1D;AACA;AACA;AACA,6CAA6C,wDAAa;;AAEjC;;;;;;;;;;;;;;;ACdzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE0B;;;;;;;;;;;;;;;;;;ACT4C;AACmB;AACpD;;AAErC;AACA;AACA,iBAAiB,8DAAE;AACnB,oBAAoB,8DAAE;AACtB,sBAAsB,8DAAE;AACxB,uBAAuB,8DAAE;AACzB,qBAAqB,8DAAE;AACvB,kBAAkB,8DAAE;AACpB,YAAY,8DAAE;AACd,yBAAyB,8DAAE;AAC3B,0BAA0B,8DAAE;AAC5B,6BAA6B,8DAAE;AAC/B,4BAA4B,8DAAE;AAC9B;AACA,WAAW,8DAAE;AACb,cAAc,8DAAE;AAChB,YAAY,8DAAE;AACd,eAAe,8DAAE;AACjB,UAAU,8DAAE;AACZ,SAAS,8DAAE;AACX,WAAW,8DAAE;AACb,YAAY,8DAAE;AACd,UAAU,8DAAE;AACZ;AACA,aAAa,8DAAE;AACf,gBAAgB,8DAAE;AAClB,kBAAkB,8DAAE;AACpB,mBAAmB,8DAAE;AACrB,iBAAiB,8DAAE;AACnB,YAAY,8DAAE;AACd,eAAe,8DAAE;AACjB,iBAAiB,8DAAE;AACnB,kBAAkB,8DAAE;AACpB,gBAAgB,8DAAE;AAClB;AACA,YAAY,mEAAO;AACnB,aAAa,mEAAO;AACpB,aAAa,mEAAO;AACpB,aAAa,mEAAO;AACpB,SAAS;AACT,YAAY,iEAAK;AACjB,YAAY,iEAAK;AACjB,YAAY,iEAAK;AACjB,UAAU,mEAAO;AACjB,WAAW,mEAAO;AAClB,WAAW,mEAAO;AAClB,cAAc,8DAAE;AAChB,gBAAgB,8DAAE;AAClB,gBAAgB,8DAAE;AAClB,gBAAgB,8DAAE;AAClB,OAAO,8DAAE;AACT,OAAO,8DAAE;AACT,OAAO,8DAAE;AACT,iBAAiB,8DAAE;AACnB,0BAA0B,8DAAE;AAC5B,aAAa,iEAAK;AAClB,aAAa,8EAAkB;AAC/B,aAAa,8EAAkB;AAC/B,aAAa,8DAAE;AACf;AACA,YAAY,8CAAG;AACf;AACA,iBAAiB,iEAAK;AACtB,mBAAmB,iEAAK;AACxB,gBAAgB,8CAAG;AACnB;;AAE4B;;;;;;;;;;;;;;;ACvE5B;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;ACLzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgB;;;;;;;;;;;;;;;;ACRgD;;AAEhE;AACA,OAAO,kEAAM;AACb;AACA;;AAEe;;;;;;;;;;;;;;;;;;;;;;;;;ACP4C;AACU;AACd;AACwB;AAC/B;AACsB;AACE;AACT;AACO;;AAEtE;AACA;AACA;AACA,gCAAgC,uEAAgB;AAChD;AACA,YAAY,gEAAc;AAC1B,gCAAgC,kFAAmB;AACnD;AACA;AACA;AACA;AACA,2BAA2B,iFAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB;AAC/D,eAAe,iFAAkB;AACjC;AACA;AACA,QAAQ,wEAAe;AACvB;AACA;AACA,eAAe,4FAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,YAAY,+EAAa;AACzB;AACA;AACA,kDAAkD,OAAO;AACzD,aAAa;AACb;AACA;AACA;AACA,QAAQ,6DAAU;AAClB;AACA;;AAE+C;;;;;;;;;;;;;;;;;;ACtD8B;AACE;AACP;;AAExE;AACA,oBAAoB,sFAAkB;AACtC,mCAAmC;AACnC,2BAA2B,iFAAqB;AAChD,KAAK;AACL;;AAE4B;;;;;;;;;;;;;;;;;;;;;ACXI;AACoD;AACd;AACX;AACa;;AAExE;AACA;AACA,aAAa,+EAAa,kBAAkB,6FAAmB;AAC/D;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD,WAAW,8CAAO;AAClB,sBAAsB,qFAAqB;AAC3C,QAAQ,wEAAe,uBAAuB,uCAAuC;AACrF,+BAA+B;AAC/B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE2C;;;;;;;;;;;;;;;;;;;;ACxDY;AACiB;AACvB;AACsB;AACH;;AAEpE;AACA,YAAY,0CAA0C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iFAAiB;AAC7B;AACA;AACA;AACA;AACA,0BAA0B,yEAAgB;AAC1C,4BAA4B,gFAAc;AAC1C,YAAY,0DAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oEAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAiD;AACjE,mCAAmC,SAAS,EAAE,SAAS,EAAE,QAAQ;AACjE;AACA;;AAE2B;;;;;;;;;;;;;;;;ACzE0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+DAA+D;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC,oBAAoB,8DAAkB;AACtC;AACA;AACA,kCAAkC,cAAc,GAAG,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE0B;;;;;;;;;;;;;;;AC5C1B;AACA,aAAa;AACb,iBAAiB;AACjB,uBAAuB;AACvB,YAAY;AACZ,CAAC;;AAEgC;;;;;;;;;;;;;;;ACPjC,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;;;ACRiE;AACd;;AAEzE;AACA,YAAY,QAAQ;AACpB;AACA;AACA,YAAY,+EAAa;AACzB,gCAAgC,+EAAa;AAC7C,YAAY,6FAAmB;AAC/B;AACA;AACA;AACA;AACA;;AAEuC;;;;;;;;;;;;;;;;AChBvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8C;;;;;;;;;;;;;;;AC3B9C;;AAE8B;;;;;;;;;;;;;;;;;;;;;;;;;ACFiD;AAChB;AACP;AACK;AACM;AACN;AACd;AACuB;AACL;AACf;;AAElD,+BAA+B,uEAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAc;AAC1B,gCAAgC,kFAAmB;AACnD;AACA;AACA,eAAe,4EAAmB,YAAY,yEAAW;AACzD;AACA;AACA;AACA,eAAe,0EAAS;AACxB;AACA;AACA,eAAe,4FAA2B;AAC1C;AACA;AACA,QAAQ,qEAAa;AACrB;AACA;AACA,QAAQ,4DAAS;AACjB;AACA;AACA,wBAAwB,+DAAQ;AAChC;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;;;;;;;AC7CmB;AACgC;AACF;AACN;AACf;AACN;;AAElD;AACA,oBAAoB,sFAAkB;AACtC,qCAAqC,wFAA2B;AAChE,2BAA2B,gFAAoB;AAC/C,qCAAqC,2BAA2B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAa,8BAA8B,mCAAmC,EAAE,+DAAQ;AACpG,YAAY,4DAAS;AACrB,SAAS;AACT,KAAK;AACL;;AAE2B;;;;;;;;;;;;;;;AClC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgC;;;;;;;;;;;;;;;;;;;;AChCA;AAC0B;AACF;AACe;AACrB;;AAElD;AACA,wBAAwB,8CAAO;AAC/B,sBAAsB,oFAAoB;AAC1C,QAAQ,qEAAa,uBAAuB,mCAAmC,EAAE,+DAAQ;AACzF;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA,KAAK;AACL;AACA;AACA,QAAQ,sEAAiB;AACzB,8BAA8B;AAC9B;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;ACvB6C;AACJ;AACtB;;AAE1C;AACA;AACA;AACA,gCAAgC;AAChC;AACA,WAAW;AACX,IAAI,6EAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6EAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAY;AACpB;AACA;;AAEyB;;;;;;;;;;;;;;;ACjDzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+B;;;;;;;;;;;;;;;;AC7BkD;;AAEjF;AACA,OAAO,0FAAqB;AAC5B,aAAa;AACb,CAAC;;AAE+B;;;;;;;;;;;;;;;ACPhC;;AAEoB;;;;;;;;;;;;;;;;ACFwC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAE;AAC3B;AACA,uBAAuB,8DAAE;AACzB,wBAAwB,8DAAE;AAC1B,2BAA2B,YAAY,EAAE,YAAY;AACrD;;AAEwB;;;;;;;;;;;;;;;;;;AC/BwC;AACP;AACI;;AAE7D;AACA,IAAI,kEAAU;AACd;AACA,8BAA8B,sEAAmB,YAAY,yEAAW;AACxE;AACA;;AAEqB;;;;;;;;;;;;;;;;;ACXoD;AACgD;;AAEzH;AACA,sBAAsB,iGAA6B;AACnD;AACA,YAAY,+EAAa,gBAAgB,+EAAa;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEuC;;;;;;;;;;;;;;;;ACdqB;;AAE5D;AACA;AACA;AACA,UAAU,8DAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW,EAAE,UAAU;AACrC;;AAEkC;;;;;;;;;;;;;;;;;;;;;;;ACjBoD;AACJ;AACjB;AACT;AACQ;AACL;AAC0B;;AAErF,iCAAiC,oEAAoB;AACrD,0BAA0B,oEAAoB;AAC9C;AACA,yDAAyD,oBAAoB,KAAK,8FAAoB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,6EAAc;AACvC;AACA,oBAAoB,uCAAuC;AAC3D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,kCAAkC,qEAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+FAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2FAAiB,UAAU,2FAAiB;AACpE,6BAA6B,0EAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G,QAAQ,uGAAuG;AACzN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0EAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwD;;;;;;;;;;;;;;;AC9TxD;;AAE0B;;;;;;;;;;;;;;;;;ACFwC;AACV;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAa;AACrB;AACA;AACA;AACA,QAAQ,4DAAU;AAClB;AACA;AACA;AACA,2CAA2C,iEAAc;AACzD;AACA;AACA;AACA;;AAEoB;;;;;;;;;;;;;;;;;;;ACvBkE;AAC9B;AACL;;AAEnD;AACA,YAAY,+FAAmB;AAC/B,QAAQ,4DAAY,gBAAgB,qEAAc;AAClD;AACA;AACA;AACA;;AAEgD;;;;;;;;;;;;;;;ACZhD;AACA;AACA;AACA;AACA;AACA;;AAE0B;;;;;;;;;;;;;;;;;;;ACPmD;AACxB;AACD;AACkB;;AAEtE;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA,YAAY,+EAAa;AACzB;AACA;AACA;AACA;AACA;AACA,gBAAgB,sFAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,IAAsC;AACtD,gBAAgB,8DAAQ,8EAA8E,mBAAmB;AACzH;AACA;AACA,iBAAiB,+EAAa;AAC9B;AACA;AACA;AACA;AACA,kCAAkC,6DAAW,cAAc,gBAAgB;AAC3E,gBAAgB,sFAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6DAAW,wDAAwD,gBAAgB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuC;;;;;;;;;;;;;;;;AC9D0B;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8EAAuB;AAClC;;AAE0B;;;;;;;;;;;;;;;ACvB1B,8EAA8E,sBAAsB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBqC;AACC;AACI;AACzB;AACU;AACa;AACf;AACI;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6DAAW;AAC/C;AACA;AACA;AACA,qBAAqB,6EAAc;AACnC,UAAU,kBAAkB,iBAAiB,cAAc;AAC3D,eAAe;AACf;AACA,sBAAsB,sFAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iFAAiB,WAAW,kFAAiB;AAC1D;AACA;AACA;AACA,kBAAkB,wEAAa,WAAW,mEAAO;AACjD,oBAAoB,uFAAiB;AACrC;AACA,oCAAoC,6DAAW,UAAU,sBAAsB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE6F;;;;;;;;;;;;;;;;AC3H7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8C;;;;;;;;;;;;;;;;;ACX9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+C;;;;;;;;;;;;;;;ACpB/C;;AAEiB;;;;;;;;;;;;;;;;ACFyC;;AAE1D;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA,YAAY,4DAAU;AACtB;AACA;AACA;AACA,IAAI,sDAAI;AACR,iBAAiB,4DAAU;AAC3B;;AAEiB;;;;;;;;;;;;;;;;AClBjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgC;;;;;;;;;;;;;;;;;ACRE;;AAElC,cAAc,2CAAI;AAClB,gBAAgB,2CAAI;AACpB,IAAI,IAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;ACjB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;;;;;;;;;;ACzCmB;AACc;AACnB;AACJ;AACW;AACyB;AAClC;AACQ;AACR;;AAElC,uCAAuC,6CAAG;AAC1C;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAK;AACjB,mBAAmB,oDAAQ;AAC3B;AACA;AACA,mBAAmB,wDAAU;AAC7B;AACA;AACA;AACA,eAAe,sDAAQ;AACvB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA,oEAAoE,2CAAI;AACxE,oBAAoB,+CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qCAAqC,IAAI;AAC/E;AACA,IAAI,sDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA,gCAAgC,uDAAQ;AACxC;AACA;AACA;AACA,8BAA8B,iDAAK;AACnC;AACA;;AAEuB;;;;;;;;;;;;;;;AChGvB;;AAEqB;;;;;;;;;;;;;;;ACFrB;AACA;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;ACL7B;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;ACLvB;AACA;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;;;;;;;;ACLG;AACS;AACO;AACG;AACE;AACA;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAG,EAAE,6DAAI,EAAE,6DAAI;AACnC;AACA;AACA;AACA,IAAI,sDAAS,oBAAoB,MAAM;AACvC;AACA,iBAAiB,6DAAI;AACrB;AACA,gBAAgB,6DAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,wBAAwB,6CAAG;AAC3B,eAAe,6DAAI;AACnB;AACA;;AAEoC;;;;;;;;;;;;;;;;;;;;;;;ACvCJ;AACW;AACT;AACK;AACgB;AACyB;;AAEhF;AACA;AACA,sBAAsB,6CAAG;AACzB;AACA,aAAa,+DAAK;AAClB,eAAe,wDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAO;AAC5B,wBAAwB,mFAAmB;AAC3C,wBAAwB,mFAAmB;AAC3C;AACA;AACA;AACA,eAAe,+CAAI;AACnB;AACA;AACA,QAAQ,oDAAO,0BAA0B,OAAO,SAAS,OAAO;AAChE,yBAAyB,wBAAwB;AACjD;AACA;;AAE2C;;;;;;;;;;;;;;;AC3D3C;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe;;;;;;;;;;;;;;;ACvBf;;AAEgB;;;;;;;;;;;;;;;;ACFwB;;AAExC;AACA;AACA,IAAI,qDAAU;AACd;AACA;;AAEyB;;;;;;;;;;;;;;;;;ACRQ;AACU;;AAE3C;AACA;AACA,oBAAoB,gBAAgB;AACpC,+BAA+B,uDAAQ;AACvC,oBAAoB,6CAAG;AACvB;AACA;;AAEsB;;;;;;;;;;;;;;;ACXtB;AACA;AACA;;AAEgC;;;;;;;;;;;;;;;ACJhC;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY;AACZ;AACA;AACA;;AAEgB;;;;;;;;;;;;;;;ACVhB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoB;;;;;;;;;;;;;;;;;ACjB0B;AAC+B;;AAE7E;AACA,IAAI,gEAAwB;AAC5B,SAAS,sDAAS;AAClB;AACA;AACA;AACA,mDAAmD,4DAAoB;AACvE;AACA;AACA;AACA;AACA,QAAQ,4DAAoB;AAC5B;AACA;;AAEoC;;;;;;;;;;;;;;;;AClBpC;AACA,+BAA+B;AAC/B,mCAAmC;;AAEuB;;;;;;;;;;;;;;;;;ACJqB;;AAE/E;AACA;AACA;AACA;AACA;AACA,WAAW,2FAAiB;AAC5B;;AAEuD;;;;;;;;;;;;;;;ACVvD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;;AAE0B;;;;;;;;;;;;;;;;ACb8B;;AAExD;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAa;AACrB,qBAAqB,sDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+B;;;;;;;;;;;;;;;;ACvC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwD;;;;;;;;;;;;;;;;ACTzB;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6CAAM;AACtB;AACA;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;ACjBuB;AACA;AACM;;AAEpD;AACA,sBAAsB,iEAAY;AAClC,sDAAsD,+CAAQ;AAC9D,wBAAwB,kDAAW;AACnC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gCAAgC,kDAAW,OAAO,sDAAI;AACtD;AACA;;AAE0B;;;;;;;;;;;;;;;AClB1B;AACA;AACA;;AAEiC;;;;;;;;;;;;;;;;;ACJF;AACyC;;AAExE;AACA,sBAAsB,6CAAM;AAC5B,IAAI,qFAAyB;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEwB;;;;;;;;;;;;;;;;;ACd2B;AACN;;AAE7C,kCAAkC,sDAAS,GAAG,kDAAe,GAAG,4CAAS;;AAEpC;;;;;;;;;;;;;;;;ACLH;;AAElC;AACA,WAAW,gDAAS;AACpB;;AAE4B;;;;;;;;;;;;;;;ACN5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE6B;;;;;;;;;;;;;;;ACV7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoB;;;;;;;;;;;;;;;;;;;;;ACV8B;AACJ;AAC0B;AACH;AACnB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB,EAAE,0DAAS;AAClD;AACA;AACA;AACA,gBAAgB,sDAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sDAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,qCAAqC,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,IAAqC;AACjD,YAAY,8DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,yCAAyC,gFAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAI;AACpB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iFAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoC;;;;;;;;;;;;;;;;;AC3UF;AACU;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yDAAa;AACvB;AACA,eAAe,2CAAI;AACnB;;AAEe;;;;;;;;;;;;;;;;;;;ACvC8B;AACE;AACP;AACgB;;AAExD;AACA,UAAU,yDAAa;AACvB,WAAW,sDAAU;AACrB,kBAAkB,gDAAgD;AAClE;AACA;AACA;AACA,YAAY,uDAAO,WAAW,oDAAQ;AACtC;AACA,YAAY,uDAAO,WAAW,oDAAQ;AACtC;AACA,YAAY,oDAAQ,CAAC,qDAAK;AAC1B;AACA,KAAK;AACL;;AAEgB;;;;;;;;;;;;;;;;;;;ACrBwB;AACR;AACE;AACA;;AAElC;AACA,iBAAiB,2CAAI,YAAY,yCAAG,YAAY,2CAAI;AACpD;AACA,YAAY,2CAAI;AAChB,mBAAmB,2CAAI;AACvB;AACA,iBAAiB,2CAAI;AACrB,mBAAmB,2CAAI;AACvB;AACA;AACA,mBAAmB,yCAAG;AACtB;AACA,KAAK;AACL;AACA,eAAe,oDAAQ;AACvB;AACA;AACA,kBAAkB,2CAAI;AACtB,kBAAkB,2CAAI;AACtB,KAAK;AACL;;AAEiB;;;;;;;;;;;;;;;;;;;;AC3BgC;AACI;AACb;AACgB;;AAExD,4BAA4B,uDAAK;AACjC;AACA,OAAO,sDAAM;AACb;AACA;AACA;AACA,UAAU,yDAAa;AACvB,WAAW,sDAAU;AACrB,kBAAkB,sCAAsC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAQ,CAAC,qDAAK;AACtB;AACA;;AAEyB;;;;;;;;;;;;;;;;;ACxB6C;;AAEtE;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAQ,OAAO,wDAAgB;AACnD;AACA;AACA;AACA,SAAS,oDAAQ;AACjB;AACA,qCAAqC,kDAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqC;;;;;;;;;;;;;;;;;ACtBC;AACI;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kDAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,+CAAO;AACd;AACA;AACA;AACA,KAAK;AACL;;AAEkB;;;;;;;;;;;;;;;;;;;AC7ByB;AACG;AAC4B;;AAE1E,sBAAsB,EAAE;AACxB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,QAAQ,oDAAQ;AAChB,wBAAwB,kDAAU;AAClC,4BAA4B,kDAAU;AACtC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,2BAA2B,kDAAU;AACrC;AACA;AACA;AACA;AACA,sBAAsB,kDAAU;AAChC,kCAAkC,mDAAK;AACvC;AACA,4BAA4B,kDAAU;AACtC;AACA;AACA,sBAAsB,kDAAU;AAChC,mCAAmC,sDAAM;AACzC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA,kBAAkB,mDAAK;AACvB,kBAAkB,oDAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAEsB;;;;;;;;;;;;;;;;;;AC5DS;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uDAAK;AAC3B;AACA;AACA;AACA;AACA;;AAEgC;;;;;;;;;;;;;;;;;;;;;AChBQ;;AAExC;AACA,iBAAiB,oDAAQ;AACzB;AACA,yBAAyB,EAAE,EAAE,KAAK;AAClC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4D;;;;;;;;;;;;;;;;;;;AClB5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,IAAI,kCAAkC,EAAE;AACvE,sCAAsC,IAAI,kCAAkC,EAAE;AAC9E;AACA;AACA;;AAEwE;;;;;;;;;;;;;;;;ACdX;;AAE7D;AACA,mBAAmB,yEAAa;AAChC;;AAEmC;;;;;;;;;;;;;;;ACNnC;;AAEyB;;;;;;;;;;;;;;;;;ACFqC;AACR;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mEAAa;AACxC,WAAW,uEAAa;AACxB;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;ACfvB;AACP;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,WAAW;;AAElD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,+BAA+B;AAC3C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,SAAS;AAC3B;AACA;;AAEA;AACA;AACA,IAAI;AACJ,sBAAsB,WAAW;AACjC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AClHwC;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,qDAAO;AAC5C,0CAA0C,WAAW,GAAG,iBAAiB;;AAEzE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;;AAElB;;;;;;;;;;;;;;;;;;AC/MyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;;AAEA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,mEAAY;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,uDAAuD;;AAEvD;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA,4CAA4C,mEAAY,uBAAuB;;AAE/E,kEAAkE;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,6CAA6C,mEAAY;;AAEzD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oBAAoB;;AAEL;AAChB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxDmC;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB;AACA;AACO;AACP;AACA,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB;AACA;AACO;AACP;AACA,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB;AACA;AACO;AACP;AACA;AACA,mBAAmB,4CAAI;AACvB;AACA,sBAAsB,4CAAI;AAC1B;AACA,sBAAsB,4CAAI;AAC1B;AACA;AACO;AACP;AACA,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB;AACA;AACO;AACP;AACA,kBAAkB,4CAAI;AACtB;AACA,kBAAkB,4CAAI;AACtB;AACA;AACO;AACP;AACA,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB;AACA;AACO;AACP,uBAAuB,4CAAI;AAC3B;AACO;AACP;AACA,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB,kBAAkB,4CAAI;AACtB;AACA;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACO;AACP,aAAa,4CAA4C;AACzD,EAAE;;AAEF;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/KqD;AACL;AACV;AACtC;AACA;AACA;AACA;;AAEO;AACP,SAAS,mDAAK;AACd;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;AACL,GAAG;AACH;AACA,cAAc,0CAA0C;AACxD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,YAAY;AAC1B,GAAG;AACH;AACA,YAAY,wDAAwD;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;AACA,cAAc,aAAa;AAC3B,GAAG;AACH;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,GAAG;AACH;AACA,cAAc,yCAAyC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,QAAQ,oEAAoE;AAC5E;AACA;AACA,kBAAkB,KAAK,EAAE,iDAAiD;AAC1E,YAAY,eAAe,EAAE,qCAAqC;AAClE;AACA,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA,cAAc,6BAA6B;AAC3C,sBAAsB,kEAAgB,UAAU,6DAAW;AAC3D,GAAG;AACH;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA,cAAc,QAAQ;AACtB,GAAG;AACH;AACA,cAAc,QAAQ,OAAO,2BAA2B;AACxD,GAAG;AACH;AACA,cAAc,aAAa;AAC3B,GAAG;AACH;AACA;AACA,cAAc,uBAAuB;AACrC;AACA,GAAG;AACH;AACA;AACA,cAAc,MAAM;AACpB,GAAG;AACH;AACA,cAAc,MAAM;AACpB,GAAG;AACH;AACA,cAAc,MAAM;AACpB,GAAG;AACH;AACA;AACA,cAAc,yCAAyC;AACvD;AACA;AACA,GAAG;AACH;AACA,cAAc,iBAAiB;AAC/B,GAAG;AACH;AACA,cAAc,+BAA+B;AAC7C;AACA;AACA,GAAG;AACH;AACA,cAAc,mDAAmD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,sDAAsD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,mDAAmD;AACjE;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,mDAAmD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,sCAAsC;AACpD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,uCAAuC;AACrD;AACA;AACA,GAAG;AACH;AACA,cAAc,+BAA+B;AAC7C;AACA,GAAG;AACH;AACA,cAAc,uCAAuC;AACrD;AACA;AACA,GAAG;AACH;AACA,cAAc,2DAA2D;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,4BAA4B;AAC1C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,kBAAkB;AAChC;AACA,GAAG;AACH;AACA,cAAc,sCAAsC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,sCAAsC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,0BAA0B;AACxC;AACA,GAAG;AACH;AACA,cAAc,0BAA0B;AACxC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;;AAEA;AACA,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClVqD;AACJ;AACM;;AAEvD;AACA;AACA;AACA;AACA,oEAAoE,qBAAqB;AACzF;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,iEAAS,4CAA4C,6DAAO,OAAO;AACzE;AACA;AACA;AACA;AACA,MAAM,iEAAS;AACf;AACA;AACA;AACA;AACA,MAAM,iEAAS;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,SAAS,mEAAU;AACnB;;;;;;;;;;;;;;;;;;;;;;;ACjDqD;AACJ;AACK;AACnB;AACnC;AACA;AACA;AACA;;AAEO,8BAA8B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEO,4CAA4C,uDAAiB;AACpE;;AAEA,mCAAmC,4CAAI;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,MAAM,gDAAM,UAAU,iEAAS,6BAA6B,6DAAO,OAAO;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA,cAAc,gDAAM;AACpB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA,mCAAmC,4CAAI;AACvC;AACA;AACA;;AAEA,oBAAoB,qBAAqB;AACzC,cAAc,eAAe;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,qBAAqB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,wBAAwB,qBAAqB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA,SAAS,QAAQ,UAAU;AAC3B;AACA,IAAI;AACJ,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI,KAAK,UAAU;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP,UAAU,eAAe;AACzB;AACA;;;;;;;;;;;;;;;;;;;ACxWkC;AAClC;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,IAAI,gDAAS;AACb;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACyB;AACnB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;AACzB;;;;;;;;;;;;;;;AClDA;AACA,QAAQ,iBAAiB;AACzB;;AAEA;AACA,qBAAqB,mBAAmB;AACxC,qBAAqB,eAAe;AACpC,qBAAqB,aAAa;AAClC,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAA2C;AAChE;;AAEA;;AAEO;AACP;AACA,0BAA0B,OAAO,aAAoB,EAAE;AACvD,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,gBAAgB,sCAAsC,kBAAkB;AACjF,wBAAwB;AACxB;AACA;;AAEO;AACP;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEO;AACP;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,2DAA2D,cAAc;AACzE;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;;AAEO;AACP,kCAAkC;AAClC;;AAEO;AACP,uBAAuB,uFAAuF;AAC9G;AACA;AACA,yGAAyG;AACzG;AACA,sCAAsC,QAAQ;AAC9C;AACA,gEAAgE;AAChE;AACA,8CAA8C,yFAAyF;AACvI,8DAA8D,2CAA2C;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA,4CAA4C,yEAAyE;AACrH;;AAEO;AACP;AACA;;AAEO;AACP,0BAA0B,+DAA+D,iBAAiB;AAC1G;AACA,kCAAkC,MAAM,+BAA+B,YAAY;AACnF,iCAAiC,MAAM,mCAAmC,YAAY;AACtF,8BAA8B;AAC9B;AACA,GAAG;AACH;;AAEO;AACP,YAAY,6BAA6B,0BAA0B,cAAc,qBAAqB;AACtG,eAAe,oDAAoD,qEAAqE,cAAc;AACtJ,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,iCAAiC,SAAS;AAC1C,iCAAiC,WAAW,UAAU;AACtD,wCAAwC,cAAc;AACtD;AACA,4GAA4G,OAAO;AACnH,+EAA+E,iBAAiB;AAChG,uDAAuD,gBAAgB,QAAQ;AAC/E,6CAA6C,gBAAgB,gBAAgB;AAC7E;AACA,gCAAgC;AAChC;AACA;AACA,QAAQ,YAAY,aAAa,SAAS,UAAU;AACpD,kCAAkC,SAAS;AAC3C;AACA;;AAEO;AACP;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;AAEM;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACO;AACP,2BAA2B,sBAAsB;AACjD;AACA;AACA;;AAEA;AACO;AACP,gDAAgD,QAAQ;AACxD,uCAAuC,QAAQ;AAC/C,uDAAuD,QAAQ;AAC/D;AACA;AACA;;AAEO;AACP,2EAA2E,OAAO;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,eAAe,uFAAuF,cAAc;AACpH,qBAAqB,gCAAgC,qCAAqC,2CAA2C;AACrI,0BAA0B,MAAM,iBAAiB,YAAY;AAC7D,qBAAqB;AACrB,4BAA4B;AAC5B,2BAA2B;AAC3B,0BAA0B;AAC1B;;AAEO;AACP;AACA,eAAe,6CAA6C,UAAU,sDAAsD,cAAc;AAC1I,wBAAwB,6BAA6B,oBAAoB,uCAAuC,kBAAkB;AAClI;;AAEO;AACP;AACA;AACA,yGAAyG,uFAAuF,cAAc;AAC9M,qBAAqB,8BAA8B,gDAAgD,wDAAwD;AAC3J,2CAA2C,sCAAsC,UAAU,mBAAmB,IAAI;AAClH;;AAEO;AACP,+BAA+B,uCAAuC,YAAY,KAAK,OAAO;AAC9F;AACA;;AAEA;AACA,wCAAwC,4BAA4B;AACpE,CAAC;AACD;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,2CAA2C;AAC3C;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAA8C;AACnE;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,SAAS,gBAAgB;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACjXF,8DAA8D,iFAAiF,gDAAgD,wHAAwH,gBAAgB,WAAW,qBAAqB,4BAA4B,cAAc,SAAS,mCAAmC;;AAE7b,kDAAkD,gBAAgB,gEAAgE,wDAAwD,6DAA6D,sDAAsD;;AAE7S,uCAAuC,uDAAuD,uCAAuC,SAAS,OAAO,oBAAoB;;AAEzK,4CAA4C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD;;AAE/P,8DAA8D,sEAAsE,8DAA8D,kDAAkD,iBAAiB,GAAG;;AAExQ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC;AAClC;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,0EAA0E;AAC1E;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA,2EAA2E,aAAa;AACxF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yFAAyF,4BAA4B;AACrH;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B,cAAc;AACxC;AACA;AACA;;AAEA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;;AAEA;AACA,4EAA4E,eAAe;AAC3F;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEsB;;;;;;;;;;;;;;;;;UC/jBtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC7BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEnDA;UACA;UACA;UACA;UACA","sources":["webpack://ncmazfaustcore/./src/__generated__/fragment-masking.ts","webpack://ncmazfaustcore/./src/__generated__/gql.ts","webpack://ncmazfaustcore/./src/__generated__/graphql.ts","webpack://ncmazfaustcore/./src/__generated__/index.ts","webpack://ncmazfaustcore/./src/block-terms/attributes.ts","webpack://ncmazfaustcore/./src/block-terms/deprecated.ts","webpack://ncmazfaustcore/./src/block-terms/edit.tsx","webpack://ncmazfaustcore/./src/block-terms/index.js","webpack://ncmazfaustcore/./src/block-terms/order-control.tsx","webpack://ncmazfaustcore/./src/block-terms/save.tsx","webpack://ncmazfaustcore/./src/frontend-components/Badge/Badge.tsx","webpack://ncmazfaustcore/./src/frontend-components/CardCategory1/CardCategory1.tsx","webpack://ncmazfaustcore/./src/frontend-components/CardCategory2/CardCategory2.tsx","webpack://ncmazfaustcore/./src/frontend-components/CardCategory3/CardCategory3.tsx","webpack://ncmazfaustcore/./src/frontend-components/CardCategory4/CardCategory4.tsx","webpack://ncmazfaustcore/./src/frontend-components/CardCategory5/CardCategory5.tsx","webpack://ncmazfaustcore/./src/frontend-components/MySlider.tsx","webpack://ncmazfaustcore/./src/frontend-components/NcImage/NcImage.tsx","webpack://ncmazfaustcore/./src/frontend-components/NextPrev/NextBtn.tsx","webpack://ncmazfaustcore/./src/frontend-components/NextPrev/PrevBtn.tsx","webpack://ncmazfaustcore/./src/frontend-components/SectionSliderNewCategories/SectionSliderNewCategories.tsx","webpack://ncmazfaustcore/./src/hooks/useTermGqlQuery.ts","webpack://ncmazfaustcore/./src/main.js","webpack://ncmazfaustcore/./src/utils/animationVariants.ts","webpack://ncmazfaustcore/./src/block-terms/style.scss","webpack://ncmazfaustcore/./node_modules/optimism/lib/bundle.esm.js","webpack://ncmazfaustcore/./node_modules/optimism/node_modules/@wry/trie/lib/trie.esm.js","webpack://ncmazfaustcore/./node_modules/react-swipeable/es/index.js","webpack://ncmazfaustcore/./node_modules/react-use/esm/misc/util.js","webpack://ncmazfaustcore/./node_modules/react-use/esm/useEffectOnce.js","webpack://ncmazfaustcore/./node_modules/react-use/esm/useRafState.js","webpack://ncmazfaustcore/./node_modules/react-use/esm/useUnmount.js","webpack://ncmazfaustcore/./node_modules/react-use/esm/useWindowSize.js","webpack://ncmazfaustcore/external window \"React\"","webpack://ncmazfaustcore/external window [\"wp\",\"blockEditor\"]","webpack://ncmazfaustcore/external window [\"wp\",\"blocks\"]","webpack://ncmazfaustcore/external window [\"wp\",\"components\"]","webpack://ncmazfaustcore/external window [\"wp\",\"element\"]","webpack://ncmazfaustcore/external window [\"wp\",\"i18n\"]","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/core/cache.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/core/types/common.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/entityStore.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/helpers.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/key-extractor.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/object-canon.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/policies.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/readFromStore.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/cache/inmemory/writeToStore.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/core/ApolloClient.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/core/LocalState.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/core/ObservableQuery.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/core/QueryInfo.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/core/QueryManager.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/core/networkStatus.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/errors/index.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/core/ApolloLink.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/core/execute.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/core/from.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/HttpLink.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/checkFetcher.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/createHttpLink.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/createSignalIfSupported.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/iterators/async.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/iterators/nodeStream.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/iterators/promise.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/iterators/reader.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/responseIterator.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/rewriteURIForGET.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/selectURI.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/http/serializeFetchParameter.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/retry/delayFunction.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/retry/retryFunction.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/retry/retryLink.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/utils/createOperation.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/utils/fromError.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/utils/throwServerError.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/utils/transformOperation.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/link/utils/validateOperation.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/react/context/ApolloContext.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/react/context/ApolloProvider.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/react/hooks/useApolloClient.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/react/hooks/useQuery.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/react/parser/index.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/arrays.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/canUse.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/cloneDeep.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/compact.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/errorHandling.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/incrementalResult.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/makeUniqueId.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/mergeDeep.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/mergeOptions.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/objects.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/responseIterator.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/globals/DEV.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/globals/fix-graphql.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/globals/global.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/globals/index.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/globals/maybe.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/graphql/directives.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/graphql/fragments.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/graphql/getFromAST.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/graphql/storeUtils.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/graphql/transform.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/observables/Concast.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/observables/asyncMap.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/observables/iteration.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/utilities/observables/subclassing.js","webpack://ncmazfaustcore/./node_modules/@apollo/client/version.js","webpack://ncmazfaustcore/./node_modules/@heroicons/react/24/solid/esm/ArrowRightIcon.js","webpack://ncmazfaustcore/./node_modules/@heroicons/react/24/solid/esm/ChevronLeftIcon.js","webpack://ncmazfaustcore/./node_modules/@heroicons/react/24/solid/esm/ChevronRightIcon.js","webpack://ncmazfaustcore/./node_modules/@wry/context/lib/index.js","webpack://ncmazfaustcore/./node_modules/@wry/context/lib/slot.js","webpack://ncmazfaustcore/./node_modules/@wry/equality/lib/index.js","webpack://ncmazfaustcore/./node_modules/@wry/trie/lib/index.js","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/instant.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/animation/utils/wildcards.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/components/MotionConfig/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/debug/record.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/back.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/frameloop/data.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/frameloop/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/node/id.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/store.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/array.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/errors.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/mix-color.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/mix.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/utils/warn-once.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://ncmazfaustcore/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://ncmazfaustcore/./node_modules/graphql/jsutils/devAssert.mjs","webpack://ncmazfaustcore/./node_modules/graphql/jsutils/inspect.mjs","webpack://ncmazfaustcore/./node_modules/graphql/jsutils/instanceOf.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/ast.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/blockString.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/characterClasses.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/kinds.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/predicates.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/printString.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/printer.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/source.mjs","webpack://ncmazfaustcore/./node_modules/graphql/language/visitor.mjs","webpack://ncmazfaustcore/./node_modules/ts-invariant/lib/invariant.js","webpack://ncmazfaustcore/./node_modules/ts-invariant/process/index.js","webpack://ncmazfaustcore/./node_modules/tslib/tslib.es6.mjs","webpack://ncmazfaustcore/./node_modules/zen-observable-ts/module.js","webpack://ncmazfaustcore/webpack/bootstrap","webpack://ncmazfaustcore/webpack/runtime/chunk loaded","webpack://ncmazfaustcore/webpack/runtime/compat get default export","webpack://ncmazfaustcore/webpack/runtime/create fake namespace object","webpack://ncmazfaustcore/webpack/runtime/define property getters","webpack://ncmazfaustcore/webpack/runtime/hasOwnProperty shorthand","webpack://ncmazfaustcore/webpack/runtime/make namespace object","webpack://ncmazfaustcore/webpack/runtime/jsonp chunk loading","webpack://ncmazfaustcore/webpack/before-startup","webpack://ncmazfaustcore/webpack/startup","webpack://ncmazfaustcore/webpack/after-startup"],"sourcesContent":["import { ResultOf, DocumentTypeDecoration, TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { FragmentDefinitionNode } from 'graphql';\nimport { Incremental } from './graphql';\n\n\nexport type FragmentType<TDocumentType extends DocumentTypeDecoration<any, any>> = TDocumentType extends DocumentTypeDecoration<\n  infer TType,\n  any\n>\n  ? [TType] extends [{ ' $fragmentName'?: infer TKey }]\n    ? TKey extends string\n      ? { ' $fragmentRefs'?: { [key in TKey]: TType } }\n      : never\n    : never\n  : never;\n\n// return non-nullable if `fragmentType` is non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>>\n): TType;\n// return nullable if `fragmentType` is nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | null | undefined\n): TType | null | undefined;\n// return array of non-nullable if `fragmentType` is array of non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>>\n): ReadonlyArray<TType>;\n// return array of nullable if `fragmentType` is array of nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>> | null | undefined\n): ReadonlyArray<TType> | null | undefined;\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>> | null | undefined\n): TType | ReadonlyArray<TType> | null | undefined {\n  return fragmentType as any;\n}\n\n\nexport function makeFragmentData<\n  F extends DocumentTypeDecoration<any, any>,\n  FT extends ResultOf<F>\n>(data: FT, _fragment: F): FragmentType<F> {\n  return data as FragmentType<F>;\n}\nexport function isFragmentReady<TQuery, TFrag>(\n  queryNode: DocumentTypeDecoration<TQuery, any>,\n  fragmentNode: TypedDocumentNode<TFrag>,\n  data: FragmentType<TypedDocumentNode<Incremental<TFrag>, any>> | null | undefined\n): data is FragmentType<typeof fragmentNode> {\n  const deferredFields = (queryNode as { __meta__?: { deferredFields: Record<string, (keyof TFrag)[]> } }).__meta__\n    ?.deferredFields;\n\n  if (!deferredFields) return true;\n\n  const fragDef = fragmentNode.definitions[0] as FragmentDefinitionNode | undefined;\n  const fragName = fragDef?.name?.value;\n\n  const fields = (fragName && deferredFields[fragName]) || [];\n  return fields.length > 0 && fields.every(field => data && field in data);\n}\n","/* eslint-disable */\nimport * as types from './graphql';\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */\nconst documents = {\n    \"\\n\\tfragment NcmazFcTermCardFields on TermNode {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\tcount\\n\\t\\turi\\n\\t\\tname\\n\\t\\tslug\\n\\t\\tdatabaseId\\n\\t\\tdescription\\n\\t\\tlink\\n\\t\\ttaxonomyName\\n\\t\\t... on Category {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\tcolor\\n\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t... on Tag {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\tcolor\\n\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcTermCardFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcTermsCardFields on RootQueryToTermNodeConnection {\\n\\t\\t__typename\\n\\t\\tedges {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcTermCardFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcTermsCardFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostsEdegsFields on RootQueryToPostConnection {\\n\\t\\t__typename\\n\\t\\tedges {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcPostCardFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcPostsEdegsFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostCardFields on Post {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\tlink\\n\\t\\turi\\n\\t\\tmodifiedGmt\\n\\t\\tmodified\\n\\t\\tisSticky\\n\\t\\tdateGmt\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tstatus\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tdatabaseId\\n\\t\\t\\t\\tavatar {\\n\\t\\t\\t\\t\\turl\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\turl\\n\\t\\t\\t\\turi\\n\\t\\t\\t\\tusername\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t\\tncUserMeta {\\n\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\turi\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t\\tcount\\n\\t\\t\\t\\t\\tcategoryId\\n\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcommentCount\\n\\t\\tdate\\n\\t\\texcerpt\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tdatabaseId\\n\\t\\tslug\\n\\t\\ttitle\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFields\\n\\t\\t}\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcPostCardFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcImageFields on MediaItem {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\taltText\\n\\t\\tcaption\\n\\t\\tdatabaseId\\n\\t\\tsizes\\n\\t\\tsourceUrl\\n\\t\\tsrcSet\\n\\t}\\n\": types.NcmazFcImageFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostMetaFields on Post_Ncpostmetadata {\\n\\t\\t__typename\\n\\t\\treactionLikedList\\n\\t\\tsavedList\\n\\t\\tshowRightSidebar\\n\\t\\tsinglePageStyle\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t}\\n\": types.NcmazFcPostMetaFieldsFragmentDoc,\n    \"\\n\\tquery postsWithVariablesQuery(\\n\\t\\t$authorIn: [ID] = \\\"\\\"\\n\\t\\t$categoryIn: [ID] = \\\"\\\"\\n\\t\\t$tagIn: [ID] = \\\"\\\"\\n\\t\\t$search: String = \\\"\\\"\\n\\t\\t$parentIn: [ID] = \\\"\\\"\\n\\t\\t$first: Int = 10\\n\\t\\t$field: PostObjectsConnectionOrderbyEnum = AUTHOR\\n\\t\\t$order: OrderEnum = ASC\\n\\t) {\\n\\t\\tposts(\\n\\t\\t\\twhere: {\\n\\t\\t\\t\\tauthorIn: $authorIn\\n\\t\\t\\t\\tcategoryIn: $categoryIn\\n\\t\\t\\t\\ttagIn: $tagIn\\n\\t\\t\\t\\tsearch: $search\\n\\t\\t\\t\\tparentIn: $parentIn\\n\\t\\t\\t\\torderby: { field: $field, order: $order }\\n\\t\\t\\t}\\n\\t\\t\\tfirst: $first\\n\\t\\t) {\\n\\t\\t\\t...NcmazFcPostsEdegsFields\\n\\t\\t}\\n\\t}\\n\": types.PostsWithVariablesQueryDocument,\n    \"\\n\\tquery termsWithVariablesQuery(\\n\\t\\t$first: Int = 10\\n\\t\\t$order: OrderEnum = ASC\\n\\t\\t$orderby: TermObjectsConnectionOrderbyEnum = COUNT\\n\\t\\t$taxonomies: [TaxonomyEnum] = CATEGORY\\n\\t) {\\n\\t\\tterms(\\n\\t\\t\\twhere: { taxonomies: $taxonomies, orderby: $orderby, order: $order }\\n\\t\\t\\tfirst: $first\\n\\t\\t) {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t__typename\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tcount\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t\\tdatabaseId\\n\\t\\t\\t\\t\\tdescription\\n\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\ttaxonomyName\\n\\t\\t\\t\\t\\t... on Category {\\n\\t\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t... on Tag {\\n\\t\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.TermsWithVariablesQueryDocument,\n};\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n */\nexport function graphql(source: string): unknown;\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tfragment NcmazFcTermCardFields on TermNode {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\tcount\\n\\t\\turi\\n\\t\\tname\\n\\t\\tslug\\n\\t\\tdatabaseId\\n\\t\\tdescription\\n\\t\\tlink\\n\\t\\ttaxonomyName\\n\\t\\t... on Category {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\tcolor\\n\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t... on Tag {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\tcolor\\n\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcTermCardFields on TermNode {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\tcount\\n\\t\\turi\\n\\t\\tname\\n\\t\\tslug\\n\\t\\tdatabaseId\\n\\t\\tdescription\\n\\t\\tlink\\n\\t\\ttaxonomyName\\n\\t\\t... on Category {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\tcolor\\n\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t... on Tag {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\tcolor\\n\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tfragment NcmazFcTermsCardFields on RootQueryToTermNodeConnection {\\n\\t\\t__typename\\n\\t\\tedges {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcTermCardFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcTermsCardFields on RootQueryToTermNodeConnection {\\n\\t\\t__typename\\n\\t\\tedges {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcTermCardFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tfragment NcmazFcPostsEdegsFields on RootQueryToPostConnection {\\n\\t\\t__typename\\n\\t\\tedges {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcPostCardFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostsEdegsFields on RootQueryToPostConnection {\\n\\t\\t__typename\\n\\t\\tedges {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcPostCardFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tfragment NcmazFcPostCardFields on Post {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\tlink\\n\\t\\turi\\n\\t\\tmodifiedGmt\\n\\t\\tmodified\\n\\t\\tisSticky\\n\\t\\tdateGmt\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tstatus\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tdatabaseId\\n\\t\\t\\t\\tavatar {\\n\\t\\t\\t\\t\\turl\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\turl\\n\\t\\t\\t\\turi\\n\\t\\t\\t\\tusername\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t\\tncUserMeta {\\n\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\turi\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t\\tcount\\n\\t\\t\\t\\t\\tcategoryId\\n\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcommentCount\\n\\t\\tdate\\n\\t\\texcerpt\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tdatabaseId\\n\\t\\tslug\\n\\t\\ttitle\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFields\\n\\t\\t}\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostCardFields on Post {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\tlink\\n\\t\\turi\\n\\t\\tmodifiedGmt\\n\\t\\tmodified\\n\\t\\tisSticky\\n\\t\\tdateGmt\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tstatus\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tdatabaseId\\n\\t\\t\\t\\tavatar {\\n\\t\\t\\t\\t\\turl\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\turl\\n\\t\\t\\t\\turi\\n\\t\\t\\t\\tusername\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t\\tncUserMeta {\\n\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\turi\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t\\tcount\\n\\t\\t\\t\\t\\tcategoryId\\n\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcommentCount\\n\\t\\tdate\\n\\t\\texcerpt\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tdatabaseId\\n\\t\\tslug\\n\\t\\ttitle\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFields\\n\\t\\t}\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tfragment NcmazFcImageFields on MediaItem {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\taltText\\n\\t\\tcaption\\n\\t\\tdatabaseId\\n\\t\\tsizes\\n\\t\\tsourceUrl\\n\\t\\tsrcSet\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcImageFields on MediaItem {\\n\\t\\t__typename\\n\\t\\tid\\n\\t\\taltText\\n\\t\\tcaption\\n\\t\\tdatabaseId\\n\\t\\tsizes\\n\\t\\tsourceUrl\\n\\t\\tsrcSet\\n\\t}\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tfragment NcmazFcPostMetaFields on Post_Ncpostmetadata {\\n\\t\\t__typename\\n\\t\\treactionLikedList\\n\\t\\tsavedList\\n\\t\\tshowRightSidebar\\n\\t\\tsinglePageStyle\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostMetaFields on Post_Ncpostmetadata {\\n\\t\\t__typename\\n\\t\\treactionLikedList\\n\\t\\tsavedList\\n\\t\\tshowRightSidebar\\n\\t\\tsinglePageStyle\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t}\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tquery postsWithVariablesQuery(\\n\\t\\t$authorIn: [ID] = \\\"\\\"\\n\\t\\t$categoryIn: [ID] = \\\"\\\"\\n\\t\\t$tagIn: [ID] = \\\"\\\"\\n\\t\\t$search: String = \\\"\\\"\\n\\t\\t$parentIn: [ID] = \\\"\\\"\\n\\t\\t$first: Int = 10\\n\\t\\t$field: PostObjectsConnectionOrderbyEnum = AUTHOR\\n\\t\\t$order: OrderEnum = ASC\\n\\t) {\\n\\t\\tposts(\\n\\t\\t\\twhere: {\\n\\t\\t\\t\\tauthorIn: $authorIn\\n\\t\\t\\t\\tcategoryIn: $categoryIn\\n\\t\\t\\t\\ttagIn: $tagIn\\n\\t\\t\\t\\tsearch: $search\\n\\t\\t\\t\\tparentIn: $parentIn\\n\\t\\t\\t\\torderby: { field: $field, order: $order }\\n\\t\\t\\t}\\n\\t\\t\\tfirst: $first\\n\\t\\t) {\\n\\t\\t\\t...NcmazFcPostsEdegsFields\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tquery postsWithVariablesQuery(\\n\\t\\t$authorIn: [ID] = \\\"\\\"\\n\\t\\t$categoryIn: [ID] = \\\"\\\"\\n\\t\\t$tagIn: [ID] = \\\"\\\"\\n\\t\\t$search: String = \\\"\\\"\\n\\t\\t$parentIn: [ID] = \\\"\\\"\\n\\t\\t$first: Int = 10\\n\\t\\t$field: PostObjectsConnectionOrderbyEnum = AUTHOR\\n\\t\\t$order: OrderEnum = ASC\\n\\t) {\\n\\t\\tposts(\\n\\t\\t\\twhere: {\\n\\t\\t\\t\\tauthorIn: $authorIn\\n\\t\\t\\t\\tcategoryIn: $categoryIn\\n\\t\\t\\t\\ttagIn: $tagIn\\n\\t\\t\\t\\tsearch: $search\\n\\t\\t\\t\\tparentIn: $parentIn\\n\\t\\t\\t\\torderby: { field: $field, order: $order }\\n\\t\\t\\t}\\n\\t\\t\\tfirst: $first\\n\\t\\t) {\\n\\t\\t\\t...NcmazFcPostsEdegsFields\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n\\tquery termsWithVariablesQuery(\\n\\t\\t$first: Int = 10\\n\\t\\t$order: OrderEnum = ASC\\n\\t\\t$orderby: TermObjectsConnectionOrderbyEnum = COUNT\\n\\t\\t$taxonomies: [TaxonomyEnum] = CATEGORY\\n\\t) {\\n\\t\\tterms(\\n\\t\\t\\twhere: { taxonomies: $taxonomies, orderby: $orderby, order: $order }\\n\\t\\t\\tfirst: $first\\n\\t\\t) {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t__typename\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tcount\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t\\tdatabaseId\\n\\t\\t\\t\\t\\tdescription\\n\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\ttaxonomyName\\n\\t\\t\\t\\t\\t... on Category {\\n\\t\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t... on Tag {\\n\\t\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tquery termsWithVariablesQuery(\\n\\t\\t$first: Int = 10\\n\\t\\t$order: OrderEnum = ASC\\n\\t\\t$orderby: TermObjectsConnectionOrderbyEnum = COUNT\\n\\t\\t$taxonomies: [TaxonomyEnum] = CATEGORY\\n\\t) {\\n\\t\\tterms(\\n\\t\\t\\twhere: { taxonomies: $taxonomies, orderby: $orderby, order: $order }\\n\\t\\t\\tfirst: $first\\n\\t\\t) {\\n\\t\\t\\tedges {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t__typename\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tcount\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tslug\\n\\t\\t\\t\\t\\tdatabaseId\\n\\t\\t\\t\\t\\tdescription\\n\\t\\t\\t\\t\\tlink\\n\\t\\t\\t\\t\\ttaxonomyName\\n\\t\\t\\t\\t\\t... on Category {\\n\\t\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t... on Tag {\\n\\t\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\tncTaxonomyMeta {\\n\\t\\t\\t\\t\\t\\t\\tcolor\\n\\t\\t\\t\\t\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n\nexport function graphql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;","/* eslint-disable */\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  /** Generic Object Scalar Type */\n  BlockAttributesObject: { input: any; output: any; }\n};\n\n/** A Field Group registered by ACF */\nexport type AcfFieldGroup = {\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */\nexport type Avatar = {\n  __typename?: 'Avatar';\n  /** URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */\n  default?: Maybe<Scalars['String']['output']>;\n  /** HTML attributes to insert in the IMG element. Is not sanitized. */\n  extraAttr?: Maybe<Scalars['String']['output']>;\n  /** Whether to always show the default image, never the Gravatar. */\n  forceDefault?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the avatar was successfully found. */\n  foundAvatar?: Maybe<Scalars['Boolean']['output']>;\n  /** Height of the avatar image. */\n  height?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */\n  rating?: Maybe<Scalars['String']['output']>;\n  /** Type of url scheme to use. Typically HTTP vs. HTTPS. */\n  scheme?: Maybe<Scalars['String']['output']>;\n  /** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */\n  size?: Maybe<Scalars['Int']['output']>;\n  /** URL for the gravatar image source. */\n  url?: Maybe<Scalars['String']['output']>;\n  /** Width of the avatar image. */\n  width?: Maybe<Scalars['Int']['output']>;\n};\n\n/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */\nexport enum AvatarRatingEnum {\n  /** Indicates a G level avatar rating level. */\n  G = 'G',\n  /** Indicates a PG level avatar rating level. */\n  Pg = 'PG',\n  /** Indicates an R level avatar rating level. */\n  R = 'R',\n  /** Indicates an X level avatar rating level. */\n  X = 'X'\n}\n\n/** Block that supports Anchor field */\nexport type BlockWithSupportsAnchor = {\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The category type */\nexport type Category = DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {\n  __typename?: 'Category';\n  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<CategoryToAncestorsCategoryConnection>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  categoryId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the category type and its children categories. */\n  children?: Maybe<CategoryToCategoryConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the Category type and the ContentNode type */\n  contentNodes?: Maybe<CategoryToContentNodeConnection>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Ncmaz Taxonomy Meta&quot; was set to Show in GraphQL. */\n  ncTaxonomyMeta?: Maybe<Category_Nctaxonomymeta>;\n  /** Connection between the category type and its parent category. */\n  parent?: Maybe<CategoryToParentCategoryConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Category type and the post type */\n  posts?: Maybe<CategoryToPostConnection>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Category type and the Taxonomy type */\n  taxonomy?: Maybe<CategoryToTaxonomyConnectionEdge>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The category type */\nexport type CategoryAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The category type */\nexport type CategoryChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CategoryToCategoryConnectionWhereArgs>;\n};\n\n\n/** The category type */\nexport type CategoryContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CategoryToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The category type */\nexport type CategoryEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The category type */\nexport type CategoryEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The category type */\nexport type CategoryPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CategoryToPostConnectionWhereArgs>;\n};\n\n/** Connection to category Nodes */\nexport type CategoryConnection = {\n  /** A list of edges (relational context) between RootQuery and connected category Nodes */\n  edges: Array<CategoryConnectionEdge>;\n  /** A list of connected category Nodes */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected category */\nexport type CategoryConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected category Node */\n  node: Category;\n};\n\n/** Page Info on the connected CategoryConnectionEdge */\nexport type CategoryConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum CategoryIdType {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the Category type and the category type */\nexport type CategoryToAncestorsCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'CategoryToAncestorsCategoryConnection';\n  /** Edges for the CategoryToAncestorsCategoryConnection connection */\n  edges: Array<CategoryToAncestorsCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToAncestorsCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToAncestorsCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'CategoryToAncestorsCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot; */\nexport type CategoryToAncestorsCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CategoryToAncestorsCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the Category type and the category type */\nexport type CategoryToCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'CategoryToCategoryConnection';\n  /** Edges for the CategoryToCategoryConnection connection */\n  edges: Array<CategoryToCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'CategoryToCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;CategoryToCategoryConnection&quot; */\nexport type CategoryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CategoryToCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CategoryToCategoryConnection connection */\nexport type CategoryToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Category type and the ContentNode type */\nexport type CategoryToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'CategoryToContentNodeConnection';\n  /** Edges for the CategoryToContentNodeConnection connection */\n  edges: Array<CategoryToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'CategoryToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;CategoryToContentNodeConnection&quot; */\nexport type CategoryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CategoryToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CategoryToContentNodeConnection connection */\nexport type CategoryToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfCategoryEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Category type and the category type */\nexport type CategoryToParentCategoryConnectionEdge = CategoryConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CategoryToParentCategoryConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Category;\n};\n\n/** Connection between the Category type and the post type */\nexport type CategoryToPostConnection = Connection & PostConnection & {\n  __typename?: 'CategoryToPostConnection';\n  /** Edges for the CategoryToPostConnection connection */\n  edges: Array<CategoryToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'CategoryToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;CategoryToPostConnection&quot; */\nexport type CategoryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'CategoryToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CategoryToPostConnection connection */\nexport type CategoryToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Category type and the Taxonomy type */\nexport type CategoryToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {\n  __typename?: 'CategoryToTaxonomyConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Taxonomy;\n};\n\n/** Field Group */\nexport type Category_Nctaxonomymeta = AcfFieldGroup & {\n  __typename?: 'Category_Nctaxonomymeta';\n  color?: Maybe<Scalars['String']['output']>;\n  featuredImage?: Maybe<MediaItem>;\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** A Comment object */\nexport type Comment = DatabaseIdentifier & Node & {\n  __typename?: 'Comment';\n  /** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */\n  agent?: Maybe<Scalars['String']['output']>;\n  /**\n   * The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.\n   * @deprecated Deprecated in favor of the `status` field\n   */\n  approved?: Maybe<Scalars['Boolean']['output']>;\n  /** The author of the comment */\n  author?: Maybe<CommentToCommenterConnectionEdge>;\n  /** IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */\n  authorIp?: Maybe<Scalars['String']['output']>;\n  /**\n   * ID for the comment, unique among comments.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  commentId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Comment type and the ContentNode type */\n  commentedOn?: Maybe<CommentToContentNodeConnectionEdge>;\n  /** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the comment object */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */\n  karma?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Comment type and the Comment type */\n  parent?: Maybe<CommentToParentCommentConnectionEdge>;\n  /** The database id of the parent comment node or null if it is the root comment */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent comment node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Comment type and the Comment type */\n  replies?: Maybe<CommentToCommentConnection>;\n  /** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */\n  status?: Maybe<CommentStatusEnum>;\n  /** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A Comment object */\nexport type CommentContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** A Comment object */\nexport type CommentParentArgs = {\n  where?: InputMaybe<CommentToParentCommentConnectionWhereArgs>;\n};\n\n\n/** A Comment object */\nexport type CommentRepliesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CommentToCommentConnectionWhereArgs>;\n};\n\n/** A Comment Author object */\nexport type CommentAuthor = Commenter & DatabaseIdentifier & Node & {\n  __typename?: 'CommentAuthor';\n  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */\n  avatar?: Maybe<Avatar>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The email for the comment author */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the comment author object */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The name for the comment author. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url the comment author. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A Comment Author object */\nexport type CommentAuthorAvatarArgs = {\n  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;\n  rating?: InputMaybe<AvatarRatingEnum>;\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to Comment Nodes */\nexport type CommentConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Comment Nodes */\n  edges: Array<CommentConnectionEdge>;\n  /** A list of connected Comment Nodes */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: CommentConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Comment */\nexport type CommentConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Comment Node */\n  node: Comment;\n};\n\n/** Page Info on the connected CommentConnectionEdge */\nexport type CommentConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single comment node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum CommentNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID'\n}\n\n/** The status of the comment object. */\nexport enum CommentStatusEnum {\n  /** Comments with the Approved status */\n  Approve = 'APPROVE',\n  /** Comments with the Unapproved status */\n  Hold = 'HOLD',\n  /** Comments with the Spam status */\n  Spam = 'SPAM',\n  /** Comments with the Trash status */\n  Trash = 'TRASH'\n}\n\n/** Connection between the Comment type and the Comment type */\nexport type CommentToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'CommentToCommentConnection';\n  /** Edges for the CommentToCommentConnection connection */\n  edges: Array<CommentToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: CommentToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CommentToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'CommentToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;CommentToCommentConnection&quot; */\nexport type CommentToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CommentToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CommentToCommentConnection connection */\nexport type CommentToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the Comment type and the Commenter type */\nexport type CommentToCommenterConnectionEdge = CommenterConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CommentToCommenterConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Commenter;\n};\n\n/** Connection between the Comment type and the ContentNode type */\nexport type CommentToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CommentToContentNodeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentNode;\n};\n\n/** Connection between the Comment type and the Comment type */\nexport type CommentToParentCommentConnectionEdge = CommentConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CommentToParentCommentConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Comment;\n};\n\n/** Arguments for filtering the CommentToParentCommentConnection connection */\nexport type CommentToParentCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The author of a comment */\nexport type Commenter = {\n  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */\n  avatar?: Maybe<Avatar>;\n  /** Identifies the primary key from the database. */\n  databaseId: Scalars['Int']['output'];\n  /** The email address of the author of a comment. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the comment author. */\n  id: Scalars['ID']['output'];\n  /** Whether the author information is considered restricted. (not fully public) */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The name of the author of a comment. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url of the author of a comment. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** Edge between a Node and a connected Commenter */\nexport type CommenterConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Commenter Node */\n  node: Commenter;\n};\n\n/** Options for ordering the connection */\nexport enum CommentsConnectionOrderbyEnum {\n  /** Order by browser user agent of the commenter. */\n  CommentAgent = 'COMMENT_AGENT',\n  /** Order by approval status of the comment. */\n  CommentApproved = 'COMMENT_APPROVED',\n  /** Order by name of the comment author. */\n  CommentAuthor = 'COMMENT_AUTHOR',\n  /** Order by e-mail of the comment author. */\n  CommentAuthorEmail = 'COMMENT_AUTHOR_EMAIL',\n  /** Order by IP address of the comment author. */\n  CommentAuthorIp = 'COMMENT_AUTHOR_IP',\n  /** Order by URL address of the comment author. */\n  CommentAuthorUrl = 'COMMENT_AUTHOR_URL',\n  /** Order by the comment contents. */\n  CommentContent = 'COMMENT_CONTENT',\n  /** Order by date/time timestamp of the comment. */\n  CommentDate = 'COMMENT_DATE',\n  /** Order by GMT timezone date/time timestamp of the comment. */\n  CommentDateGmt = 'COMMENT_DATE_GMT',\n  /** Order by the globally unique identifier for the comment object */\n  CommentId = 'COMMENT_ID',\n  /** Order by the array list of comment IDs listed in the where clause. */\n  CommentIn = 'COMMENT_IN',\n  /** Order by the comment karma score. */\n  CommentKarma = 'COMMENT_KARMA',\n  /** Order by the comment parent ID. */\n  CommentParent = 'COMMENT_PARENT',\n  /** Order by the post object ID. */\n  CommentPostId = 'COMMENT_POST_ID',\n  /** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */\n  CommentType = 'COMMENT_TYPE',\n  /** Order by the user ID. */\n  UserId = 'USER_ID'\n}\n\n/** GraphQL representation of WordPress Conditional Tags. */\nexport type ConditionalTags = {\n  __typename?: 'ConditionalTags';\n  /**\n   * Determines whether the query is for an existing archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isArchive?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing attachment page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isAttachment?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing author archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing category archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isCategory?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing date archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isDate?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing day archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isDay?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for the front page of the site.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isFrontPage?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for the blog homepage.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isHome?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing month archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isMonth?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether this site has more than one author.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isMultiAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing single page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPage?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether currently in a page template.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPageTemplate?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing post type archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPostTypeArchive?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for a post or page preview.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for the Privacy Policy page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPrivacyPolicy?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for a search.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSearch?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing single post.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSingle?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing single post of any post type (post, attachment, page, custom post types).\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSingular?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether a post is sticky.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSticky?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing tag archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isTag?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing custom taxonomy archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isTax?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing year archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isYear?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A plural connection from one Node Type in the Graph to another Node Type, with support for relational data via &quot;edges&quot;. */\nexport type Connection = {\n  /** A list of edges (relational context) between connected nodes */\n  edges: Array<Edge>;\n  /** A list of connected nodes */\n  nodes: Array<Node>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** Nodes used to manage content */\nexport type ContentNode = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The ID of the node in the database. */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Nodes used to manage content */\nexport type ContentNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Nodes used to manage content */\nexport type ContentNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to ContentNode Nodes */\nexport type ContentNodeConnection = {\n  /** A list of edges (relational context) between ContentType and connected ContentNode Nodes */\n  edges: Array<ContentNodeConnectionEdge>;\n  /** A list of connected ContentNode Nodes */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentNodeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected ContentNode */\nexport type ContentNodeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected ContentNode Node */\n  node: ContentNode;\n};\n\n/** Page Info on the connected ContentNodeConnectionEdge */\nexport type ContentNodeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum ContentNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Connection between the ContentNode type and the ContentType type */\nexport type ContentNodeToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'ContentNodeToContentTypeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentType;\n};\n\n/** Connection between the ContentNode type and the User type */\nexport type ContentNodeToEditLastConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {\n  __typename?: 'ContentNodeToEditLastConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: User;\n};\n\n/** Connection between the ContentNode type and the User type */\nexport type ContentNodeToEditLockConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {\n  __typename?: 'ContentNodeToEditLockConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The timestamp for when the node was last edited */\n  lockTimestamp?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: User;\n};\n\n/** Connection between the ContentNode type and the EnqueuedScript type */\nexport type ContentNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'ContentNodeToEnqueuedScriptConnection';\n  /** Edges for the ContentNodeToEnqueuedScriptConnection connection */\n  edges: Array<ContentNodeToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'ContentNodeToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;ContentNodeToEnqueuedScriptConnection&quot; */\nexport type ContentNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'ContentNodeToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the ContentNode type and the EnqueuedStylesheet type */\nexport type ContentNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'ContentNodeToEnqueuedStylesheetConnection';\n  /** Edges for the ContentNodeToEnqueuedStylesheetConnection connection */\n  edges: Array<ContentNodeToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;ContentNodeToEnqueuedStylesheetConnection&quot; */\nexport type ContentNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to a node of content */\nexport type ContentTemplate = {\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** An Post Type object */\nexport type ContentType = Node & UniformResourceIdentifiable & {\n  __typename?: 'ContentType';\n  /** Whether this content type should can be exported. */\n  canExport?: Maybe<Scalars['Boolean']['output']>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentType type and the Taxonomy type */\n  connectedTaxonomies?: Maybe<ContentTypeToTaxonomyConnection>;\n  /** Connection between the ContentType type and the ContentNode type */\n  contentNodes?: Maybe<ContentTypeToContentNodeConnection>;\n  /** Whether content of this type should be deleted when the author of it is deleted from the system. */\n  deleteWithUser?: Maybe<Scalars['Boolean']['output']>;\n  /** Description of the content type. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Whether to exclude nodes of this content type from front end search results. */\n  excludeFromSearch?: Maybe<Scalars['Boolean']['output']>;\n  /** The plural name of the content type within the GraphQL Schema. */\n  graphqlPluralName?: Maybe<Scalars['String']['output']>;\n  /** The singular name of the content type within the GraphQL Schema. */\n  graphqlSingleName?: Maybe<Scalars['String']['output']>;\n  /** Whether this content type should have archives. Content archives are generated by type and by date. */\n  hasArchive?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the content type is hierarchical, for example pages. */\n  hierarchical?: Maybe<Scalars['Boolean']['output']>;\n  /** The globally unique identifier of the post-type object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether this page is set to the static front page. */\n  isFrontPage: Scalars['Boolean']['output'];\n  /** Whether this page is set to the blog posts page. */\n  isPostsPage: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** Display name of the content type. */\n  label?: Maybe<Scalars['String']['output']>;\n  /** Details about the content type labels. */\n  labels?: Maybe<PostTypeLabelDetails>;\n  /** The name of the icon file to display as a menu icon. */\n  menuIcon?: Maybe<Scalars['String']['output']>;\n  /** The position of this post type in the menu. Only applies if show_in_menu is true. */\n  menuPosition?: Maybe<Scalars['Int']['output']>;\n  /** The internal name of the post type. This should not be used for display purposes. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */\n  public?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether queries can be performed on the front end for the content type as part of parse_request(). */\n  publiclyQueryable?: Maybe<Scalars['Boolean']['output']>;\n  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */\n  restBase?: Maybe<Scalars['String']['output']>;\n  /** The REST Controller class assigned to handling this content type. */\n  restControllerClass?: Maybe<Scalars['String']['output']>;\n  /** Makes this content type available via the admin bar. */\n  showInAdminBar?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to add the content type to the GraphQL Schema. */\n  showInGraphql?: Maybe<Scalars['Boolean']['output']>;\n  /** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */\n  showInMenu?: Maybe<Scalars['Boolean']['output']>;\n  /** Makes this content type available for selection in navigation menus. */\n  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */\n  showInRest?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to generate and allow a UI for managing this content type in the admin. */\n  showUi?: Maybe<Scalars['Boolean']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** An Post Type object */\nexport type ContentTypeConnectedTaxonomiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Post Type object */\nexport type ContentTypeContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<ContentTypeToContentNodeConnectionWhereArgs>;\n};\n\n/** Connection to ContentType Nodes */\nexport type ContentTypeConnection = {\n  /** A list of edges (relational context) between RootQuery and connected ContentType Nodes */\n  edges: Array<ContentTypeConnectionEdge>;\n  /** A list of connected ContentType Nodes */\n  nodes: Array<ContentType>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentTypeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected ContentType */\nexport type ContentTypeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected ContentType Node */\n  node: ContentType;\n};\n\n/** Page Info on the connected ContentTypeConnectionEdge */\nexport type ContentTypeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Allowed Content Types */\nexport enum ContentTypeEnum {\n  /** The Type of Content object */\n  Attachment = 'ATTACHMENT',\n  /** The Type of Content object */\n  Page = 'PAGE',\n  /** The Type of Content object */\n  Post = 'POST'\n}\n\n/** The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum ContentTypeIdTypeEnum {\n  /** The globally unique ID */\n  Id = 'ID',\n  /** The name of the content type. */\n  Name = 'NAME'\n}\n\n/** Connection between the ContentType type and the ContentNode type */\nexport type ContentTypeToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'ContentTypeToContentNodeConnection';\n  /** Edges for the ContentTypeToContentNodeConnection connection */\n  edges: Array<ContentTypeToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentTypeToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentTypeToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'ContentTypeToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;ContentTypeToContentNodeConnection&quot; */\nexport type ContentTypeToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'ContentTypeToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the ContentTypeToContentNodeConnection connection */\nexport type ContentTypeToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the ContentType type and the Taxonomy type */\nexport type ContentTypeToTaxonomyConnection = Connection & TaxonomyConnection & {\n  __typename?: 'ContentTypeToTaxonomyConnection';\n  /** Edges for the ContentTypeToTaxonomyConnection connection */\n  edges: Array<ContentTypeToTaxonomyConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Taxonomy>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentTypeToTaxonomyConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentTypeToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {\n  __typename?: 'ContentTypeToTaxonomyConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Taxonomy;\n};\n\n/** Page Info on the &quot;ContentTypeToTaxonomyConnection&quot; */\nexport type ContentTypeToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {\n  __typename?: 'ContentTypeToTaxonomyConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Allowed Content Types of the Category taxonomy. */\nexport enum ContentTypesOfCategoryEnum {\n  /** The Type of Content object */\n  Post = 'POST'\n}\n\n/** Allowed Content Types of the PostFormat taxonomy. */\nexport enum ContentTypesOfPostFormatEnum {\n  /** The Type of Content object */\n  Post = 'POST'\n}\n\n/** Allowed Content Types of the Tag taxonomy. */\nexport enum ContentTypesOfTagEnum {\n  /** The Type of Content object */\n  Post = 'POST'\n}\n\n/** A block used for editing the site */\nexport type CoreArchives = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreArchives';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreArchives Block Type */\n  attributes?: Maybe<CoreArchivesAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreArchives Block Type */\nexport type CoreArchivesAttributes = {\n  __typename?: 'CoreArchivesAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreArchives&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreArchives&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayAsDropdown&quot; field on the &quot;CoreArchives&quot; block */\n  displayAsDropdown?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreArchives&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreArchives&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreArchives&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showLabel&quot; field on the &quot;CoreArchives&quot; block */\n  showLabel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showPostCounts&quot; field on the &quot;CoreArchives&quot; block */\n  showPostCounts?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreArchives&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreArchives&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreAudio = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreAudio';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreAudio Block Type */\n  attributes?: Maybe<CoreAudioAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreAudio Block Type */\nexport type CoreAudioAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreAudioAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreAudio&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;autoplay&quot; field on the &quot;CoreAudio&quot; block */\n  autoplay?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreAudio&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreAudio&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreAudio&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreAudio&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;loop&quot; field on the &quot;CoreAudio&quot; block */\n  loop?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;preload&quot; field on the &quot;CoreAudio&quot; block */\n  preload?: Maybe<Scalars['String']['output']>;\n  /** The &quot;src&quot; field on the &quot;CoreAudio&quot; block */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreAudio&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreAvatar = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreAvatar';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreAvatar Block Type */\n  attributes?: Maybe<CoreAvatarAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreAvatar Block Type */\nexport type CoreAvatarAttributes = {\n  __typename?: 'CoreAvatarAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreAvatar&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreAvatar&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreAvatar&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreAvatar&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreAvatar&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreAvatar&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;size&quot; field on the &quot;CoreAvatar&quot; block */\n  size?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreAvatar&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;userId&quot; field on the &quot;CoreAvatar&quot; block */\n  userId?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreBlock = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreBlock';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreBlock Block Type */\n  attributes?: Maybe<CoreBlockAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreBlock Block Type */\nexport type CoreBlockAttributes = {\n  __typename?: 'CoreBlockAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreBlock&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;ref&quot; field on the &quot;CoreBlock&quot; block */\n  ref?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreButton = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreButton';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreButton Block Type */\n  attributes?: Maybe<CoreButtonAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreButton Block Type */\nexport type CoreButtonAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreButtonAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreButton&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreButton&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreButton&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreButton&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreButton&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreButton&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkClassName&quot; field on the &quot;CoreButton&quot; block */\n  linkClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreButton&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreButton&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreButton&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreButton&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreButton&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;text&quot; field on the &quot;CoreButton&quot; block */\n  text?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreButton&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreButton&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreButton&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreButton&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreButton&quot; block */\n  width?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreButtons = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreButtons';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreButtons Block Type */\n  attributes?: Maybe<CoreButtonsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreButtons Block Type */\nexport type CoreButtonsAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreButtonsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreButtons&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreButtons&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreButtons&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreButtons&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreButtons&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreButtons&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreButtons&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreButtons&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCalendar = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCalendar';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCalendar Block Type */\n  attributes?: Maybe<CoreCalendarAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCalendar Block Type */\nexport type CoreCalendarAttributes = {\n  __typename?: 'CoreCalendarAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCalendar&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCalendar&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCalendar&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCalendar&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCalendar&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCalendar&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;month&quot; field on the &quot;CoreCalendar&quot; block */\n  month?: Maybe<Scalars['Int']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCalendar&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCalendar&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;year&quot; field on the &quot;CoreCalendar&quot; block */\n  year?: Maybe<Scalars['Int']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCategories = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCategories';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCategories Block Type */\n  attributes?: Maybe<CoreCategoriesAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCategories Block Type */\nexport type CoreCategoriesAttributes = {\n  __typename?: 'CoreCategoriesAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCategories&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCategories&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayAsDropdown&quot; field on the &quot;CoreCategories&quot; block */\n  displayAsDropdown?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCategories&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCategories&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCategories&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showEmpty&quot; field on the &quot;CoreCategories&quot; block */\n  showEmpty?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showHierarchy&quot; field on the &quot;CoreCategories&quot; block */\n  showHierarchy?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showOnlyTopLevel&quot; field on the &quot;CoreCategories&quot; block */\n  showOnlyTopLevel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showPostCounts&quot; field on the &quot;CoreCategories&quot; block */\n  showPostCounts?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCategories&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCode = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCode';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCode Block Type */\n  attributes?: Maybe<CoreCodeAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCode Block Type */\nexport type CoreCodeAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreCodeAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCode&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreCode&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCode&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreCode&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreCode&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCode&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCode&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCode&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCode&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCode&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCode&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreColumn = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreColumn';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreColumn Block Type */\n  attributes?: Maybe<CoreColumnAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreColumn Block Type */\nexport type CoreColumnAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreColumnAttributes';\n  /** The &quot;allowedBlocks&quot; field on the &quot;CoreColumn&quot; block */\n  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreColumn&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreColumn&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreColumn&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreColumn&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreColumn&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreColumn&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreColumn&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreColumn&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreColumn&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreColumn&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreColumn&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;verticalAlignment&quot; field on the &quot;CoreColumn&quot; block */\n  verticalAlignment?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreColumn&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreColumns = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreColumns';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreColumns Block Type */\n  attributes?: Maybe<CoreColumnsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreColumns Block Type */\nexport type CoreColumnsAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreColumnsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreColumns&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreColumns&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreColumns&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreColumns&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreColumns&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreColumns&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreColumns&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreColumns&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isStackedOnMobile&quot; field on the &quot;CoreColumns&quot; block */\n  isStackedOnMobile?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreColumns&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreColumns&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreColumns&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreColumns&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;verticalAlignment&quot; field on the &quot;CoreColumns&quot; block */\n  verticalAlignment?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentAuthorName = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentAuthorName';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentAuthorName Block Type */\n  attributes?: Maybe<CoreCommentAuthorNameAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentAuthorName Block Type */\nexport type CoreCommentAuthorNameAttributes = {\n  __typename?: 'CoreCommentAuthorNameAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentContent = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentContent';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentContent Block Type */\n  attributes?: Maybe<CoreCommentContentAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentContent Block Type */\nexport type CoreCommentContentAttributes = {\n  __typename?: 'CoreCommentContentAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentContent&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentContent&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentContent&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentContent&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentContent&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentContent&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentContent&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentContent&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentContent&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentDate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentDate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentDate Block Type */\n  attributes?: Maybe<CoreCommentDateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentDate Block Type */\nexport type CoreCommentDateAttributes = {\n  __typename?: 'CoreCommentDateAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentDate&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentDate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentDate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentDate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;format&quot; field on the &quot;CoreCommentDate&quot; block */\n  format?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentDate&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreCommentDate&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentDate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentDate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentDate&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentEditLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentEditLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentEditLink Block Type */\n  attributes?: Maybe<CoreCommentEditLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentEditLink Block Type */\nexport type CoreCommentEditLinkAttributes = {\n  __typename?: 'CoreCommentEditLinkAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentReplyLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentReplyLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentReplyLink Block Type */\n  attributes?: Maybe<CoreCommentReplyLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentReplyLink Block Type */\nexport type CoreCommentReplyLinkAttributes = {\n  __typename?: 'CoreCommentReplyLinkAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentTemplate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentTemplate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentTemplate Block Type */\n  attributes?: Maybe<CoreCommentTemplateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentTemplate Block Type */\nexport type CoreCommentTemplateAttributes = {\n  __typename?: 'CoreCommentTemplateAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreComments = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreComments';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreComments Block Type */\n  attributes?: Maybe<CoreCommentsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreComments Block Type */\nexport type CoreCommentsAttributes = {\n  __typename?: 'CoreCommentsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreComments&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreComments&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreComments&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreComments&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreComments&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreComments&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;legacy&quot; field on the &quot;CoreComments&quot; block */\n  legacy?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreComments&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreComments&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreComments&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreComments&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPagination = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPagination';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPagination Block Type */\n  attributes?: Maybe<CoreCommentsPaginationAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPagination Block Type */\nexport type CoreCommentsPaginationAttributes = {\n  __typename?: 'CoreCommentsPaginationAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;paginationArrow&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  paginationArrow?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPaginationNext = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPaginationNext';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPaginationNext Block Type */\n  attributes?: Maybe<CoreCommentsPaginationNextAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPaginationNext Block Type */\nexport type CoreCommentsPaginationNextAttributes = {\n  __typename?: 'CoreCommentsPaginationNextAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPaginationNumbers = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPaginationNumbers';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPaginationNumbers Block Type */\n  attributes?: Maybe<CoreCommentsPaginationNumbersAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPaginationNumbers Block Type */\nexport type CoreCommentsPaginationNumbersAttributes = {\n  __typename?: 'CoreCommentsPaginationNumbersAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPaginationPrevious = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPaginationPrevious';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPaginationPrevious Block Type */\n  attributes?: Maybe<CoreCommentsPaginationPreviousAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPaginationPrevious Block Type */\nexport type CoreCommentsPaginationPreviousAttributes = {\n  __typename?: 'CoreCommentsPaginationPreviousAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsTitle Block Type */\n  attributes?: Maybe<CoreCommentsTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsTitle Block Type */\nexport type CoreCommentsTitleAttributes = {\n  __typename?: 'CoreCommentsTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showCommentsCount&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  showCommentsCount?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showPostTitle&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  showPostTitle?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCover = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCover';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCover Block Type */\n  attributes?: Maybe<CoreCoverAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCover Block Type */\nexport type CoreCoverAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreCoverAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCover&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowedBlocks&quot; field on the &quot;CoreCover&quot; block */\n  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;alt&quot; field on the &quot;CoreCover&quot; block */\n  alt?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundType&quot; field on the &quot;CoreCover&quot; block */\n  backgroundType?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCover&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;contentPosition&quot; field on the &quot;CoreCover&quot; block */\n  contentPosition?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customGradient&quot; field on the &quot;CoreCover&quot; block */\n  customGradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayColor&quot; field on the &quot;CoreCover&quot; block */\n  customOverlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;dimRatio&quot; field on the &quot;CoreCover&quot; block */\n  dimRatio?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;focalPoint&quot; field on the &quot;CoreCover&quot; block */\n  focalPoint?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCover&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCover&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCover&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasParallax&quot; field on the &quot;CoreCover&quot; block */\n  hasParallax?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreCover&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;isDark&quot; field on the &quot;CoreCover&quot; block */\n  isDark?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;isRepeated&quot; field on the &quot;CoreCover&quot; block */\n  isRepeated?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCover&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;minHeight&quot; field on the &quot;CoreCover&quot; block */\n  minHeight?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;minHeightUnit&quot; field on the &quot;CoreCover&quot; block */\n  minHeightUnit?: Maybe<Scalars['String']['output']>;\n  /** The &quot;overlayColor&quot; field on the &quot;CoreCover&quot; block */\n  overlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCover&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreCover&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreCover&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n  /** The &quot;useFeaturedImage&quot; field on the &quot;CoreCover&quot; block */\n  useFeaturedImage?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreEmbed = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreEmbed';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreEmbed Block Type */\n  attributes?: Maybe<CoreEmbedAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreEmbed Block Type */\nexport type CoreEmbedAttributes = {\n  __typename?: 'CoreEmbedAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreEmbed&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowResponsive&quot; field on the &quot;CoreEmbed&quot; block */\n  allowResponsive?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreEmbed&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreEmbed&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreEmbed&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;previewable&quot; field on the &quot;CoreEmbed&quot; block */\n  previewable?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;providerNameSlug&quot; field on the &quot;CoreEmbed&quot; block */\n  providerNameSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;responsive&quot; field on the &quot;CoreEmbed&quot; block */\n  responsive?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreEmbed&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreEmbed&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreFile = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreFile';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreFile Block Type */\n  attributes?: Maybe<CoreFileAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreFile Block Type */\nexport type CoreFileAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreFileAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreFile&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreFile&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayPreview&quot; field on the &quot;CoreFile&quot; block */\n  displayPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;downloadButtonText&quot; field on the &quot;CoreFile&quot; block */\n  downloadButtonText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fileId&quot; field on the &quot;CoreFile&quot; block */\n  fileId?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fileName&quot; field on the &quot;CoreFile&quot; block */\n  fileName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;href&quot; field on the &quot;CoreFile&quot; block */\n  href?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreFile&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreFile&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;previewHeight&quot; field on the &quot;CoreFile&quot; block */\n  previewHeight?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;showDownloadButton&quot; field on the &quot;CoreFile&quot; block */\n  showDownloadButton?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;textLinkHref&quot; field on the &quot;CoreFile&quot; block */\n  textLinkHref?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textLinkTarget&quot; field on the &quot;CoreFile&quot; block */\n  textLinkTarget?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreFreeform = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreFreeform';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreFreeform Block Type */\n  attributes?: Maybe<CoreFreeformAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreFreeform Block Type */\nexport type CoreFreeformAttributes = {\n  __typename?: 'CoreFreeformAttributes';\n  /** The &quot;content&quot; field on the &quot;CoreFreeform&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreFreeform&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreGallery = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreGallery';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreGallery Block Type */\n  attributes?: Maybe<CoreGalleryAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreGallery Block Type */\nexport type CoreGalleryAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreGalleryAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreGallery&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowResize&quot; field on the &quot;CoreGallery&quot; block */\n  allowResize?: Maybe<Scalars['Boolean']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreGallery&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreGallery&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreGallery&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreGallery&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;fixedHeight&quot; field on the &quot;CoreGallery&quot; block */\n  fixedHeight?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreGallery&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;ids&quot; field on the &quot;CoreGallery&quot; block */\n  ids?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;imageCrop&quot; field on the &quot;CoreGallery&quot; block */\n  imageCrop?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;images&quot; field on the &quot;CoreGallery&quot; block */\n  images?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreGallery&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreGallery&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTo&quot; field on the &quot;CoreGallery&quot; block */\n  linkTo?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreGallery&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;shortCodeTransforms&quot; field on the &quot;CoreGallery&quot; block */\n  shortCodeTransforms?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;sizeSlug&quot; field on the &quot;CoreGallery&quot; block */\n  sizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreGallery&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreGroup = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreGroup';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreGroup Block Type */\n  attributes?: Maybe<CoreGroupAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreGroup Block Type */\nexport type CoreGroupAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreGroupAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreGroup&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreGroup&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreGroup&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreGroup&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreGroup&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreGroup&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreGroup&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreGroup&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreGroup&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreGroup&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreGroup&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreGroup&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreHeading = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreHeading';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreHeading Block Type */\n  attributes?: Maybe<CoreHeadingAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreHeading Block Type */\nexport type CoreHeadingAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreHeadingAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreHeading&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreHeading&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreHeading&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreHeading&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreHeading&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreHeading&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreHeading&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreHeading&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreHeading&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreHeading&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreHeading&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreHeading&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreHeading&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreHeading&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreHomeLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreHomeLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreHomeLink Block Type */\n  attributes?: Maybe<CoreHomeLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreHomeLink Block Type */\nexport type CoreHomeLinkAttributes = {\n  __typename?: 'CoreHomeLinkAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreHomeLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreHomeLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreHomeLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreHomeLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreHomeLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreHomeLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreHtml = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreHtml';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreHtml Block Type */\n  attributes?: Maybe<CoreHtmlAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreHtml Block Type */\nexport type CoreHtmlAttributes = {\n  __typename?: 'CoreHtmlAttributes';\n  /** The &quot;content&quot; field on the &quot;CoreHtml&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreHtml&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreImage = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreImage';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreImage Block Type */\n  attributes?: Maybe<CoreImageAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreImage Block Type */\nexport type CoreImageAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreImageAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreImage&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;alt&quot; field on the &quot;CoreImage&quot; block */\n  alt?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreImage&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreImage&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreImage&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreImage&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;height&quot; field on the &quot;CoreImage&quot; block */\n  height?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;href&quot; field on the &quot;CoreImage&quot; block */\n  href?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreImage&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;linkClass&quot; field on the &quot;CoreImage&quot; block */\n  linkClass?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkDestination&quot; field on the &quot;CoreImage&quot; block */\n  linkDestination?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreImage&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreImage&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreImage&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;sizeSlug&quot; field on the &quot;CoreImage&quot; block */\n  sizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;src&quot; field on the &quot;CoreImage&quot; block */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreImage&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreImage&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreImage&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreImage&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLatestComments = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLatestComments';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLatestComments Block Type */\n  attributes?: Maybe<CoreLatestCommentsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLatestComments Block Type */\nexport type CoreLatestCommentsAttributes = {\n  __typename?: 'CoreLatestCommentsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreLatestComments&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreLatestComments&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;commentsToShow&quot; field on the &quot;CoreLatestComments&quot; block */\n  commentsToShow?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;displayAvatar&quot; field on the &quot;CoreLatestComments&quot; block */\n  displayAvatar?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayDate&quot; field on the &quot;CoreLatestComments&quot; block */\n  displayDate?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayExcerpt&quot; field on the &quot;CoreLatestComments&quot; block */\n  displayExcerpt?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLatestComments&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreLatestComments&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLatestPosts = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLatestPosts';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLatestPosts Block Type */\n  attributes?: Maybe<CoreLatestPostsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLatestPosts Block Type */\nexport type CoreLatestPostsAttributes = {\n  __typename?: 'CoreLatestPostsAttributes';\n  /** The &quot;addLinkToFeaturedImage&quot; field on the &quot;CoreLatestPosts&quot; block */\n  addLinkToFeaturedImage?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;align&quot; field on the &quot;CoreLatestPosts&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;categories&quot; field on the &quot;CoreLatestPosts&quot; block */\n  categories?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreLatestPosts&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreLatestPosts&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;displayAuthor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayFeaturedImage&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayFeaturedImage?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayPostContent&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayPostContent?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayPostContentRadio&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayPostContentRadio?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayPostDate&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayPostDate?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;excerptLength&quot; field on the &quot;CoreLatestPosts&quot; block */\n  excerptLength?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;featuredImageAlign&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;featuredImageSizeHeight&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageSizeHeight?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;featuredImageSizeSlug&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageSizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;featuredImageSizeWidth&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageSizeWidth?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreLatestPosts&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreLatestPosts&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreLatestPosts&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLatestPosts&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;order&quot; field on the &quot;CoreLatestPosts&quot; block */\n  order?: Maybe<Scalars['String']['output']>;\n  /** The &quot;orderBy&quot; field on the &quot;CoreLatestPosts&quot; block */\n  orderBy?: Maybe<Scalars['String']['output']>;\n  /** The &quot;postLayout&quot; field on the &quot;CoreLatestPosts&quot; block */\n  postLayout?: Maybe<Scalars['String']['output']>;\n  /** The &quot;postsToShow&quot; field on the &quot;CoreLatestPosts&quot; block */\n  postsToShow?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;selectedAuthor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  selectedAuthor?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreLatestPosts&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLegacyWidget = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLegacyWidget';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLegacyWidget Block Type */\n  attributes?: Maybe<CoreLegacyWidgetAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLegacyWidget Block Type */\nexport type CoreLegacyWidgetAttributes = {\n  __typename?: 'CoreLegacyWidgetAttributes';\n  /** The &quot;id&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  id?: Maybe<Scalars['String']['output']>;\n  /** The &quot;idBase&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  idBase?: Maybe<Scalars['String']['output']>;\n  /** The &quot;instance&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  instance?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreList = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreList';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreList Block Type */\n  attributes?: Maybe<CoreListAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreList Block Type */\nexport type CoreListAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreListAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreList&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreList&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreList&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreList&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreList&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreList&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreList&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;ordered&quot; field on the &quot;CoreList&quot; block */\n  ordered?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreList&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;reversed&quot; field on the &quot;CoreList&quot; block */\n  reversed?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;start&quot; field on the &quot;CoreList&quot; block */\n  start?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreList&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreList&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreList&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;values&quot; field on the &quot;CoreList&quot; block */\n  values?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreListItem = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreListItem';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreListItem Block Type */\n  attributes?: Maybe<CoreListItemAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreListItem Block Type */\nexport type CoreListItemAttributes = {\n  __typename?: 'CoreListItemAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreListItem&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreListItem&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreListItem&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreListItem&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreListItem&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreListItem&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreListItem&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLoginout = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLoginout';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLoginout Block Type */\n  attributes?: Maybe<CoreLoginoutAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLoginout Block Type */\nexport type CoreLoginoutAttributes = {\n  __typename?: 'CoreLoginoutAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreLoginout&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayLoginAsForm&quot; field on the &quot;CoreLoginout&quot; block */\n  displayLoginAsForm?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLoginout&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;redirectToCurrent&quot; field on the &quot;CoreLoginout&quot; block */\n  redirectToCurrent?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreMediaText = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreMediaText';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreMediaText Block Type */\n  attributes?: Maybe<CoreMediaTextAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreMediaText Block Type */\nexport type CoreMediaTextAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreMediaTextAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreMediaText&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreMediaText&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreMediaText&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;focalPoint&quot; field on the &quot;CoreMediaText&quot; block */\n  focalPoint?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreMediaText&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreMediaText&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreMediaText&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;href&quot; field on the &quot;CoreMediaText&quot; block */\n  href?: Maybe<Scalars['String']['output']>;\n  /** The &quot;imageFill&quot; field on the &quot;CoreMediaText&quot; block */\n  imageFill?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;isStackedOnMobile&quot; field on the &quot;CoreMediaText&quot; block */\n  isStackedOnMobile?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkClass&quot; field on the &quot;CoreMediaText&quot; block */\n  linkClass?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkDestination&quot; field on the &quot;CoreMediaText&quot; block */\n  linkDestination?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreMediaText&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreMediaText&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;mediaAlt&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaAlt?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaId&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaId?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;mediaLink&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaLink?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaPosition&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaPosition?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaSizeSlug&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaSizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaType&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaType?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaUrl&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaUrl?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaWidth&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaWidth?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreMediaText&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreMediaText&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreMediaText&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;verticalAlignment&quot; field on the &quot;CoreMediaText&quot; block */\n  verticalAlignment?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreMissing = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreMissing';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreMissing Block Type */\n  attributes?: Maybe<CoreMissingAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreMissing Block Type */\nexport type CoreMissingAttributes = {\n  __typename?: 'CoreMissingAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreMissing&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;originalContent&quot; field on the &quot;CoreMissing&quot; block */\n  originalContent?: Maybe<Scalars['String']['output']>;\n  /** The &quot;originalName&quot; field on the &quot;CoreMissing&quot; block */\n  originalName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;originalUndelimitedContent&quot; field on the &quot;CoreMissing&quot; block */\n  originalUndelimitedContent?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreMore = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreMore';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreMore Block Type */\n  attributes?: Maybe<CoreMoreAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreMore Block Type */\nexport type CoreMoreAttributes = {\n  __typename?: 'CoreMoreAttributes';\n  /** The &quot;customText&quot; field on the &quot;CoreMore&quot; block */\n  customText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreMore&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;noTeaser&quot; field on the &quot;CoreMore&quot; block */\n  noTeaser?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNavigation = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNavigation';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNavigation Block Type */\n  attributes?: Maybe<CoreNavigationAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNavigation Block Type */\nexport type CoreNavigationAttributes = {\n  __typename?: 'CoreNavigationAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreNavigation&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreNavigation&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customOverlayBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customOverlayTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreNavigation&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreNavigation&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasIcon&quot; field on the &quot;CoreNavigation&quot; block */\n  hasIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;icon&quot; field on the &quot;CoreNavigation&quot; block */\n  icon?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreNavigation&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreNavigation&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;maxNestingLevel&quot; field on the &quot;CoreNavigation&quot; block */\n  maxNestingLevel?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;openSubmenusOnClick&quot; field on the &quot;CoreNavigation&quot; block */\n  openSubmenusOnClick?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;overlayBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  overlayBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;overlayMenu&quot; field on the &quot;CoreNavigation&quot; block */\n  overlayMenu?: Maybe<Scalars['String']['output']>;\n  /** The &quot;overlayTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  overlayTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;ref&quot; field on the &quot;CoreNavigation&quot; block */\n  ref?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;rgbBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  rgbBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;rgbTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  rgbTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;showSubmenuIcon&quot; field on the &quot;CoreNavigation&quot; block */\n  showSubmenuIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreNavigation&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreNavigation&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;__unstableLocation&quot; field on the &quot;CoreNavigation&quot; block */\n  unstableLocation?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNavigationLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNavigationLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNavigationLink Block Type */\n  attributes?: Maybe<CoreNavigationLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNavigationLink Block Type */\nexport type CoreNavigationLinkAttributes = {\n  __typename?: 'CoreNavigationLinkAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreNavigationLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;description&quot; field on the &quot;CoreNavigationLink&quot; block */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreNavigationLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreNavigationLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreNavigationLink&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;isTopLevelLink&quot; field on the &quot;CoreNavigationLink&quot; block */\n  isTopLevelLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;kind&quot; field on the &quot;CoreNavigationLink&quot; block */\n  kind?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreNavigationLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreNavigationLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationLink&quot; block */\n  opensInNewTab?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreNavigationLink&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreNavigationLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreNavigationLink&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreNavigationLink&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreNavigationLink&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNavigationSubmenu = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNavigationSubmenu';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNavigationSubmenu Block Type */\n  attributes?: Maybe<CoreNavigationSubmenuAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNavigationSubmenu Block Type */\nexport type CoreNavigationSubmenuAttributes = {\n  __typename?: 'CoreNavigationSubmenuAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;description&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;isTopLevelItem&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  isTopLevelItem?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;kind&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  kind?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  opensInNewTab?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNextpage = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNextpage';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNextpage Block Type */\n  attributes?: Maybe<CoreNextpageAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNextpage Block Type */\nexport type CoreNextpageAttributes = {\n  __typename?: 'CoreNextpageAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreNextpage&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePageList = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePageList';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePageList Block Type */\n  attributes?: Maybe<CorePageListAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePageList Block Type */\nexport type CorePageListAttributes = {\n  __typename?: 'CorePageListAttributes';\n  /** The &quot;className&quot; field on the &quot;CorePageList&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePageList&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePageList&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isNested&quot; field on the &quot;CorePageList&quot; block */\n  isNested?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePageList&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;parentPageID&quot; field on the &quot;CorePageList&quot; block */\n  parentPageID?: Maybe<Scalars['Int']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePageList&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePageListItem = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePageListItem';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePageListItem Block Type */\n  attributes?: Maybe<CorePageListItemAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePageListItem Block Type */\nexport type CorePageListItemAttributes = {\n  __typename?: 'CorePageListItemAttributes';\n  /** The &quot;className&quot; field on the &quot;CorePageListItem&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasChildren&quot; field on the &quot;CorePageListItem&quot; block */\n  hasChildren?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;id&quot; field on the &quot;CorePageListItem&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;label&quot; field on the &quot;CorePageListItem&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;link&quot; field on the &quot;CorePageListItem&quot; block */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePageListItem&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CorePageListItem&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreParagraph = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreParagraph';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreParagraph Block Type */\n  attributes?: Maybe<CoreParagraphAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreParagraph Block Type */\nexport type CoreParagraphAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreParagraphAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreParagraph&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreParagraph&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreParagraph&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreParagraph&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreParagraph&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;direction&quot; field on the &quot;CoreParagraph&quot; block */\n  direction?: Maybe<Scalars['String']['output']>;\n  /** The &quot;dropCap&quot; field on the &quot;CoreParagraph&quot; block */\n  dropCap?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreParagraph&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreParagraph&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreParagraph&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreParagraph&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreParagraph&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreParagraph&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreParagraph&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePattern = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePattern';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePattern Block Type */\n  attributes?: Maybe<CorePatternAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePattern Block Type */\nexport type CorePatternAttributes = {\n  __typename?: 'CorePatternAttributes';\n  /** The &quot;className&quot; field on the &quot;CorePattern&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePattern&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;slug&quot; field on the &quot;CorePattern&quot; block */\n  slug?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostAuthor = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostAuthor';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostAuthor Block Type */\n  attributes?: Maybe<CorePostAuthorAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostAuthor Block Type */\nexport type CorePostAuthorAttributes = {\n  __typename?: 'CorePostAuthorAttributes';\n  /** The &quot;avatarSize&quot; field on the &quot;CorePostAuthor&quot; block */\n  avatarSize?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthor&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;byline&quot; field on the &quot;CorePostAuthor&quot; block */\n  byline?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostAuthor&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthor&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthor&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostAuthor&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostAuthor&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostAuthor&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostAuthor&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showAvatar&quot; field on the &quot;CorePostAuthor&quot; block */\n  showAvatar?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showBio&quot; field on the &quot;CorePostAuthor&quot; block */\n  showBio?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostAuthor&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthor&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostAuthor&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostAuthorBiography = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostAuthorBiography';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostAuthorBiography Block Type */\n  attributes?: Maybe<CorePostAuthorBiographyAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostAuthorBiography Block Type */\nexport type CorePostAuthorBiographyAttributes = {\n  __typename?: 'CorePostAuthorBiographyAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostAuthorName = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostAuthorName';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostAuthorName Block Type */\n  attributes?: Maybe<CorePostAuthorNameAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostAuthorName Block Type */\nexport type CorePostAuthorNameAttributes = {\n  __typename?: 'CorePostAuthorNameAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorName&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostAuthorName&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthorName&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthorName&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostAuthorName&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostAuthorName&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostAuthorName&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostAuthorName&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostAuthorName&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthorName&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostAuthorName&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostComments = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostComments';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostComments Block Type */\n  attributes?: Maybe<CorePostCommentsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostComments Block Type */\nexport type CorePostCommentsAttributes = {\n  __typename?: 'CorePostCommentsAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostComments&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostComments&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostComments&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostComments&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostComments&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostComments&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostComments&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostComments&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostComments&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostCommentsForm = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostCommentsForm';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostCommentsForm Block Type */\n  attributes?: Maybe<CorePostCommentsFormAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostCommentsForm Block Type */\nexport type CorePostCommentsFormAttributes = {\n  __typename?: 'CorePostCommentsFormAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostContent = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostContent';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostContent Block Type */\n  attributes?: Maybe<CorePostContentAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostContent Block Type */\nexport type CorePostContentAttributes = {\n  __typename?: 'CorePostContentAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostContent&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostContent&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostContent&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostContent&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CorePostContent&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostContent&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostContent&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostDate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostDate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostDate Block Type */\n  attributes?: Maybe<CorePostDateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostDate Block Type */\nexport type CorePostDateAttributes = {\n  __typename?: 'CorePostDateAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostDate&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostDate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayType&quot; field on the &quot;CorePostDate&quot; block */\n  displayType?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostDate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostDate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;format&quot; field on the &quot;CorePostDate&quot; block */\n  format?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostDate&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostDate&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostDate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostDate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostDate&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostDate&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostExcerpt = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostExcerpt';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostExcerpt Block Type */\n  attributes?: Maybe<CorePostExcerptAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostExcerpt Block Type */\nexport type CorePostExcerptAttributes = {\n  __typename?: 'CorePostExcerptAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostExcerpt&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostExcerpt&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostExcerpt&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostExcerpt&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostExcerpt&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostExcerpt&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;moreText&quot; field on the &quot;CorePostExcerpt&quot; block */\n  moreText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;showMoreOnNewLine&quot; field on the &quot;CorePostExcerpt&quot; block */\n  showMoreOnNewLine?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostExcerpt&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostExcerpt&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostExcerpt&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostFeaturedImage = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostFeaturedImage';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostFeaturedImage Block Type */\n  attributes?: Maybe<CorePostFeaturedImageAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostFeaturedImage Block Type */\nexport type CorePostFeaturedImageAttributes = {\n  __typename?: 'CorePostFeaturedImageAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customGradient&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  customGradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  customOverlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;dimRatio&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  dimRatio?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;height&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  height?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;overlayColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  overlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;scale&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  scale?: Maybe<Scalars['String']['output']>;\n  /** The &quot;sizeSlug&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  sizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostNavigationLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostNavigationLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostNavigationLink Block Type */\n  attributes?: Maybe<CorePostNavigationLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostNavigationLink Block Type */\nexport type CorePostNavigationLinkAttributes = {\n  __typename?: 'CorePostNavigationLinkAttributes';\n  /** The &quot;arrow&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  arrow?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkLabel&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  linkLabel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showTitle&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  showTitle?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostTemplate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostTemplate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostTemplate Block Type */\n  attributes?: Maybe<CorePostTemplateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostTemplate Block Type */\nexport type CorePostTemplateAttributes = {\n  __typename?: 'CorePostTemplateAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostTemplate&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTemplate&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostTemplate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostTemplate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostTemplate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostTemplate&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CorePostTemplate&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostTemplate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostTemplate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostTemplate&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostTerms = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostTerms';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostTerms Block Type */\n  attributes?: Maybe<CorePostTermsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostTerms Block Type */\nexport type CorePostTermsAttributes = {\n  __typename?: 'CorePostTermsAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTerms&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostTerms&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostTerms&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostTerms&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostTerms&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostTerms&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;prefix&quot; field on the &quot;CorePostTerms&quot; block */\n  prefix?: Maybe<Scalars['String']['output']>;\n  /** The &quot;separator&quot; field on the &quot;CorePostTerms&quot; block */\n  separator?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostTerms&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;suffix&quot; field on the &quot;CorePostTerms&quot; block */\n  suffix?: Maybe<Scalars['String']['output']>;\n  /** The &quot;term&quot; field on the &quot;CorePostTerms&quot; block */\n  term?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostTerms&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostTerms&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostTitle Block Type */\n  attributes?: Maybe<CorePostTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostTitle Block Type */\nexport type CorePostTitleAttributes = {\n  __typename?: 'CorePostTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostTitle&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;level&quot; field on the &quot;CorePostTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostTitle&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CorePostTitle&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePreformatted = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePreformatted';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePreformatted Block Type */\n  attributes?: Maybe<CorePreformattedAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePreformatted Block Type */\nexport type CorePreformattedAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CorePreformattedAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePreformatted&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePreformatted&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CorePreformatted&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePreformatted&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePreformatted&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePreformatted&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePreformatted&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePreformatted&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePreformatted&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePullquote = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePullquote';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePullquote Block Type */\n  attributes?: Maybe<CorePullquoteAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePullquote Block Type */\nexport type CorePullquoteAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CorePullquoteAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePullquote&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePullquote&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CorePullquote&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;citation&quot; field on the &quot;CorePullquote&quot; block */\n  citation?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePullquote&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePullquote&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePullquote&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePullquote&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePullquote&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePullquote&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePullquote&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePullquote&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;value&quot; field on the &quot;CorePullquote&quot; block */\n  value?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQuery = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQuery';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQuery Block Type */\n  attributes?: Maybe<CoreQueryAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQuery Block Type */\nexport type CoreQueryAttributes = {\n  __typename?: 'CoreQueryAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQuery&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQuery&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayLayout&quot; field on the &quot;CoreQuery&quot; block */\n  displayLayout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreQuery&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQuery&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;namespace&quot; field on the &quot;CoreQuery&quot; block */\n  namespace?: Maybe<Scalars['String']['output']>;\n  /** The &quot;query&quot; field on the &quot;CoreQuery&quot; block */\n  query?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;queryId&quot; field on the &quot;CoreQuery&quot; block */\n  queryId?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreQuery&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryNoResults = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryNoResults';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryNoResults Block Type */\n  attributes?: Maybe<CoreQueryNoResultsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryNoResults Block Type */\nexport type CoreQueryNoResultsAttributes = {\n  __typename?: 'CoreQueryNoResultsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPagination = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPagination';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPagination Block Type */\n  attributes?: Maybe<CoreQueryPaginationAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPagination Block Type */\nexport type CoreQueryPaginationAttributes = {\n  __typename?: 'CoreQueryPaginationAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQueryPagination&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPagination&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPagination&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPagination&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPagination&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPagination&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreQueryPagination&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPagination&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;paginationArrow&quot; field on the &quot;CoreQueryPagination&quot; block */\n  paginationArrow?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPagination&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQueryPagination&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPaginationNext = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPaginationNext';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPaginationNext Block Type */\n  attributes?: Maybe<CoreQueryPaginationNextAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPaginationNext Block Type */\nexport type CoreQueryPaginationNextAttributes = {\n  __typename?: 'CoreQueryPaginationNextAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPaginationNumbers = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPaginationNumbers';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPaginationNumbers Block Type */\n  attributes?: Maybe<CoreQueryPaginationNumbersAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPaginationNumbers Block Type */\nexport type CoreQueryPaginationNumbersAttributes = {\n  __typename?: 'CoreQueryPaginationNumbersAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPaginationPrevious = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPaginationPrevious';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPaginationPrevious Block Type */\n  attributes?: Maybe<CoreQueryPaginationPreviousAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPaginationPrevious Block Type */\nexport type CoreQueryPaginationPreviousAttributes = {\n  __typename?: 'CoreQueryPaginationPreviousAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryTitle Block Type */\n  attributes?: Maybe<CoreQueryTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryTitle Block Type */\nexport type CoreQueryTitleAttributes = {\n  __typename?: 'CoreQueryTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQueryTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreQueryTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showPrefix&quot; field on the &quot;CoreQueryTitle&quot; block */\n  showPrefix?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showSearchTerm&quot; field on the &quot;CoreQueryTitle&quot; block */\n  showSearchTerm?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreQueryTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQueryTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreQueryTitle&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQuote = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQuote';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQuote Block Type */\n  attributes?: Maybe<CoreQuoteAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQuote Block Type */\nexport type CoreQuoteAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreQuoteAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQuote&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQuote&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;citation&quot; field on the &quot;CoreQuote&quot; block */\n  citation?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQuote&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreQuote&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQuote&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQuote&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQuote&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQuote&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQuote&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQuote&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;value&quot; field on the &quot;CoreQuote&quot; block */\n  value?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreReadMore = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreReadMore';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreReadMore Block Type */\n  attributes?: Maybe<CoreReadMoreAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreReadMore Block Type */\nexport type CoreReadMoreAttributes = {\n  __typename?: 'CoreReadMoreAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreReadMore&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreReadMore&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreReadMore&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreReadMore&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreReadMore&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreReadMore&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreReadMore&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreReadMore&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreReadMore&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreReadMore&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreReadMore&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreRss = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreRss';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreRss Block Type */\n  attributes?: Maybe<CoreRssAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreRss Block Type */\nexport type CoreRssAttributes = {\n  __typename?: 'CoreRssAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreRss&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;blockLayout&quot; field on the &quot;CoreRss&quot; block */\n  blockLayout?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreRss&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreRss&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;displayAuthor&quot; field on the &quot;CoreRss&quot; block */\n  displayAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayDate&quot; field on the &quot;CoreRss&quot; block */\n  displayDate?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayExcerpt&quot; field on the &quot;CoreRss&quot; block */\n  displayExcerpt?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;excerptLength&quot; field on the &quot;CoreRss&quot; block */\n  excerptLength?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;feedURL&quot; field on the &quot;CoreRss&quot; block */\n  feedURL?: Maybe<Scalars['String']['output']>;\n  /** The &quot;itemsToShow&quot; field on the &quot;CoreRss&quot; block */\n  itemsToShow?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreRss&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSearch = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSearch';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSearch Block Type */\n  attributes?: Maybe<CoreSearchAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSearch Block Type */\nexport type CoreSearchAttributes = {\n  __typename?: 'CoreSearchAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSearch&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSearch&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreSearch&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;buttonPosition&quot; field on the &quot;CoreSearch&quot; block */\n  buttonPosition?: Maybe<Scalars['String']['output']>;\n  /** The &quot;buttonText&quot; field on the &quot;CoreSearch&quot; block */\n  buttonText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;buttonUseIcon&quot; field on the &quot;CoreSearch&quot; block */\n  buttonUseIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSearch&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreSearch&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreSearch&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSearch&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreSearch&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSearch&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreSearch&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;query&quot; field on the &quot;CoreSearch&quot; block */\n  query?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showLabel&quot; field on the &quot;CoreSearch&quot; block */\n  showLabel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSearch&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreSearch&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreSearch&quot; block */\n  width?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;widthUnit&quot; field on the &quot;CoreSearch&quot; block */\n  widthUnit?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSeparator = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSeparator';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSeparator Block Type */\n  attributes?: Maybe<CoreSeparatorAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSeparator Block Type */\nexport type CoreSeparatorAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreSeparatorAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSeparator&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSeparator&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSeparator&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreSeparator&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSeparator&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSeparator&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;opacity&quot; field on the &quot;CoreSeparator&quot; block */\n  opacity?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSeparator&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreShortcode = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreShortcode';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreShortcode Block Type */\n  attributes?: Maybe<CoreShortcodeAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreShortcode Block Type */\nexport type CoreShortcodeAttributes = {\n  __typename?: 'CoreShortcodeAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreShortcode&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;text&quot; field on the &quot;CoreShortcode&quot; block */\n  text?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSiteLogo = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSiteLogo';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSiteLogo Block Type */\n  attributes?: Maybe<CoreSiteLogoAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSiteLogo Block Type */\nexport type CoreSiteLogoAttributes = {\n  __typename?: 'CoreSiteLogoAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSiteLogo&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSiteLogo&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreSiteLogo&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreSiteLogo&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSiteLogo&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;shouldSyncIcon&quot; field on the &quot;CoreSiteLogo&quot; block */\n  shouldSyncIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSiteLogo&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreSiteLogo&quot; block */\n  width?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSiteTagline = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSiteTagline';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSiteTagline Block Type */\n  attributes?: Maybe<CoreSiteTaglineAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSiteTagline Block Type */\nexport type CoreSiteTaglineAttributes = {\n  __typename?: 'CoreSiteTaglineAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSiteTagline&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSiteTagline&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSiteTagline&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreSiteTagline&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreSiteTagline&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSiteTagline&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSiteTagline&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSiteTagline&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreSiteTagline&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreSiteTagline&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSiteTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSiteTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSiteTitle Block Type */\n  attributes?: Maybe<CoreSiteTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSiteTitle Block Type */\nexport type CoreSiteTitleAttributes = {\n  __typename?: 'CoreSiteTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSiteTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSiteTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSiteTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreSiteTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreSiteTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSiteTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreSiteTitle&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreSiteTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreSiteTitle&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSiteTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSiteTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreSiteTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreSiteTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSocialLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSocialLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSocialLink Block Type */\n  attributes?: Maybe<CoreSocialLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSocialLink Block Type */\nexport type CoreSocialLinkAttributes = {\n  __typename?: 'CoreSocialLinkAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreSocialLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreSocialLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSocialLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreSocialLink&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;service&quot; field on the &quot;CoreSocialLink&quot; block */\n  service?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreSocialLink&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSocialLinks = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSocialLinks';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSocialLinks Block Type */\n  attributes?: Maybe<CoreSocialLinksAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSocialLinks Block Type */\nexport type CoreSocialLinksAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreSocialLinksAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSocialLinks&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSocialLinks&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customIconBackgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  customIconBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customIconColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  customIconColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSocialLinks&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconBackgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconBackgroundColorValue&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconBackgroundColorValue?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconColorValue&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconColorValue?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreSocialLinks&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSocialLinks&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;openInNewTab&quot; field on the &quot;CoreSocialLinks&quot; block */\n  openInNewTab?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showLabels&quot; field on the &quot;CoreSocialLinks&quot; block */\n  showLabels?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;size&quot; field on the &quot;CoreSocialLinks&quot; block */\n  size?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSocialLinks&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSpacer = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSpacer';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSpacer Block Type */\n  attributes?: Maybe<CoreSpacerAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSpacer Block Type */\nexport type CoreSpacerAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreSpacerAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSpacer&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;height&quot; field on the &quot;CoreSpacer&quot; block */\n  height?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSpacer&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSpacer&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreSpacer&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTable = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTable';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTable Block Type */\n  attributes?: Maybe<CoreTableAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTable Block Type */\nexport type CoreTableAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreTableAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTable&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreTable&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;body&quot; field on the &quot;CoreTable&quot; block */\n  body?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreTable&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreTable&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTable&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreTable&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreTable&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;foot&quot; field on the &quot;CoreTable&quot; block */\n  foot?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreTable&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasFixedLayout&quot; field on the &quot;CoreTable&quot; block */\n  hasFixedLayout?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;head&quot; field on the &quot;CoreTable&quot; block */\n  head?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTable&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreTable&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreTable&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTagCloud = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTagCloud';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTagCloud Block Type */\n  attributes?: Maybe<CoreTagCloudAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTagCloud Block Type */\nexport type CoreTagCloudAttributes = {\n  __typename?: 'CoreTagCloudAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTagCloud&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTagCloud&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreTagCloud&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;largestFontSize&quot; field on the &quot;CoreTagCloud&quot; block */\n  largestFontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTagCloud&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;numberOfTags&quot; field on the &quot;CoreTagCloud&quot; block */\n  numberOfTags?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;showTagCounts&quot; field on the &quot;CoreTagCloud&quot; block */\n  showTagCounts?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;smallestFontSize&quot; field on the &quot;CoreTagCloud&quot; block */\n  smallestFontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreTagCloud&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;taxonomy&quot; field on the &quot;CoreTagCloud&quot; block */\n  taxonomy?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTemplatePart = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTemplatePart';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTemplatePart Block Type */\n  attributes?: Maybe<CoreTemplatePartAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTemplatePart Block Type */\nexport type CoreTemplatePartAttributes = {\n  __typename?: 'CoreTemplatePartAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTemplatePart&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;area&quot; field on the &quot;CoreTemplatePart&quot; block */\n  area?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTemplatePart&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTemplatePart&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;slug&quot; field on the &quot;CoreTemplatePart&quot; block */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreTemplatePart&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;theme&quot; field on the &quot;CoreTemplatePart&quot; block */\n  theme?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTermDescription = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTermDescription';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTermDescription Block Type */\n  attributes?: Maybe<CoreTermDescriptionAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTermDescription Block Type */\nexport type CoreTermDescriptionAttributes = {\n  __typename?: 'CoreTermDescriptionAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTermDescription&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreTermDescription&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTermDescription&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreTermDescription&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreTermDescription&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTermDescription&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreTermDescription&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreTermDescription&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreTermDescription&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTextColumns = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTextColumns';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTextColumns Block Type */\n  attributes?: Maybe<CoreTextColumnsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTextColumns Block Type */\nexport type CoreTextColumnsAttributes = {\n  __typename?: 'CoreTextColumnsAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreTextColumns&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreTextColumns&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreTextColumns&quot; block */\n  content?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTextColumns&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreTextColumns&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreVerse = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreVerse';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreVerse Block Type */\n  attributes?: Maybe<CoreVerseAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreVerse Block Type */\nexport type CoreVerseAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreVerseAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreVerse&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreVerse&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreVerse&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreVerse&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreVerse&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreVerse&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreVerse&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreVerse&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreVerse&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreVerse&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreVideo = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreVideo';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreVideo Block Type */\n  attributes?: Maybe<CoreVideoAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreVideo Block Type */\nexport type CoreVideoAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreVideoAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreVideo&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;autoplay&quot; field on the &quot;CoreVideo&quot; block */\n  autoplay?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreVideo&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreVideo&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;controls&quot; field on the &quot;CoreVideo&quot; block */\n  controls?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreVideo&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreVideo&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;loop&quot; field on the &quot;CoreVideo&quot; block */\n  loop?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;muted&quot; field on the &quot;CoreVideo&quot; block */\n  muted?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;playsInline&quot; field on the &quot;CoreVideo&quot; block */\n  playsInline?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;poster&quot; field on the &quot;CoreVideo&quot; block */\n  poster?: Maybe<Scalars['String']['output']>;\n  /** The &quot;preload&quot; field on the &quot;CoreVideo&quot; block */\n  preload?: Maybe<Scalars['String']['output']>;\n  /** The &quot;src&quot; field on the &quot;CoreVideo&quot; block */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreVideo&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tracks&quot; field on the &quot;CoreVideo&quot; block */\n  tracks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreWidgetGroup = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreWidgetGroup';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreWidgetGroup Block Type */\n  attributes?: Maybe<CoreWidgetGroupAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreWidgetGroup Block Type */\nexport type CoreWidgetGroupAttributes = {\n  __typename?: 'CoreWidgetGroupAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreWidgetGroup&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreWidgetGroup&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreWidgetGroup&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the createCategory mutation. */\nexport type CreateCategoryInput = {\n  /** The slug that the category will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the category object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the category object to mutate */\n  name: Scalars['String']['input'];\n  /** The ID of the category that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createCategory mutation. */\nexport type CreateCategoryPayload = {\n  __typename?: 'CreateCategoryPayload';\n  /** The created category */\n  category?: Maybe<Category>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the createComment mutation. */\nexport type CreateCommentInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n  /** Type of comment. */\n  type?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createComment mutation. */\nexport type CreateCommentPayload = {\n  __typename?: 'CreateCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The comment that was created */\n  comment?: Maybe<Comment>;\n  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Input for the createMediaItem mutation. */\nexport type CreateMediaItemInput = {\n  /** Alternative text to display when mediaItem is not displayed */\n  altText?: InputMaybe<Scalars['String']['input']>;\n  /** The userId to assign as the author of the mediaItem */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** The caption for the mediaItem */\n  caption?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the mediaItem */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the mediaItem */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The date (in GMT zone) of the mediaItem */\n  dateGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Description of the mediaItem */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The file name of the mediaItem */\n  filePath?: InputMaybe<Scalars['String']['input']>;\n  /** The file type of the mediaItem */\n  fileType?: InputMaybe<MimeTypeEnum>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The ping status for the mediaItem */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the mediaItem */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the mediaItem */\n  status?: InputMaybe<MediaItemStatusEnum>;\n  /** The title of the mediaItem */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createMediaItem mutation. */\nexport type CreateMediaItemPayload = {\n  __typename?: 'CreateMediaItemPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The MediaItem object mutation type. */\n  mediaItem?: Maybe<MediaItem>;\n};\n\n/** Input for the createPage mutation. */\nexport type CreatePageInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createPage mutation. */\nexport type CreatePagePayload = {\n  __typename?: 'CreatePagePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  page?: Maybe<Page>;\n};\n\n/** Input for the createPostFormat mutation. */\nexport type CreatePostFormatInput = {\n  /** The slug that the post_format will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_format object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the post_format object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createPostFormat mutation. */\nexport type CreatePostFormatPayload = {\n  __typename?: 'CreatePostFormatPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_format */\n  postFormat?: Maybe<PostFormat>;\n};\n\n/** Input for the createPost mutation. */\nexport type CreatePostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** Set connections between the post and categories */\n  categories?: InputMaybe<PostCategoriesInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  ncFeaturedImageDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  ncTags?: InputMaybe<Scalars['String']['input']>;\n  ncmazAudioUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImgs1DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs2DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs3DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs4DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs5DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs6DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs7DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs8DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazVideoUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The ping status for the object */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** URLs that have been pinged. */\n  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Set connections between the post and postFormats */\n  postFormats?: InputMaybe<PostPostFormatsInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Set connections between the post and tags */\n  tags?: InputMaybe<PostTagsInput>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** URLs queued to be pinged. */\n  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** The payload for the createPost mutation. */\nexport type CreatePostPayload = {\n  __typename?: 'CreatePostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  post?: Maybe<Post>;\n};\n\n/** Input for the createTag mutation. */\nexport type CreateTagInput = {\n  /** The slug that the post_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the post_tag object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createTag mutation. */\nexport type CreateTagPayload = {\n  __typename?: 'CreateTagPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_tag */\n  tag?: Maybe<Tag>;\n};\n\n/** Input for the createUser mutation. */\nexport type CreateUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** An array of roles to be assigned to the user. */\n  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** A string that contains the user's username for logging in. */\n  username: Scalars['String']['input'];\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createUser mutation. */\nexport type CreateUserPayload = {\n  __typename?: 'CreateUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** Object that can be identified with a Database ID */\nexport type DatabaseIdentifier = {\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n};\n\n/** Date values */\nexport type DateInput = {\n  /** Day of the month (from 1 to 31) */\n  day?: InputMaybe<Scalars['Int']['input']>;\n  /** Month number (from 1 to 12) */\n  month?: InputMaybe<Scalars['Int']['input']>;\n  /** 4 digit year (e.g. 2017) */\n  year?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Filter the connection based on input */\nexport type DateQueryInput = {\n  /** Nodes should be returned after this date */\n  after?: InputMaybe<DateInput>;\n  /** Nodes should be returned before this date */\n  before?: InputMaybe<DateInput>;\n  /** Column to query against */\n  column?: InputMaybe<PostObjectsConnectionDateColumnEnum>;\n  /** For after/before, whether exact value should be matched or not */\n  compare?: InputMaybe<Scalars['String']['input']>;\n  /** Day of the month (from 1 to 31) */\n  day?: InputMaybe<Scalars['Int']['input']>;\n  /** Hour (from 0 to 23) */\n  hour?: InputMaybe<Scalars['Int']['input']>;\n  /** For after/before, whether exact value should be matched or not */\n  inclusive?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Minute (from 0 to 59) */\n  minute?: InputMaybe<Scalars['Int']['input']>;\n  /** Month number (from 1 to 12) */\n  month?: InputMaybe<Scalars['Int']['input']>;\n  /** OR or AND, how the sub-arrays should be compared */\n  relation?: InputMaybe<RelationEnum>;\n  /** Second (0 to 59) */\n  second?: InputMaybe<Scalars['Int']['input']>;\n  /** Week of the year (from 0 to 53) */\n  week?: InputMaybe<Scalars['Int']['input']>;\n  /** 4 digit year (e.g. 2017) */\n  year?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The template assigned to the node */\nexport type DefaultTemplate = ContentTemplate & {\n  __typename?: 'DefaultTemplate';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the deleteCategory mutation. */\nexport type DeleteCategoryInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteCategory mutation. */\nexport type DeleteCategoryPayload = {\n  __typename?: 'DeleteCategoryPayload';\n  /** The deteted term object */\n  category?: Maybe<Category>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Input for the deleteComment mutation. */\nexport type DeleteCommentInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the comment should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The deleted comment ID */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteComment mutation. */\nexport type DeleteCommentPayload = {\n  __typename?: 'DeleteCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The deleted comment object */\n  comment?: Maybe<Comment>;\n  /** The deleted comment ID */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Input for the deleteMediaItem mutation. */\nexport type DeleteMediaItemInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the mediaItem should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the mediaItem to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteMediaItem mutation. */\nexport type DeleteMediaItemPayload = {\n  __typename?: 'DeleteMediaItemPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted mediaItem */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The mediaItem before it was deleted */\n  mediaItem?: Maybe<MediaItem>;\n};\n\n/** Input for the deletePage mutation. */\nexport type DeletePageInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the page to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the deletePage mutation. */\nexport type DeletePagePayload = {\n  __typename?: 'DeletePagePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The object before it was deleted */\n  page?: Maybe<Page>;\n};\n\n/** Input for the deletePostFormat mutation. */\nexport type DeletePostFormatInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deletePostFormat mutation. */\nexport type DeletePostFormatPayload = {\n  __typename?: 'DeletePostFormatPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The deteted term object */\n  postFormat?: Maybe<PostFormat>;\n};\n\n/** Input for the deletePost mutation. */\nexport type DeletePostInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the post to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the deletePost mutation. */\nexport type DeletePostPayload = {\n  __typename?: 'DeletePostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The object before it was deleted */\n  post?: Maybe<Post>;\n};\n\n/** Input for the deleteTag mutation. */\nexport type DeleteTagInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteTag mutation. */\nexport type DeleteTagPayload = {\n  __typename?: 'DeleteTagPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The deteted term object */\n  tag?: Maybe<Tag>;\n};\n\n/** Input for the deleteUser mutation. */\nexport type DeleteUserInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user you want to delete */\n  id: Scalars['ID']['input'];\n  /** Reassign posts and links to new User ID. */\n  reassignId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The payload for the deleteUser mutation. */\nexport type DeleteUserPayload = {\n  __typename?: 'DeleteUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the user that you just deleted */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The deleted user object */\n  user?: Maybe<User>;\n};\n\n/** The discussion setting type */\nexport type DiscussionSettings = {\n  __typename?: 'DiscussionSettings';\n  /** Allow people to submit comments on new posts. */\n  defaultCommentStatus?: Maybe<Scalars['String']['output']>;\n  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */\n  defaultPingStatus?: Maybe<Scalars['String']['output']>;\n};\n\n/** Relational context between connected nodes */\nexport type Edge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected node */\n  node: Node;\n};\n\n/** Blocks that can be edited to create content and layouts */\nexport type EditorBlock = {\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the Block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Asset enqueued by the CMS */\nexport type EnqueuedAsset = {\n  /** @todo */\n  args?: Maybe<Scalars['Boolean']['output']>;\n  /** Dependencies needed to use this asset */\n  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;\n  /** Extra information needed for the script */\n  extra?: Maybe<Scalars['String']['output']>;\n  /** The handle of the enqueued asset */\n  handle?: Maybe<Scalars['String']['output']>;\n  /** The ID of the enqueued asset */\n  id: Scalars['ID']['output'];\n  /** The source of the asset */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The version of the enqueued asset */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Script enqueued by the CMS */\nexport type EnqueuedScript = EnqueuedAsset & Node & {\n  __typename?: 'EnqueuedScript';\n  /** @todo */\n  args?: Maybe<Scalars['Boolean']['output']>;\n  /** Dependencies needed to use this asset */\n  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;\n  /** Extra information needed for the script */\n  extra?: Maybe<Scalars['String']['output']>;\n  /** The handle of the enqueued asset */\n  handle?: Maybe<Scalars['String']['output']>;\n  /** The ID of the enqueued asset */\n  id: Scalars['ID']['output'];\n  /** The source of the asset */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The version of the enqueued asset */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to EnqueuedScript Nodes */\nexport type EnqueuedScriptConnection = {\n  /** A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes */\n  edges: Array<EnqueuedScriptConnectionEdge>;\n  /** A list of connected EnqueuedScript Nodes */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: EnqueuedScriptConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected EnqueuedScript */\nexport type EnqueuedScriptConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected EnqueuedScript Node */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the connected EnqueuedScriptConnectionEdge */\nexport type EnqueuedScriptConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Stylesheet enqueued by the CMS */\nexport type EnqueuedStylesheet = EnqueuedAsset & Node & {\n  __typename?: 'EnqueuedStylesheet';\n  /** @todo */\n  args?: Maybe<Scalars['Boolean']['output']>;\n  /** Dependencies needed to use this asset */\n  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;\n  /** Extra information needed for the script */\n  extra?: Maybe<Scalars['String']['output']>;\n  /** The handle of the enqueued asset */\n  handle?: Maybe<Scalars['String']['output']>;\n  /** The ID of the enqueued asset */\n  id: Scalars['ID']['output'];\n  /** The source of the asset */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The version of the enqueued asset */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to EnqueuedStylesheet Nodes */\nexport type EnqueuedStylesheetConnection = {\n  /** A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes */\n  edges: Array<EnqueuedStylesheetConnectionEdge>;\n  /** A list of connected EnqueuedStylesheet Nodes */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: EnqueuedStylesheetConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected EnqueuedStylesheet */\nexport type EnqueuedStylesheetConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected EnqueuedStylesheet Node */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the connected EnqueuedStylesheetConnectionEdge */\nexport type EnqueuedStylesheetConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The general setting type */\nexport type GeneralSettings = {\n  __typename?: 'GeneralSettings';\n  /** A date format for all date strings. */\n  dateFormat?: Maybe<Scalars['String']['output']>;\n  /** Site tagline. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** This address is used for admin purposes, like new user notification. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** WordPress locale code. */\n  language?: Maybe<Scalars['String']['output']>;\n  /** A day number of the week that the week should start on. */\n  startOfWeek?: Maybe<Scalars['Int']['output']>;\n  /** A time format for all time strings. */\n  timeFormat?: Maybe<Scalars['String']['output']>;\n  /** A city in the same timezone as you. */\n  timezone?: Maybe<Scalars['String']['output']>;\n  /** Site title. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** Site URL. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the generateAuthorizationCode mutation. */\nexport type GenerateAuthorizationCodeInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Email for WordPress user */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** Password for WordPress user */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Username for WordPress user */\n  username?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the generateAuthorizationCode mutation. */\nexport type GenerateAuthorizationCodePayload = {\n  __typename?: 'GenerateAuthorizationCodePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Authorization code used for requesting refresh/access tokens */\n  code?: Maybe<Scalars['String']['output']>;\n  /** Error encountered during user authentication, if any */\n  error?: Maybe<Scalars['String']['output']>;\n};\n\n/** Types of styles to load */\nexport enum GlobalStylesheetTypesEnum {\n  BaseLayoutStyles = 'BASE_LAYOUT_STYLES',\n  Presets = 'PRESETS',\n  Styles = 'STYLES',\n  Variables = 'VARIABLES'\n}\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNode = {\n  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;\n  /** Connection between the HierarchicalContentNode type and the ContentNode type */\n  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** The parent of the node. The parent object can be of various types */\n  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection between the HierarchicalContentNode type and the ContentNode type */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnection = Connection & ContentNodeConnection & {\n  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnection';\n  /** Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection */\n  edges: Array<HierarchicalContentNodeToContentNodeAncestorsConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot; */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the HierarchicalContentNode type and the ContentNode type */\nexport type HierarchicalContentNodeToContentNodeChildrenConnection = Connection & ContentNodeConnection & {\n  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnection';\n  /** Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection */\n  edges: Array<HierarchicalContentNodeToContentNodeChildrenConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type HierarchicalContentNodeToContentNodeChildrenConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot; */\nexport type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */\nexport type HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the HierarchicalContentNode type and the ContentNode type */\nexport type HierarchicalContentNodeToParentContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'HierarchicalContentNodeToParentContentNodeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentNode;\n};\n\n/** Node with hierarchical (parent/child) relationships */\nexport type HierarchicalNode = {\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Term node with hierarchical (parent/child) relationships */\nexport type HierarchicalTermNode = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Term node with hierarchical (parent/child) relationships */\nexport type HierarchicalTermNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Term node with hierarchical (parent/child) relationships */\nexport type HierarchicalTermNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** File details for a Media Item */\nexport type MediaDetails = {\n  __typename?: 'MediaDetails';\n  /** The filename of the mediaItem */\n  file?: Maybe<Scalars['String']['output']>;\n  /** The height of the mediaItem */\n  height?: Maybe<Scalars['Int']['output']>;\n  /** Meta information associated with the mediaItem */\n  meta?: Maybe<MediaItemMeta>;\n  /** The available sizes of the mediaItem */\n  sizes?: Maybe<Array<Maybe<MediaSize>>>;\n  /** The width of the mediaItem */\n  width?: Maybe<Scalars['Int']['output']>;\n};\n\n\n/** File details for a Media Item */\nexport type MediaDetailsSizesArgs = {\n  exclude?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;\n  include?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;\n};\n\n/** The mediaItem type */\nexport type MediaItem = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable & {\n  __typename?: 'MediaItem';\n  /** Alternative text to display when resource is not displayed */\n  altText?: Maybe<Scalars['String']['output']>;\n  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** The caption for the resource */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** Connection between the HierarchicalContentNode type and the ContentNode type */\n  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** Connection between the MediaItem type and the Comment type */\n  comments?: Maybe<MediaItemToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** Description of the image (stored as post_content) */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The filesize in bytes of the resource */\n  fileSize?: Maybe<Scalars['Int']['output']>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the attachment object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** Details about the mediaItem */\n  mediaDetails?: Maybe<MediaDetails>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  mediaItemId: Scalars['Int']['output'];\n  /** Url of the mediaItem */\n  mediaItemUrl?: Maybe<Scalars['String']['output']>;\n  /** Type of resource */\n  mediaType?: Maybe<Scalars['String']['output']>;\n  /** The mime type of the mediaItem */\n  mimeType?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** The parent of the node. The parent object can be of various types */\n  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The sizes attribute value for an image. */\n  sizes?: Maybe<Scalars['String']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** Url of the mediaItem */\n  sourceUrl?: Maybe<Scalars['String']['output']>;\n  /** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */\n  srcSet?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemCaptionArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<MediaItemToCommentConnectionWhereArgs>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemDescriptionArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemFileSizeArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemSizesArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemSourceUrlArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemSrcSetArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Connection to mediaItem Nodes */\nexport type MediaItemConnection = {\n  /** A list of edges (relational context) between RootQuery and connected mediaItem Nodes */\n  edges: Array<MediaItemConnectionEdge>;\n  /** A list of connected mediaItem Nodes */\n  nodes: Array<MediaItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MediaItemConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected mediaItem */\nexport type MediaItemConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected mediaItem Node */\n  node: MediaItem;\n};\n\n/** Page Info on the connected MediaItemConnectionEdge */\nexport type MediaItemConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum MediaItemIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  Slug = 'SLUG',\n  /** Identify a media item by its source url */\n  SourceUrl = 'SOURCE_URL',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Meta connected to a MediaItem */\nexport type MediaItemMeta = {\n  __typename?: 'MediaItemMeta';\n  /** Aperture measurement of the media item. */\n  aperture?: Maybe<Scalars['Float']['output']>;\n  /** Information about the camera used to create the media item. */\n  camera?: Maybe<Scalars['String']['output']>;\n  /** The text string description associated with the media item. */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** Copyright information associated with the media item. */\n  copyright?: Maybe<Scalars['String']['output']>;\n  /** The date/time when the media was created. */\n  createdTimestamp?: Maybe<Scalars['Int']['output']>;\n  /** The original creator of the media item. */\n  credit?: Maybe<Scalars['String']['output']>;\n  /** The focal length value of the media item. */\n  focalLength?: Maybe<Scalars['Float']['output']>;\n  /** The ISO (International Organization for Standardization) value of the media item. */\n  iso?: Maybe<Scalars['Int']['output']>;\n  /** List of keywords used to describe or identfy the media item. */\n  keywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The vertical or horizontal aspect of the media item. */\n  orientation?: Maybe<Scalars['String']['output']>;\n  /** The shutter speed information of the media item. */\n  shutterSpeed?: Maybe<Scalars['Float']['output']>;\n  /** A useful title for the media item. */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n/** The size of the media item object. */\nexport enum MediaItemSizeEnum {\n  /** MediaItem with the large size */\n  Large = 'LARGE',\n  /** MediaItem with the medium size */\n  Medium = 'MEDIUM',\n  /** MediaItem with the medium_large size */\n  MediumLarge = 'MEDIUM_LARGE',\n  /** MediaItem with the thumbnail size */\n  Thumbnail = 'THUMBNAIL',\n  /** MediaItem with the 1536x1536 size */\n  '1536X1536' = '_1536X1536',\n  /** MediaItem with the 2048x2048 size */\n  '2048X2048' = '_2048X2048'\n}\n\n/** The status of the media item object. */\nexport enum MediaItemStatusEnum {\n  /** Objects with the auto-draft status */\n  AutoDraft = 'AUTO_DRAFT',\n  /** Objects with the inherit status */\n  Inherit = 'INHERIT',\n  /** Objects with the private status */\n  Private = 'PRIVATE',\n  /** Objects with the trash status */\n  Trash = 'TRASH'\n}\n\n/** Connection between the MediaItem type and the Comment type */\nexport type MediaItemToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'MediaItemToCommentConnection';\n  /** Edges for the MediaItemToCommentConnection connection */\n  edges: Array<MediaItemToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: MediaItemToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type MediaItemToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'MediaItemToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;MediaItemToCommentConnection&quot; */\nexport type MediaItemToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'MediaItemToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the MediaItemToCommentConnection connection */\nexport type MediaItemToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Details of an available size for a media item */\nexport type MediaSize = {\n  __typename?: 'MediaSize';\n  /** The filename of the referenced size */\n  file?: Maybe<Scalars['String']['output']>;\n  /** The filesize of the resource */\n  fileSize?: Maybe<Scalars['Int']['output']>;\n  /** The height of the referenced size */\n  height?: Maybe<Scalars['String']['output']>;\n  /** The mime type of the referenced size */\n  mimeType?: Maybe<Scalars['String']['output']>;\n  /** The referenced size name */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url of the referenced size */\n  sourceUrl?: Maybe<Scalars['String']['output']>;\n  /** The width of the referenced size */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */\nexport type Menu = DatabaseIdentifier & Node & {\n  __typename?: 'Menu';\n  /** The number of items in the menu */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The globally unique identifier of the nav menu object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The locations a menu is assigned to */\n  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;\n  /**\n   * WP ID of the nav menu.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  menuId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Menu type and the MenuItem type */\n  menuItems?: Maybe<MenuToMenuItemConnection>;\n  /** Display name of the menu. Equivalent to WP_Term-&gt;name. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */\n  slug?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */\nexport type MenuMenuItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<MenuToMenuItemConnectionWhereArgs>;\n};\n\n/** Connection to Menu Nodes */\nexport type MenuConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Menu Nodes */\n  edges: Array<MenuConnectionEdge>;\n  /** A list of connected Menu Nodes */\n  nodes: Array<Menu>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Menu */\nexport type MenuConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Menu Node */\n  node: Menu;\n};\n\n/** Page Info on the connected MenuConnectionEdge */\nexport type MenuConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */\nexport type MenuItem = DatabaseIdentifier & Node & {\n  __typename?: 'MenuItem';\n  /** Connection between the MenuItem type and the MenuItem type */\n  childItems?: Maybe<MenuItemToMenuItemConnection>;\n  /** Connection from MenuItem to it&#039;s connected node */\n  connectedNode?: Maybe<MenuItemToMenuItemLinkableConnectionEdge>;\n  /**\n   * The object connected to this menu item.\n   * @deprecated Deprecated in favor of the connectedNode field\n   */\n  connectedObject?: Maybe<MenuItemObjectUnion>;\n  /** Class attribute for the menu item link */\n  cssClasses?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Description of the menu item. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the nav menu item object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Label or title of the menu item. */\n  label?: Maybe<Scalars['String']['output']>;\n  /** Link relationship (XFN) of the menu item. */\n  linkRelationship?: Maybe<Scalars['String']['output']>;\n  /** The locations the menu item&#039;s Menu is assigned to */\n  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;\n  /** The Menu a MenuItem is part of */\n  menu?: Maybe<MenuItemToMenuConnectionEdge>;\n  /**\n   * WP ID of the menu item.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  menuItemId?: Maybe<Scalars['Int']['output']>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Ncmaz Menu Custom Fields&quot; was set to Show in GraphQL. */\n  ncmazMenuCustomFields?: Maybe<MenuItem_Ncmazmenucustomfields>;\n  /** Menu item order */\n  order?: Maybe<Scalars['Int']['output']>;\n  /** The database id of the parent menu item or null if it is the root */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent nav menu item object. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Path for the resource. Relative path for internal resources. Absolute path for external resources. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** Target attribute for the menu item link. */\n  target?: Maybe<Scalars['String']['output']>;\n  /** Title attribute for the menu item link */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The uri of the resource the menu item links to */\n  uri?: Maybe<Scalars['String']['output']>;\n  /** URL or destination of the menu item. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */\nexport type MenuItemChildItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<MenuItemToMenuItemConnectionWhereArgs>;\n};\n\n/** Connection to MenuItem Nodes */\nexport type MenuItemConnection = {\n  /** A list of edges (relational context) between RootQuery and connected MenuItem Nodes */\n  edges: Array<MenuItemConnectionEdge>;\n  /** A list of connected MenuItem Nodes */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuItemConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected MenuItem */\nexport type MenuItemConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected MenuItem Node */\n  node: MenuItem;\n};\n\n/** Page Info on the connected MenuItemConnectionEdge */\nexport type MenuItemConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Nodes that can be linked to as Menu Items */\nexport type MenuItemLinkable = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n/** Edge between a Node and a connected MenuItemLinkable */\nexport type MenuItemLinkableConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected MenuItemLinkable Node */\n  node: MenuItemLinkable;\n};\n\n/** The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum MenuItemNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID'\n}\n\n/** Deprecated in favor of MenuItemLinkeable Interface */\nexport type MenuItemObjectUnion = Category | Page | Post | PostFormat | Tag;\n\n/** Connection between the MenuItem type and the Menu type */\nexport type MenuItemToMenuConnectionEdge = Edge & MenuConnectionEdge & OneToOneConnection & {\n  __typename?: 'MenuItemToMenuConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Menu;\n};\n\n/** Connection between the MenuItem type and the MenuItem type */\nexport type MenuItemToMenuItemConnection = Connection & MenuItemConnection & {\n  __typename?: 'MenuItemToMenuItemConnection';\n  /** Edges for the MenuItemToMenuItemConnection connection */\n  edges: Array<MenuItemToMenuItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuItemToMenuItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type MenuItemToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {\n  __typename?: 'MenuItemToMenuItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MenuItem;\n};\n\n/** Page Info on the &quot;MenuItemToMenuItemConnection&quot; */\nexport type MenuItemToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'MenuItemToMenuItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the MenuItemToMenuItemConnection connection */\nexport type MenuItemToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the MenuItem type and the MenuItemLinkable type */\nexport type MenuItemToMenuItemLinkableConnectionEdge = Edge & MenuItemLinkableConnectionEdge & OneToOneConnection & {\n  __typename?: 'MenuItemToMenuItemLinkableConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MenuItemLinkable;\n};\n\n/** Field Group */\nexport type MenuItem_Ncmazmenucustomfields = AcfFieldGroup & {\n  __typename?: 'MenuItem_Ncmazmenucustomfields';\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** (Only set/works to menu-location is Primary) */\n  isMegaMenu?: Maybe<Scalars['Boolean']['output']>;\n  numberOfPosts?: Maybe<Scalars['Float']['output']>;\n  showTabFilter?: Maybe<Scalars['Boolean']['output']>;\n  taxonomies?: Maybe<Array<Maybe<Category>>>;\n};\n\n/** Registered menu locations */\nexport enum MenuLocationEnum {\n  /** Put the menu in the footer location */\n  Footer = 'FOOTER',\n  /** Put the menu in the primary location */\n  Primary = 'PRIMARY'\n}\n\n/** The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum MenuNodeIdTypeEnum {\n  /** Identify a menu node by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a menu node by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a menu node by the slug of menu location to which it is assigned */\n  Location = 'LOCATION',\n  /** Identify a menu node by its name */\n  Name = 'NAME',\n  /** Identify a menu node by its slug */\n  Slug = 'SLUG'\n}\n\n/** Connection between the Menu type and the MenuItem type */\nexport type MenuToMenuItemConnection = Connection & MenuItemConnection & {\n  __typename?: 'MenuToMenuItemConnection';\n  /** Edges for the MenuToMenuItemConnection connection */\n  edges: Array<MenuToMenuItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuToMenuItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type MenuToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {\n  __typename?: 'MenuToMenuItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MenuItem;\n};\n\n/** Page Info on the &quot;MenuToMenuItemConnection&quot; */\nexport type MenuToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'MenuToMenuItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the MenuToMenuItemConnection connection */\nexport type MenuToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The MimeType of the object */\nexport enum MimeTypeEnum {\n  /** MimeType application/font-woff */\n  ApplicationFontWoff = 'APPLICATION_FONT_WOFF',\n  /** MimeType application/font-woff2 */\n  ApplicationFontWoff2 = 'APPLICATION_FONT_WOFF2',\n  /** MimeType application/java */\n  ApplicationJava = 'APPLICATION_JAVA',\n  /** MimeType application/msword */\n  ApplicationMsword = 'APPLICATION_MSWORD',\n  /** MimeType application/octet-stream */\n  ApplicationOctetStream = 'APPLICATION_OCTET_STREAM',\n  /** MimeType application/onenote */\n  ApplicationOnenote = 'APPLICATION_ONENOTE',\n  /** MimeType application/oxps */\n  ApplicationOxps = 'APPLICATION_OXPS',\n  /** MimeType application/pdf */\n  ApplicationPdf = 'APPLICATION_PDF',\n  /** MimeType application/rar */\n  ApplicationRar = 'APPLICATION_RAR',\n  /** MimeType application/redux */\n  ApplicationRedux = 'APPLICATION_REDUX',\n  /** MimeType application/rtf */\n  ApplicationRtf = 'APPLICATION_RTF',\n  /** MimeType application/ttaf+xml */\n  ApplicationTtafXml = 'APPLICATION_TTAF_XML',\n  /** MimeType application/vnd.apple.keynote */\n  ApplicationVndAppleKeynote = 'APPLICATION_VND_APPLE_KEYNOTE',\n  /** MimeType application/vnd.apple.numbers */\n  ApplicationVndAppleNumbers = 'APPLICATION_VND_APPLE_NUMBERS',\n  /** MimeType application/vnd.apple.pages */\n  ApplicationVndApplePages = 'APPLICATION_VND_APPLE_PAGES',\n  /** MimeType application/vnd.ms-access */\n  ApplicationVndMsAccess = 'APPLICATION_VND_MS_ACCESS',\n  /** MimeType application/vnd.ms-excel */\n  ApplicationVndMsExcel = 'APPLICATION_VND_MS_EXCEL',\n  /** MimeType application/vnd.ms-excel.addin.macroEnabled.12 */\n  ApplicationVndMsExcelAddinMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',\n  /** MimeType application/vnd.ms-excel.sheet.binary.macroEnabled.12 */\n  ApplicationVndMsExcelSheetBinaryMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',\n  /** MimeType application/vnd.ms-excel.sheet.macroEnabled.12 */\n  ApplicationVndMsExcelSheetMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',\n  /** MimeType application/vnd.ms-excel.template.macroEnabled.12 */\n  ApplicationVndMsExcelTemplateMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',\n  /** MimeType application/vnd.ms-fontobject */\n  ApplicationVndMsFontobject = 'APPLICATION_VND_MS_FONTOBJECT',\n  /** MimeType application/vnd.ms-powerpoint */\n  ApplicationVndMsPowerpoint = 'APPLICATION_VND_MS_POWERPOINT',\n  /** MimeType application/vnd.ms-powerpoint.addin.macroEnabled.12 */\n  ApplicationVndMsPowerpointAddinMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',\n  /** MimeType application/vnd.ms-powerpoint.presentation.macroEnabled.12 */\n  ApplicationVndMsPowerpointPresentationMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',\n  /** MimeType application/vnd.ms-powerpoint.slideshow.macroEnabled.12 */\n  ApplicationVndMsPowerpointSlideshowMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',\n  /** MimeType application/vnd.ms-powerpoint.slide.macroEnabled.12 */\n  ApplicationVndMsPowerpointSlideMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',\n  /** MimeType application/vnd.ms-powerpoint.template.macroEnabled.12 */\n  ApplicationVndMsPowerpointTemplateMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',\n  /** MimeType application/vnd.ms-project */\n  ApplicationVndMsProject = 'APPLICATION_VND_MS_PROJECT',\n  /** MimeType application/vnd.ms-word.document.macroEnabled.12 */\n  ApplicationVndMsWordDocumentMacroenabled_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',\n  /** MimeType application/vnd.ms-word.template.macroEnabled.12 */\n  ApplicationVndMsWordTemplateMacroenabled_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',\n  /** MimeType application/vnd.ms-write */\n  ApplicationVndMsWrite = 'APPLICATION_VND_MS_WRITE',\n  /** MimeType application/vnd.ms-xpsdocument */\n  ApplicationVndMsXpsdocument = 'APPLICATION_VND_MS_XPSDOCUMENT',\n  /** MimeType application/vnd.oasis.opendocument.chart */\n  ApplicationVndOasisOpendocumentChart = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',\n  /** MimeType application/vnd.oasis.opendocument.database */\n  ApplicationVndOasisOpendocumentDatabase = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',\n  /** MimeType application/vnd.oasis.opendocument.formula */\n  ApplicationVndOasisOpendocumentFormula = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',\n  /** MimeType application/vnd.oasis.opendocument.graphics */\n  ApplicationVndOasisOpendocumentGraphics = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',\n  /** MimeType application/vnd.oasis.opendocument.presentation */\n  ApplicationVndOasisOpendocumentPresentation = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',\n  /** MimeType application/vnd.oasis.opendocument.spreadsheet */\n  ApplicationVndOasisOpendocumentSpreadsheet = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',\n  /** MimeType application/vnd.oasis.opendocument.text */\n  ApplicationVndOasisOpendocumentText = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',\n  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.presentation */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',\n  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slide */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',\n  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slideshow */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',\n  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.template */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',\n  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet */\n  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',\n  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.template */\n  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',\n  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.document */\n  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',\n  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.template */\n  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',\n  /** MimeType application/wordperfect */\n  ApplicationWordperfect = 'APPLICATION_WORDPERFECT',\n  /** MimeType application/x-7z-compressed */\n  ApplicationX_7ZCompressed = 'APPLICATION_X_7Z_COMPRESSED',\n  /** MimeType application/x-gzip */\n  ApplicationXGzip = 'APPLICATION_X_GZIP',\n  /** MimeType application/x-tar */\n  ApplicationXTar = 'APPLICATION_X_TAR',\n  /** MimeType application/zip */\n  ApplicationZip = 'APPLICATION_ZIP',\n  /** MimeType audio/aac */\n  AudioAac = 'AUDIO_AAC',\n  /** MimeType audio/flac */\n  AudioFlac = 'AUDIO_FLAC',\n  /** MimeType audio/midi */\n  AudioMidi = 'AUDIO_MIDI',\n  /** MimeType audio/mpeg */\n  AudioMpeg = 'AUDIO_MPEG',\n  /** MimeType audio/ogg */\n  AudioOgg = 'AUDIO_OGG',\n  /** MimeType audio/wav */\n  AudioWav = 'AUDIO_WAV',\n  /** MimeType audio/x-matroska */\n  AudioXMatroska = 'AUDIO_X_MATROSKA',\n  /** MimeType audio/x-ms-wax */\n  AudioXMsWax = 'AUDIO_X_MS_WAX',\n  /** MimeType audio/x-ms-wma */\n  AudioXMsWma = 'AUDIO_X_MS_WMA',\n  /** MimeType audio/x-realaudio */\n  AudioXRealaudio = 'AUDIO_X_REALAUDIO',\n  /** MimeType font/otf */\n  FontOtf = 'FONT_OTF',\n  /** MimeType font/ttf */\n  FontTtf = 'FONT_TTF',\n  /** MimeType image/bmp */\n  ImageBmp = 'IMAGE_BMP',\n  /** MimeType image/gif */\n  ImageGif = 'IMAGE_GIF',\n  /** MimeType image/heic */\n  ImageHeic = 'IMAGE_HEIC',\n  /** MimeType image/jpeg */\n  ImageJpeg = 'IMAGE_JPEG',\n  /** MimeType image/png */\n  ImagePng = 'IMAGE_PNG',\n  /** MimeType image/svg+xml */\n  ImageSvgXml = 'IMAGE_SVG_XML',\n  /** MimeType image/tiff */\n  ImageTiff = 'IMAGE_TIFF',\n  /** MimeType image/webp */\n  ImageWebp = 'IMAGE_WEBP',\n  /** MimeType image/x-icon */\n  ImageXIcon = 'IMAGE_X_ICON',\n  /** MimeType text/calendar */\n  TextCalendar = 'TEXT_CALENDAR',\n  /** MimeType text/css */\n  TextCss = 'TEXT_CSS',\n  /** MimeType text/csv */\n  TextCsv = 'TEXT_CSV',\n  /** MimeType text/plain */\n  TextPlain = 'TEXT_PLAIN',\n  /** MimeType text/richtext */\n  TextRichtext = 'TEXT_RICHTEXT',\n  /** MimeType text/tab-separated-values */\n  TextTabSeparatedValues = 'TEXT_TAB_SEPARATED_VALUES',\n  /** MimeType text/vtt */\n  TextVtt = 'TEXT_VTT',\n  /** MimeType video/3gpp */\n  Video_3Gpp = 'VIDEO_3GPP',\n  /** MimeType video/3gpp2 */\n  Video_3Gpp2 = 'VIDEO_3GPP2',\n  /** MimeType video/avi */\n  VideoAvi = 'VIDEO_AVI',\n  /** MimeType video/divx */\n  VideoDivx = 'VIDEO_DIVX',\n  /** MimeType video/mp4 */\n  VideoMp4 = 'VIDEO_MP4',\n  /** MimeType video/mpeg */\n  VideoMpeg = 'VIDEO_MPEG',\n  /** MimeType video/ogg */\n  VideoOgg = 'VIDEO_OGG',\n  /** MimeType video/quicktime */\n  VideoQuicktime = 'VIDEO_QUICKTIME',\n  /** MimeType video/webm */\n  VideoWebm = 'VIDEO_WEBM',\n  /** MimeType video/x-flv */\n  VideoXFlv = 'VIDEO_X_FLV',\n  /** MimeType video/x-matroska */\n  VideoXMatroska = 'VIDEO_X_MATROSKA',\n  /** MimeType video/x-ms-asf */\n  VideoXMsAsf = 'VIDEO_X_MS_ASF',\n  /** MimeType video/x-ms-wm */\n  VideoXMsWm = 'VIDEO_X_MS_WM',\n  /** MimeType video/x-ms-wmv */\n  VideoXMsWmv = 'VIDEO_X_MS_WMV',\n  /** MimeType video/x-ms-wmx */\n  VideoXMsWmx = 'VIDEO_X_MS_WMX'\n}\n\n/** A block used for editing the site */\nexport type NcmazFaustBlockMagazine = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'NcmazFaustBlockMagazine';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the NcmazFaustBlockMagazine Block Type */\n  attributes?: Maybe<NcmazFaustBlockMagazineAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the NcmazFaustBlockMagazine Block Type */\nexport type NcmazFaustBlockMagazineAttributes = {\n  __typename?: 'NcmazFaustBlockMagazineAttributes';\n  /** The &quot;blockVariation&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  blockVariation?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;initData&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  initData?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;queries&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  queries?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showFilterTab&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  showFilterTab?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;uniqueId&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  uniqueId?: Maybe<Scalars['String']['output']>;\n  /** The &quot;viewMoreHref&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  viewMoreHref?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type NcmazFaustBlockTerms = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'NcmazFaustBlockTerms';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the NcmazFaustBlockTerms Block Type */\n  attributes?: Maybe<NcmazFaustBlockTermsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the NcmazFaustBlockTerms Block Type */\nexport type NcmazFaustBlockTermsAttributes = {\n  __typename?: 'NcmazFaustBlockTermsAttributes';\n  /** The &quot;className&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** A node that can have an author assigned to it */\nexport type NodeWithAuthor = {\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** Connection between the NodeWithAuthor type and the User type */\nexport type NodeWithAuthorToUserConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {\n  __typename?: 'NodeWithAuthorToUserConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: User;\n};\n\n/** A node that can have comments associated with it */\nexport type NodeWithComments = {\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** A node that supports the content editor */\nexport type NodeWithContentEditor = {\n  /** The content of the post. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n\n/** A node that supports the content editor */\nexport type NodeWithContentEditorContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Node that has content blocks associated with it */\nexport type NodeWithEditorBlocks = {\n  /** List of editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n};\n\n\n/** Node that has content blocks associated with it */\nexport type NodeWithEditorBlocksEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** A node that can have an excerpt */\nexport type NodeWithExcerpt = {\n  /** The excerpt of the post. */\n  excerpt?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n\n/** A node that can have an excerpt */\nexport type NodeWithExcerptExcerptArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** A node that can have a featured image set */\nexport type NodeWithFeaturedImage = {\n  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */\n  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;\n  /** The database identifier for the featured image node assigned to the content node */\n  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Globally unique ID of the featured image assigned to the node */\n  featuredImageId?: Maybe<Scalars['ID']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** Connection between the NodeWithFeaturedImage type and the MediaItem type */\nexport type NodeWithFeaturedImageToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** A node that can have page attributes */\nexport type NodeWithPageAttributes = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: Maybe<Scalars['Int']['output']>;\n};\n\n/** Node that has Page content blocks associated with it */\nexport type NodeWithPageEditorBlocks = {\n  /** List of Page editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PageEditorBlock>>>;\n};\n\n\n/** Node that has Page content blocks associated with it */\nexport type NodeWithPageEditorBlocksEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Node that has Post content blocks associated with it */\nexport type NodeWithPostEditorBlocks = {\n  /** List of Post editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PostEditorBlock>>>;\n};\n\n\n/** Node that has Post content blocks associated with it */\nexport type NodeWithPostEditorBlocksEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** A node that can have revisions */\nexport type NodeWithRevisions = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** True if the node is a revision of another node */\n  isRevision?: Maybe<Scalars['Boolean']['output']>;\n  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */\n  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;\n};\n\n/** Connection between the NodeWithRevisions type and the ContentNode type */\nexport type NodeWithRevisionsToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'NodeWithRevisionsToContentNodeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentNode;\n};\n\n/** A node that can have a template associated with it */\nexport type NodeWithTemplate = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** The template assigned to the node */\n  template?: Maybe<ContentTemplate>;\n};\n\n/** A node that NodeWith a title */\nexport type NodeWithTitle = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A node that NodeWith a title */\nexport type NodeWithTitleTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** A node that can have trackbacks and pingbacks */\nexport type NodeWithTrackbacks = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Whether the pings are open or closed for this particular post. */\n  pingStatus?: Maybe<Scalars['String']['output']>;\n  /** URLs that have been pinged. */\n  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** URLs queued to be pinged. */\n  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n};\n\n/** A singular connection from one Node to another, with support for relational data on the &quot;edge&quot; of the connection. */\nexport type OneToOneConnection = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected node */\n  node: Node;\n};\n\n/** The cardinality of the connection order */\nexport enum OrderEnum {\n  /** Sort the query result set in an ascending order */\n  Asc = 'ASC',\n  /** Sort the query result set in a descending order */\n  Desc = 'DESC'\n}\n\n/** The page type */\nexport type Page = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithPageEditorBlocks & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {\n  __typename?: 'Page';\n  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the HierarchicalContentNode type and the ContentNode type */\n  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Page type and the Comment type */\n  comments?: Maybe<PageToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The content of the post. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** List of Page editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PageEditorBlock>>>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */\n  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;\n  /** The database identifier for the featured image node assigned to the content node */\n  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Globally unique ID of the featured image assigned to the node */\n  featuredImageId?: Maybe<Scalars['ID']['output']>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the page object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether this page is set to the static front page. */\n  isFrontPage: Scalars['Boolean']['output'];\n  /** Whether this page is set to the blog posts page. */\n  isPostsPage: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether this page is set to the privacy page. */\n  isPrivacyPage: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** True if the node is a revision of another node */\n  isRevision?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: Maybe<Scalars['Int']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  pageId: Scalars['Int']['output'];\n  /** The parent of the node. The parent object can be of various types */\n  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Page type and the page type */\n  preview?: Maybe<PageToPreviewConnectionEdge>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */\n  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;\n  /** Connection between the Page type and the page type */\n  revisions?: Maybe<PageToRevisionConnection>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The page type */\nexport type PageAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PageToCommentConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The page type */\nexport type PageEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** The page type */\nexport type PageEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The page type */\nexport type PageEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The page type */\nexport type PageRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PageToRevisionConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Connection to page Nodes */\nexport type PageConnection = {\n  /** A list of edges (relational context) between RootQuery and connected page Nodes */\n  edges: Array<PageConnectionEdge>;\n  /** A list of connected page Nodes */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected page */\nexport type PageConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected page Node */\n  node: Page;\n};\n\n/** Page Info on the connected PageConnectionEdge */\nexport type PageConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** EditorBlock Interface for Page Block Type */\nexport type PageEditorBlock = {\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the Block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PageIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the Page type and the Comment type */\nexport type PageToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'PageToCommentConnection';\n  /** Edges for the PageToCommentConnection connection */\n  edges: Array<PageToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PageToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'PageToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;PageToCommentConnection&quot; */\nexport type PageToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PageToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PageToCommentConnection connection */\nexport type PageToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the Page type and the page type */\nexport type PageToPreviewConnectionEdge = Edge & OneToOneConnection & PageConnectionEdge & {\n  __typename?: 'PageToPreviewConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Page;\n};\n\n/** Connection between the Page type and the page type */\nexport type PageToRevisionConnection = Connection & PageConnection & {\n  __typename?: 'PageToRevisionConnection';\n  /** Edges for the PageToRevisionConnection connection */\n  edges: Array<PageToRevisionConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageToRevisionConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PageToRevisionConnectionEdge = Edge & PageConnectionEdge & {\n  __typename?: 'PageToRevisionConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Page;\n};\n\n/** Page Info on the &quot;PageToRevisionConnection&quot; */\nexport type PageToRevisionConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PageToRevisionConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PageToRevisionConnection connection */\nexport type PageToRevisionConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** An plugin object */\nexport type Plugin = Node & {\n  __typename?: 'Plugin';\n  /** Name of the plugin author(s), may also be a company name. */\n  author?: Maybe<Scalars['String']['output']>;\n  /** URI for the related author(s)/company website. */\n  authorUri?: Maybe<Scalars['String']['output']>;\n  /** Description of the plugin. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the plugin object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Display name of the plugin. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Plugin path. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** URI for the plugin website. This is useful for directing users for support requests etc. */\n  pluginUri?: Maybe<Scalars['String']['output']>;\n  /** Current version of the plugin. */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to Plugin Nodes */\nexport type PluginConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Plugin Nodes */\n  edges: Array<PluginConnectionEdge>;\n  /** A list of connected Plugin Nodes */\n  nodes: Array<Plugin>;\n  /** Information about pagination in a connection. */\n  pageInfo: PluginConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Plugin */\nexport type PluginConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Plugin Node */\n  node: Plugin;\n};\n\n/** Page Info on the connected PluginConnectionEdge */\nexport type PluginConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The status of the WordPress plugin. */\nexport enum PluginStatusEnum {\n  /** The plugin is currently active. */\n  Active = 'ACTIVE',\n  /** The plugin is a drop-in plugin. */\n  DropIn = 'DROP_IN',\n  /** The plugin is currently inactive. */\n  Inactive = 'INACTIVE',\n  /** The plugin is a must-use plugin. */\n  MustUse = 'MUST_USE',\n  /** The plugin is technically active but was paused while loading. */\n  Paused = 'PAUSED',\n  /** The plugin was active recently. */\n  RecentlyActive = 'RECENTLY_ACTIVE',\n  /** The plugin has an upgrade available. */\n  Upgrade = 'UPGRADE'\n}\n\n/** The post type */\nexport type Post = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithPostEditorBlocks & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable & {\n  __typename?: 'Post';\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Post type and the category type */\n  categories?: Maybe<PostToCategoryConnection>;\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Post type and the Comment type */\n  comments?: Maybe<PostToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The content of the post. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** List of Post editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PostEditorBlock>>>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The excerpt of the post. */\n  excerpt?: Maybe<Scalars['String']['output']>;\n  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */\n  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;\n  /** The database identifier for the featured image node assigned to the content node */\n  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Globally unique ID of the featured image assigned to the node */\n  featuredImageId?: Maybe<Scalars['ID']['output']>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the post object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** True if the node is a revision of another node */\n  isRevision?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether this page is sticky */\n  isSticky: Scalars['Boolean']['output'];\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Ncmaz Post Meta Data&quot; was set to Show in GraphQL. */\n  ncPostMetaData?: Maybe<Post_Ncpostmetadata>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Audio Url&quot; was set to Show in GraphQL. */\n  ncmazAudioUrl?: Maybe<Post_Ncmazaudiourl>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Gallery Images (Max 8 images)&quot; was set to Show in GraphQL. */\n  ncmazGalleryImgs?: Maybe<Post_Ncmazgalleryimgs>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Video Url&quot; was set to Show in GraphQL. */\n  ncmazVideoUrl?: Maybe<Post_Ncmazvideourl>;\n  /** Whether the pings are open or closed for this particular post. */\n  pingStatus?: Maybe<Scalars['String']['output']>;\n  /** URLs that have been pinged. */\n  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Connection between the Post type and the postFormat type */\n  postFormats?: Maybe<PostToPostFormatConnection>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  postId: Scalars['Int']['output'];\n  /** Connection between the Post type and the post type */\n  preview?: Maybe<PostToPreviewConnectionEdge>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */\n  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;\n  /** Connection between the Post type and the post type */\n  revisions?: Maybe<PostToRevisionConnection>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Post type and the tag type */\n  tags?: Maybe<PostToTagConnection>;\n  /** The template assigned to the node */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Connection between the Post type and the TermNode type */\n  terms?: Maybe<PostToTermNodeConnection>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** URLs queued to be pinged. */\n  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The post type */\nexport type PostCategoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToCategoryConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToCommentConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The post type */\nexport type PostEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** The post type */\nexport type PostEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The post type */\nexport type PostEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The post type */\nexport type PostExcerptArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The post type */\nexport type PostPostFormatsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToPostFormatConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToRevisionConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostTagsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToTagConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostTermsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToTermNodeConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Set relationships between the post to categories */\nexport type PostCategoriesInput = {\n  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostCategoriesNodeInput>>>;\n};\n\n/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostCategoriesNodeInput = {\n  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection to post Nodes */\nexport type PostConnection = {\n  /** A list of edges (relational context) between RootQuery and connected post Nodes */\n  edges: Array<PostConnectionEdge>;\n  /** A list of connected post Nodes */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected post */\nexport type PostConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected post Node */\n  node: Post;\n};\n\n/** Page Info on the connected PostConnectionEdge */\nexport type PostConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** EditorBlock Interface for Post Block Type */\nexport type PostEditorBlock = {\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the Block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** The postFormat type */\nexport type PostFormat = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {\n  __typename?: 'PostFormat';\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the PostFormat type and the ContentNode type */\n  contentNodes?: Maybe<PostFormatToContentNodeConnection>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Ncmaz Taxonomy Meta&quot; was set to Show in GraphQL. */\n  ncTaxonomyMeta?: Maybe<PostFormat_Nctaxonomymeta>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  postFormatId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the PostFormat type and the post type */\n  posts?: Maybe<PostFormatToPostConnection>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** Connection between the PostFormat type and the Taxonomy type */\n  taxonomy?: Maybe<PostFormatToTaxonomyConnectionEdge>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostFormatToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostFormatToPostConnectionWhereArgs>;\n};\n\n/** Connection to postFormat Nodes */\nexport type PostFormatConnection = {\n  /** A list of edges (relational context) between RootQuery and connected postFormat Nodes */\n  edges: Array<PostFormatConnectionEdge>;\n  /** A list of connected postFormat Nodes */\n  nodes: Array<PostFormat>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostFormatConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected postFormat */\nexport type PostFormatConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected postFormat Node */\n  node: PostFormat;\n};\n\n/** Page Info on the connected PostFormatConnectionEdge */\nexport type PostFormatConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PostFormatIdType {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the PostFormat type and the ContentNode type */\nexport type PostFormatToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'PostFormatToContentNodeConnection';\n  /** Edges for the PostFormatToContentNodeConnection connection */\n  edges: Array<PostFormatToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostFormatToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostFormatToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'PostFormatToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;PostFormatToContentNodeConnection&quot; */\nexport type PostFormatToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PostFormatToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostFormatToContentNodeConnection connection */\nexport type PostFormatToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPostFormatEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the PostFormat type and the post type */\nexport type PostFormatToPostConnection = Connection & PostConnection & {\n  __typename?: 'PostFormatToPostConnection';\n  /** Edges for the PostFormatToPostConnection connection */\n  edges: Array<PostFormatToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostFormatToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostFormatToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'PostFormatToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;PostFormatToPostConnection&quot; */\nexport type PostFormatToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostFormatToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostFormatToPostConnection connection */\nexport type PostFormatToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the PostFormat type and the Taxonomy type */\nexport type PostFormatToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {\n  __typename?: 'PostFormatToTaxonomyConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Taxonomy;\n};\n\n/** Field Group */\nexport type PostFormat_Nctaxonomymeta = AcfFieldGroup & {\n  __typename?: 'PostFormat_Nctaxonomymeta';\n  color?: Maybe<Scalars['String']['output']>;\n  featuredImage?: Maybe<MediaItem>;\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PostIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  Slug = 'SLUG',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** The format of post field data. */\nexport enum PostObjectFieldFormatEnum {\n  /** Provide the field value directly from database. Null on unauthenticated requests. */\n  Raw = 'RAW',\n  /** Provide the field value as rendered by WordPress. Default. */\n  Rendered = 'RENDERED'\n}\n\n/** The column to use when filtering by date */\nexport enum PostObjectsConnectionDateColumnEnum {\n  /** The date the comment was created in local time. */\n  Date = 'DATE',\n  /** The most recent modification date of the comment. */\n  Modified = 'MODIFIED'\n}\n\n/** Field to order the connection by */\nexport enum PostObjectsConnectionOrderbyEnum {\n  /** Order by author */\n  Author = 'AUTHOR',\n  /** Order by the number of comments it has acquired */\n  CommentCount = 'COMMENT_COUNT',\n  /** Order by publish date */\n  Date = 'DATE',\n  /** Preserve the ID order given in the IN array */\n  In = 'IN',\n  /** Order by the menu order value */\n  MenuOrder = 'MENU_ORDER',\n  /** Order by last modified date */\n  Modified = 'MODIFIED',\n  /** Preserve slug order given in the NAME_IN array */\n  NameIn = 'NAME_IN',\n  /** Order by parent ID */\n  Parent = 'PARENT',\n  /** Order by slug */\n  Slug = 'SLUG',\n  /** Order by title */\n  Title = 'TITLE'\n}\n\n/** Options for ordering the connection */\nexport type PostObjectsConnectionOrderbyInput = {\n  /** The field to order the connection by */\n  field: PostObjectsConnectionOrderbyEnum;\n  /** Possible directions in which to order a list of items */\n  order: OrderEnum;\n};\n\n/** Set relationships between the post to postFormats */\nexport type PostPostFormatsInput = {\n  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostPostFormatsNodeInput>>>;\n};\n\n/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostPostFormatsNodeInput = {\n  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The status of the object. */\nexport enum PostStatusEnum {\n  /** Objects with the acf-disabled status */\n  AcfDisabled = 'ACF_DISABLED',\n  /** Objects with the auto-draft status */\n  AutoDraft = 'AUTO_DRAFT',\n  /** Objects with the draft status */\n  Draft = 'DRAFT',\n  /** Objects with the future status */\n  Future = 'FUTURE',\n  /** Objects with the inherit status */\n  Inherit = 'INHERIT',\n  /** Objects with the pending status */\n  Pending = 'PENDING',\n  /** Objects with the private status */\n  Private = 'PRIVATE',\n  /** Objects with the publish status */\n  Publish = 'PUBLISH',\n  /** Objects with the request-completed status */\n  RequestCompleted = 'REQUEST_COMPLETED',\n  /** Objects with the request-confirmed status */\n  RequestConfirmed = 'REQUEST_CONFIRMED',\n  /** Objects with the request-failed status */\n  RequestFailed = 'REQUEST_FAILED',\n  /** Objects with the request-pending status */\n  RequestPending = 'REQUEST_PENDING',\n  /** Objects with the trash status */\n  Trash = 'TRASH'\n}\n\n/** Set relationships between the post to tags */\nexport type PostTagsInput = {\n  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostTagsNodeInput>>>;\n};\n\n/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostTagsNodeInput = {\n  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Post type and the category type */\nexport type PostToCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'PostToCategoryConnection';\n  /** Edges for the PostToCategoryConnection connection */\n  edges: Array<PostToCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'PostToCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;PostToCategoryConnection&quot; */\nexport type PostToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PostToCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToCategoryConnection connection */\nexport type PostToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Post type and the Comment type */\nexport type PostToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'PostToCommentConnection';\n  /** Edges for the PostToCommentConnection connection */\n  edges: Array<PostToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'PostToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;PostToCommentConnection&quot; */\nexport type PostToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PostToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToCommentConnection connection */\nexport type PostToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the Post type and the postFormat type */\nexport type PostToPostFormatConnection = Connection & PostFormatConnection & {\n  __typename?: 'PostToPostFormatConnection';\n  /** Edges for the PostToPostFormatConnection connection */\n  edges: Array<PostToPostFormatConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<PostFormat>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToPostFormatConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {\n  __typename?: 'PostToPostFormatConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: PostFormat;\n};\n\n/** Page Info on the &quot;PostToPostFormatConnection&quot; */\nexport type PostToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToPostFormatConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToPostFormatConnection connection */\nexport type PostToPostFormatConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Post type and the post type */\nexport type PostToPreviewConnectionEdge = Edge & OneToOneConnection & PostConnectionEdge & {\n  __typename?: 'PostToPreviewConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Post;\n};\n\n/** Connection between the Post type and the post type */\nexport type PostToRevisionConnection = Connection & PostConnection & {\n  __typename?: 'PostToRevisionConnection';\n  /** Edges for the PostToRevisionConnection connection */\n  edges: Array<PostToRevisionConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToRevisionConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToRevisionConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'PostToRevisionConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;PostToRevisionConnection&quot; */\nexport type PostToRevisionConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToRevisionConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToRevisionConnection connection */\nexport type PostToRevisionConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Post type and the tag type */\nexport type PostToTagConnection = Connection & TagConnection & {\n  __typename?: 'PostToTagConnection';\n  /** Edges for the PostToTagConnection connection */\n  edges: Array<PostToTagConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Tag>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToTagConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToTagConnectionEdge = Edge & TagConnectionEdge & {\n  __typename?: 'PostToTagConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Tag;\n};\n\n/** Page Info on the &quot;PostToTagConnection&quot; */\nexport type PostToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToTagConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToTagConnection connection */\nexport type PostToTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Post type and the TermNode type */\nexport type PostToTermNodeConnection = Connection & TermNodeConnection & {\n  __typename?: 'PostToTermNodeConnection';\n  /** Edges for the PostToTermNodeConnection connection */\n  edges: Array<PostToTermNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<TermNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToTermNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {\n  __typename?: 'PostToTermNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: TermNode;\n};\n\n/** Page Info on the &quot;PostToTermNodeConnection&quot; */\nexport type PostToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToTermNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToTermNodeConnection connection */\nexport type PostToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The Taxonomy to filter terms by */\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Details for labels of the PostType */\nexport type PostTypeLabelDetails = {\n  __typename?: 'PostTypeLabelDetails';\n  /** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */\n  addNew?: Maybe<Scalars['String']['output']>;\n  /** Label for adding a new singular item. */\n  addNewItem?: Maybe<Scalars['String']['output']>;\n  /** Label to signify all items in a submenu link. */\n  allItems?: Maybe<Scalars['String']['output']>;\n  /** Label for archives in nav menus */\n  archives?: Maybe<Scalars['String']['output']>;\n  /** Label for the attributes meta box. */\n  attributes?: Maybe<Scalars['String']['output']>;\n  /** Label for editing a singular item. */\n  editItem?: Maybe<Scalars['String']['output']>;\n  /** Label for the Featured Image meta box title. */\n  featuredImage?: Maybe<Scalars['String']['output']>;\n  /** Label for the table views hidden heading. */\n  filterItemsList?: Maybe<Scalars['String']['output']>;\n  /** Label for the media frame button. */\n  insertIntoItem?: Maybe<Scalars['String']['output']>;\n  /** Label for the table hidden heading. */\n  itemsList?: Maybe<Scalars['String']['output']>;\n  /** Label for the table pagination hidden heading. */\n  itemsListNavigation?: Maybe<Scalars['String']['output']>;\n  /** Label for the menu name. */\n  menuName?: Maybe<Scalars['String']['output']>;\n  /** General name for the post type, usually plural. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Label for the new item page title. */\n  newItem?: Maybe<Scalars['String']['output']>;\n  /** Label used when no items are found. */\n  notFound?: Maybe<Scalars['String']['output']>;\n  /** Label used when no items are in the trash. */\n  notFoundInTrash?: Maybe<Scalars['String']['output']>;\n  /** Label used to prefix parents of hierarchical items. */\n  parentItemColon?: Maybe<Scalars['String']['output']>;\n  /** Label for removing the featured image. */\n  removeFeaturedImage?: Maybe<Scalars['String']['output']>;\n  /** Label for searching plural items. */\n  searchItems?: Maybe<Scalars['String']['output']>;\n  /** Label for setting the featured image. */\n  setFeaturedImage?: Maybe<Scalars['String']['output']>;\n  /** Name for one object of this post type. */\n  singularName?: Maybe<Scalars['String']['output']>;\n  /** Label for the media frame filter. */\n  uploadedToThisItem?: Maybe<Scalars['String']['output']>;\n  /** Label in the media frame for using a featured image. */\n  useFeaturedImage?: Maybe<Scalars['String']['output']>;\n  /** Label for viewing a singular item. */\n  viewItem?: Maybe<Scalars['String']['output']>;\n  /** Label for viewing post type archives. */\n  viewItems?: Maybe<Scalars['String']['output']>;\n};\n\n/** Field Group */\nexport type Post_Ncmazaudiourl = AcfFieldGroup & {\n  __typename?: 'Post_Ncmazaudiourl';\n  audioUrl?: Maybe<Scalars['String']['output']>;\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Field Group */\nexport type Post_Ncmazgalleryimgs = AcfFieldGroup & {\n  __typename?: 'Post_Ncmazgalleryimgs';\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  image1?: Maybe<MediaItem>;\n  image2?: Maybe<MediaItem>;\n  image3?: Maybe<MediaItem>;\n  image4?: Maybe<MediaItem>;\n  image5?: Maybe<MediaItem>;\n  image6?: Maybe<MediaItem>;\n  image7?: Maybe<MediaItem>;\n  image8?: Maybe<MediaItem>;\n};\n\n/** Field Group */\nexport type Post_Ncmazvideourl = AcfFieldGroup & {\n  __typename?: 'Post_Ncmazvideourl';\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  videoUrl?: Maybe<Scalars['String']['output']>;\n};\n\n/** Field Group */\nexport type Post_Ncpostmetadata = AcfFieldGroup & {\n  __typename?: 'Post_Ncpostmetadata';\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** List the users (id of logged in user and IP address of not logged in) who liked this post. */\n  reactionLikedList?: Maybe<Scalars['String']['output']>;\n  /** Reading time in minutes. */\n  readingTime?: Maybe<Scalars['Float']['output']>;\n  /** List the users (id of logged in user and IP address of not logged in) who saved this post. */\n  savedList?: Maybe<Scalars['String']['output']>;\n  /** Show right sidebar on single post page. */\n  showRightSidebar?: Maybe<Scalars['Boolean']['output']>;\n  singlePageStyle?: Maybe<Scalars['String']['output']>;\n  /** Count the number of views of this post. */\n  viewsCount?: Maybe<Scalars['String']['output']>;\n};\n\n/** Nodes that can be seen in a preview (unpublished) state. */\nexport type Previewable = {\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** The reading setting type */\nexport type ReadingSettings = {\n  __typename?: 'ReadingSettings';\n  /** The ID of the page that should display the latest posts */\n  pageForPosts?: Maybe<Scalars['Int']['output']>;\n  /** The ID of the page that should be displayed on the front page */\n  pageOnFront?: Maybe<Scalars['Int']['output']>;\n  /** Blog pages show at most. */\n  postsPerPage?: Maybe<Scalars['Int']['output']>;\n  /** What to show on the front page */\n  showOnFront?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the registerUser mutation. */\nexport type RegisterUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the user's username. */\n  username: Scalars['String']['input'];\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the registerUser mutation. */\nexport type RegisterUserPayload = {\n  __typename?: 'RegisterUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** The logical relation between each item in the array when there are more than one. */\nexport enum RelationEnum {\n  /** The logical AND condition returns true if both operands are true, otherwise, it returns false. */\n  And = 'AND',\n  /** The logical OR condition returns false if both operands are false, otherwise, it returns true. */\n  Or = 'OR'\n}\n\n/** Input for the resetUserPassword mutation. */\nexport type ResetUserPasswordInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Password reset key */\n  key?: InputMaybe<Scalars['String']['input']>;\n  /** The user's login (username). */\n  login?: InputMaybe<Scalars['String']['input']>;\n  /** The new password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the resetUserPassword mutation. */\nexport type ResetUserPasswordPayload = {\n  __typename?: 'ResetUserPasswordPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** Input for the restoreComment mutation. */\nexport type RestoreCommentInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment to be restored */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the restoreComment mutation. */\nexport type RestoreCommentPayload = {\n  __typename?: 'RestoreCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The restored comment object */\n  comment?: Maybe<Comment>;\n  /** The ID of the restored comment */\n  restoredId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** The root mutation */\nexport type RootMutation = {\n  __typename?: 'RootMutation';\n  /** The createCategory mutation */\n  createCategory?: Maybe<CreateCategoryPayload>;\n  /** The createComment mutation */\n  createComment?: Maybe<CreateCommentPayload>;\n  /** The createMediaItem mutation */\n  createMediaItem?: Maybe<CreateMediaItemPayload>;\n  /** The createPage mutation */\n  createPage?: Maybe<CreatePagePayload>;\n  /** The createPost mutation */\n  createPost?: Maybe<CreatePostPayload>;\n  /** The createPostFormat mutation */\n  createPostFormat?: Maybe<CreatePostFormatPayload>;\n  /** The createTag mutation */\n  createTag?: Maybe<CreateTagPayload>;\n  /** The createUser mutation */\n  createUser?: Maybe<CreateUserPayload>;\n  /** The deleteCategory mutation */\n  deleteCategory?: Maybe<DeleteCategoryPayload>;\n  /** The deleteComment mutation */\n  deleteComment?: Maybe<DeleteCommentPayload>;\n  /** The deleteMediaItem mutation */\n  deleteMediaItem?: Maybe<DeleteMediaItemPayload>;\n  /** The deletePage mutation */\n  deletePage?: Maybe<DeletePagePayload>;\n  /** The deletePost mutation */\n  deletePost?: Maybe<DeletePostPayload>;\n  /** The deletePostFormat mutation */\n  deletePostFormat?: Maybe<DeletePostFormatPayload>;\n  /** The deleteTag mutation */\n  deleteTag?: Maybe<DeleteTagPayload>;\n  /** The deleteUser mutation */\n  deleteUser?: Maybe<DeleteUserPayload>;\n  /** The generateAuthorizationCode mutation */\n  generateAuthorizationCode?: Maybe<GenerateAuthorizationCodePayload>;\n  /** Increase the count. */\n  increaseCount?: Maybe<Scalars['Int']['output']>;\n  /** The registerUser mutation */\n  registerUser?: Maybe<RegisterUserPayload>;\n  /** The resetUserPassword mutation */\n  resetUserPassword?: Maybe<ResetUserPasswordPayload>;\n  /** The restoreComment mutation */\n  restoreComment?: Maybe<RestoreCommentPayload>;\n  /** Send password reset email to user */\n  sendPasswordResetEmail?: Maybe<SendPasswordResetEmailPayload>;\n  /** The updateCategory mutation */\n  updateCategory?: Maybe<UpdateCategoryPayload>;\n  /** The updateComment mutation */\n  updateComment?: Maybe<UpdateCommentPayload>;\n  /** The updateMediaItem mutation */\n  updateMediaItem?: Maybe<UpdateMediaItemPayload>;\n  /** The updatePage mutation */\n  updatePage?: Maybe<UpdatePagePayload>;\n  /** The updatePost mutation */\n  updatePost?: Maybe<UpdatePostPayload>;\n  /** The updatePostFormat mutation */\n  updatePostFormat?: Maybe<UpdatePostFormatPayload>;\n  /** The updateSettings mutation */\n  updateSettings?: Maybe<UpdateSettingsPayload>;\n  /** The updateTag mutation */\n  updateTag?: Maybe<UpdateTagPayload>;\n  /** The updateUser mutation */\n  updateUser?: Maybe<UpdateUserPayload>;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateCategoryArgs = {\n  input: CreateCategoryInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateCommentArgs = {\n  input: CreateCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateMediaItemArgs = {\n  input: CreateMediaItemInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreatePageArgs = {\n  input: CreatePageInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreatePostArgs = {\n  input: CreatePostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreatePostFormatArgs = {\n  input: CreatePostFormatInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateTagArgs = {\n  input: CreateTagInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteCategoryArgs = {\n  input: DeleteCategoryInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteCommentArgs = {\n  input: DeleteCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteMediaItemArgs = {\n  input: DeleteMediaItemInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeletePageArgs = {\n  input: DeletePageInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeletePostArgs = {\n  input: DeletePostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeletePostFormatArgs = {\n  input: DeletePostFormatInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteTagArgs = {\n  input: DeleteTagInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteUserArgs = {\n  input: DeleteUserInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationGenerateAuthorizationCodeArgs = {\n  input: GenerateAuthorizationCodeInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationIncreaseCountArgs = {\n  count?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root mutation */\nexport type RootMutationRegisterUserArgs = {\n  input: RegisterUserInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationRestoreCommentArgs = {\n  input: RestoreCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationSendPasswordResetEmailArgs = {\n  input: SendPasswordResetEmailInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateCategoryArgs = {\n  input: UpdateCategoryInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateCommentArgs = {\n  input: UpdateCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateMediaItemArgs = {\n  input: UpdateMediaItemInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdatePageArgs = {\n  input: UpdatePageInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdatePostArgs = {\n  input: UpdatePostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdatePostFormatArgs = {\n  input: UpdatePostFormatInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateSettingsArgs = {\n  input: UpdateSettingsInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateTagArgs = {\n  input: UpdateTagInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n/** The root entry point into the Graph */\nexport type RootQuery = {\n  __typename?: 'RootQuery';\n  /** Entry point to get all settings for the site */\n  allSettings?: Maybe<Settings>;\n  /** Connection between the RootQuery type and the category type */\n  categories?: Maybe<RootQueryToCategoryConnection>;\n  /** A 0bject */\n  category?: Maybe<Category>;\n  /** Returns a Comment */\n  comment?: Maybe<Comment>;\n  /** Connection between the RootQuery type and the Comment type */\n  comments?: Maybe<RootQueryToCommentConnection>;\n  /** A node used to manage content */\n  contentNode?: Maybe<ContentNode>;\n  /** Connection between the RootQuery type and the ContentNode type */\n  contentNodes?: Maybe<RootQueryToContentNodeConnection>;\n  /** Fetch a Content Type node by unique Identifier */\n  contentType?: Maybe<ContentType>;\n  /** Connection between the RootQuery type and the ContentType type */\n  contentTypes?: Maybe<RootQueryToContentTypeConnection>;\n  /** Fields of the &#039;DiscussionSettings&#039; settings group */\n  discussionSettings?: Maybe<DiscussionSettings>;\n  /** Fields of the &#039;GeneralSettings&#039; settings group */\n  generalSettings?: Maybe<GeneralSettings>;\n  /** Returns the stylesheet resulting of merging core, theme, and user data. */\n  globalStylesheet?: Maybe<Scalars['String']['output']>;\n  /** An object of the mediaItem Type.  */\n  mediaItem?: Maybe<MediaItem>;\n  /**\n   * A mediaItem object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  mediaItemBy?: Maybe<MediaItem>;\n  /** Connection between the RootQuery type and the mediaItem type */\n  mediaItems?: Maybe<RootQueryToMediaItemConnection>;\n  /** A WordPress navigation menu */\n  menu?: Maybe<Menu>;\n  /** A WordPress navigation menu item */\n  menuItem?: Maybe<MenuItem>;\n  /** Connection between the RootQuery type and the MenuItem type */\n  menuItems?: Maybe<RootQueryToMenuItemConnection>;\n  /** Connection between the RootQuery type and the Menu type */\n  menus?: Maybe<RootQueryToMenuConnection>;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n  /** Fetches an object given its Unique Resource Identifier */\n  nodeByUri?: Maybe<UniformResourceIdentifiable>;\n  /** An object of the page Type.  */\n  page?: Maybe<Page>;\n  /**\n   * A page object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  pageBy?: Maybe<Page>;\n  /** Connection between the RootQuery type and the page type */\n  pages?: Maybe<RootQueryToPageConnection>;\n  /** A WordPress plugin */\n  plugin?: Maybe<Plugin>;\n  /** Connection between the RootQuery type and the Plugin type */\n  plugins?: Maybe<RootQueryToPluginConnection>;\n  /** An object of the post Type.  */\n  post?: Maybe<Post>;\n  /**\n   * A post object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  postBy?: Maybe<Post>;\n  /** A 0bject */\n  postFormat?: Maybe<PostFormat>;\n  /** Connection between the RootQuery type and the postFormat type */\n  postFormats?: Maybe<RootQueryToPostFormatConnection>;\n  /** Connection between the RootQuery type and the post type */\n  posts?: Maybe<RootQueryToPostConnection>;\n  /** Fields of the &#039;ReadingSettings&#039; settings group */\n  readingSettings?: Maybe<ReadingSettings>;\n  /** Connection between the RootQuery type and the EnqueuedScript type */\n  registeredScripts?: Maybe<RootQueryToEnqueuedScriptConnection>;\n  /** Connection between the RootQuery type and the EnqueuedStylesheet type */\n  registeredStylesheets?: Maybe<RootQueryToEnqueuedStylesheetConnection>;\n  /** Connection between the RootQuery type and the ContentNode type */\n  revisions?: Maybe<RootQueryToRevisionsConnection>;\n  /** A 0bject */\n  tag?: Maybe<Tag>;\n  /** Connection between the RootQuery type and the tag type */\n  tags?: Maybe<RootQueryToTagConnection>;\n  /** Connection between the RootQuery type and the Taxonomy type */\n  taxonomies?: Maybe<RootQueryToTaxonomyConnection>;\n  /** Fetch a Taxonomy node by unique Identifier */\n  taxonomy?: Maybe<Taxonomy>;\n  /** A node in a taxonomy used to group and relate content nodes */\n  termNode?: Maybe<TermNode>;\n  /** Connection between the RootQuery type and the TermNode type */\n  terms?: Maybe<RootQueryToTermNodeConnection>;\n  /** A Theme object */\n  theme?: Maybe<Theme>;\n  /** Connection between the RootQuery type and the Theme type */\n  themes?: Maybe<RootQueryToThemeConnection>;\n  /** Returns a user */\n  user?: Maybe<User>;\n  /** Returns a user role */\n  userRole?: Maybe<UserRole>;\n  /** Connection between the RootQuery type and the UserRole type */\n  userRoles?: Maybe<RootQueryToUserRoleConnection>;\n  /** Connection between the RootQuery type and the User type */\n  users?: Maybe<RootQueryToUserConnection>;\n  /** Returns the current user */\n  viewer?: Maybe<User>;\n  /** Fields of the &#039;WritingSettings&#039; settings group */\n  writingSettings?: Maybe<WritingSettings>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCategoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToCategoryConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCategoryArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<CategoryIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCommentArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<CommentNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToCommentConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentNodeArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  contentType?: InputMaybe<ContentTypeEnum>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<ContentNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentTypeArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<ContentTypeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentTypesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryGlobalStylesheetArgs = {\n  types?: InputMaybe<Array<InputMaybe<GlobalStylesheetTypesEnum>>>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMediaItemArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<MediaItemIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMediaItemByArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n  mediaItemId?: InputMaybe<Scalars['Int']['input']>;\n  slug?: InputMaybe<Scalars['String']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMediaItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToMediaItemConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenuArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<MenuNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenuItemArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<MenuItemNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenuItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToMenuItemConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenusArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToMenuConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryNodeArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryNodeByUriArgs = {\n  uri: Scalars['String']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPageArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<PageIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPageByArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n  pageId?: InputMaybe<Scalars['Int']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPageConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPluginArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPluginsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPluginConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<PostIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostByArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n  postId?: InputMaybe<Scalars['Int']['input']>;\n  slug?: InputMaybe<Scalars['String']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostFormatArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<PostFormatIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostFormatsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPostFormatConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPostConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryRegisteredScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryRegisteredStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToRevisionsConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTagArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<TagIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTagsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToTagConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTaxonomiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTaxonomyArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<TaxonomyIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTermNodeArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<TermNodeIdTypeEnum>;\n  taxonomy?: InputMaybe<TaxonomyEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTermsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToTermNodeConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryThemeArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryThemesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<UserNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserRoleArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserRolesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUsersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToUserConnectionWhereArgs>;\n};\n\n/** Connection between the RootQuery type and the category type */\nexport type RootQueryToCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'RootQueryToCategoryConnection';\n  /** Edges for the RootQueryToCategoryConnection connection */\n  edges: Array<RootQueryToCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'RootQueryToCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;RootQueryToCategoryConnection&quot; */\nexport type RootQueryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToCategoryConnection connection */\nexport type RootQueryToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the Comment type */\nexport type RootQueryToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'RootQueryToCommentConnection';\n  /** Edges for the RootQueryToCommentConnection connection */\n  edges: Array<RootQueryToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'RootQueryToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;RootQueryToCommentConnection&quot; */\nexport type RootQueryToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToCommentConnection connection */\nexport type RootQueryToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the RootQuery type and the ContentNode type */\nexport type RootQueryToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'RootQueryToContentNodeConnection';\n  /** Edges for the RootQueryToContentNodeConnection connection */\n  edges: Array<RootQueryToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'RootQueryToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;RootQueryToContentNodeConnection&quot; */\nexport type RootQueryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToContentNodeConnection connection */\nexport type RootQueryToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the ContentType type */\nexport type RootQueryToContentTypeConnection = Connection & ContentTypeConnection & {\n  __typename?: 'RootQueryToContentTypeConnection';\n  /** Edges for the RootQueryToContentTypeConnection connection */\n  edges: Array<RootQueryToContentTypeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentType>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToContentTypeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {\n  __typename?: 'RootQueryToContentTypeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentType;\n};\n\n/** Page Info on the &quot;RootQueryToContentTypeConnection&quot; */\nexport type RootQueryToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToContentTypeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the EnqueuedScript type */\nexport type RootQueryToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'RootQueryToEnqueuedScriptConnection';\n  /** Edges for the RootQueryToEnqueuedScriptConnection connection */\n  edges: Array<RootQueryToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'RootQueryToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;RootQueryToEnqueuedScriptConnection&quot; */\nexport type RootQueryToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the EnqueuedStylesheet type */\nexport type RootQueryToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'RootQueryToEnqueuedStylesheetConnection';\n  /** Edges for the RootQueryToEnqueuedStylesheetConnection connection */\n  edges: Array<RootQueryToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'RootQueryToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;RootQueryToEnqueuedStylesheetConnection&quot; */\nexport type RootQueryToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the mediaItem type */\nexport type RootQueryToMediaItemConnection = Connection & MediaItemConnection & {\n  __typename?: 'RootQueryToMediaItemConnection';\n  /** Edges for the RootQueryToMediaItemConnection connection */\n  edges: Array<RootQueryToMediaItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MediaItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToMediaItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {\n  __typename?: 'RootQueryToMediaItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MediaItem;\n};\n\n/** Page Info on the &quot;RootQueryToMediaItemConnection&quot; */\nexport type RootQueryToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToMediaItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToMediaItemConnection connection */\nexport type RootQueryToMediaItemConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the Menu type */\nexport type RootQueryToMenuConnection = Connection & MenuConnection & {\n  __typename?: 'RootQueryToMenuConnection';\n  /** Edges for the RootQueryToMenuConnection connection */\n  edges: Array<RootQueryToMenuConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Menu>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToMenuConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToMenuConnectionEdge = Edge & MenuConnectionEdge & {\n  __typename?: 'RootQueryToMenuConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Menu;\n};\n\n/** Page Info on the &quot;RootQueryToMenuConnection&quot; */\nexport type RootQueryToMenuConnectionPageInfo = MenuConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToMenuConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToMenuConnection connection */\nexport type RootQueryToMenuConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The slug of the menu to query items for */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the MenuItem type */\nexport type RootQueryToMenuItemConnection = Connection & MenuItemConnection & {\n  __typename?: 'RootQueryToMenuItemConnection';\n  /** Edges for the RootQueryToMenuItemConnection connection */\n  edges: Array<RootQueryToMenuItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToMenuItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {\n  __typename?: 'RootQueryToMenuItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MenuItem;\n};\n\n/** Page Info on the &quot;RootQueryToMenuItemConnection&quot; */\nexport type RootQueryToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToMenuItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToMenuItemConnection connection */\nexport type RootQueryToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the RootQuery type and the page type */\nexport type RootQueryToPageConnection = Connection & PageConnection & {\n  __typename?: 'RootQueryToPageConnection';\n  /** Edges for the RootQueryToPageConnection connection */\n  edges: Array<RootQueryToPageConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPageConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPageConnectionEdge = Edge & PageConnectionEdge & {\n  __typename?: 'RootQueryToPageConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Page;\n};\n\n/** Page Info on the &quot;RootQueryToPageConnection&quot; */\nexport type RootQueryToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPageConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPageConnection connection */\nexport type RootQueryToPageConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the Plugin type */\nexport type RootQueryToPluginConnection = Connection & PluginConnection & {\n  __typename?: 'RootQueryToPluginConnection';\n  /** Edges for the RootQueryToPluginConnection connection */\n  edges: Array<RootQueryToPluginConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Plugin>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPluginConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPluginConnectionEdge = Edge & PluginConnectionEdge & {\n  __typename?: 'RootQueryToPluginConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Plugin;\n};\n\n/** Page Info on the &quot;RootQueryToPluginConnection&quot; */\nexport type RootQueryToPluginConnectionPageInfo = PageInfo & PluginConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPluginConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPluginConnection connection */\nexport type RootQueryToPluginConnectionWhereArgs = {\n  /** Show plugin based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve plugins where plugin status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PluginStatusEnum>>>;\n  /** Show plugins with a specific status. */\n  status?: InputMaybe<PluginStatusEnum>;\n};\n\n/** Connection between the RootQuery type and the post type */\nexport type RootQueryToPostConnection = Connection & PostConnection & {\n  __typename?: 'RootQueryToPostConnection';\n  /** Edges for the RootQueryToPostConnection connection */\n  edges: Array<RootQueryToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'RootQueryToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;RootQueryToPostConnection&quot; */\nexport type RootQueryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPostConnection connection */\nexport type RootQueryToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the postFormat type */\nexport type RootQueryToPostFormatConnection = Connection & PostFormatConnection & {\n  __typename?: 'RootQueryToPostFormatConnection';\n  /** Edges for the RootQueryToPostFormatConnection connection */\n  edges: Array<RootQueryToPostFormatConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<PostFormat>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPostFormatConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {\n  __typename?: 'RootQueryToPostFormatConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: PostFormat;\n};\n\n/** Page Info on the &quot;RootQueryToPostFormatConnection&quot; */\nexport type RootQueryToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPostFormatConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPostFormatConnection connection */\nexport type RootQueryToPostFormatConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the ContentNode type */\nexport type RootQueryToRevisionsConnection = Connection & ContentNodeConnection & {\n  __typename?: 'RootQueryToRevisionsConnection';\n  /** Edges for the RootQueryToRevisionsConnection connection */\n  edges: Array<RootQueryToRevisionsConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToRevisionsConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'RootQueryToRevisionsConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;RootQueryToRevisionsConnection&quot; */\nexport type RootQueryToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToRevisionsConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToRevisionsConnection connection */\nexport type RootQueryToRevisionsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the tag type */\nexport type RootQueryToTagConnection = Connection & TagConnection & {\n  __typename?: 'RootQueryToTagConnection';\n  /** Edges for the RootQueryToTagConnection connection */\n  edges: Array<RootQueryToTagConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Tag>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToTagConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToTagConnectionEdge = Edge & TagConnectionEdge & {\n  __typename?: 'RootQueryToTagConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Tag;\n};\n\n/** Page Info on the &quot;RootQueryToTagConnection&quot; */\nexport type RootQueryToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToTagConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToTagConnection connection */\nexport type RootQueryToTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the Taxonomy type */\nexport type RootQueryToTaxonomyConnection = Connection & TaxonomyConnection & {\n  __typename?: 'RootQueryToTaxonomyConnection';\n  /** Edges for the RootQueryToTaxonomyConnection connection */\n  edges: Array<RootQueryToTaxonomyConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Taxonomy>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToTaxonomyConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {\n  __typename?: 'RootQueryToTaxonomyConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Taxonomy;\n};\n\n/** Page Info on the &quot;RootQueryToTaxonomyConnection&quot; */\nexport type RootQueryToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToTaxonomyConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the TermNode type */\nexport type RootQueryToTermNodeConnection = Connection & TermNodeConnection & {\n  __typename?: 'RootQueryToTermNodeConnection';\n  /** Edges for the RootQueryToTermNodeConnection connection */\n  edges: Array<RootQueryToTermNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<TermNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToTermNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {\n  __typename?: 'RootQueryToTermNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: TermNode;\n};\n\n/** Page Info on the &quot;RootQueryToTermNodeConnection&quot; */\nexport type RootQueryToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToTermNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToTermNodeConnection connection */\nexport type RootQueryToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The Taxonomy to filter terms by */\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the Theme type */\nexport type RootQueryToThemeConnection = Connection & ThemeConnection & {\n  __typename?: 'RootQueryToThemeConnection';\n  /** Edges for the RootQueryToThemeConnection connection */\n  edges: Array<RootQueryToThemeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Theme>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToThemeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToThemeConnectionEdge = Edge & ThemeConnectionEdge & {\n  __typename?: 'RootQueryToThemeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Theme;\n};\n\n/** Page Info on the &quot;RootQueryToThemeConnection&quot; */\nexport type RootQueryToThemeConnectionPageInfo = PageInfo & ThemeConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToThemeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the User type */\nexport type RootQueryToUserConnection = Connection & UserConnection & {\n  __typename?: 'RootQueryToUserConnection';\n  /** Edges for the RootQueryToUserConnection connection */\n  edges: Array<RootQueryToUserConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<User>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToUserConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToUserConnectionEdge = Edge & UserConnectionEdge & {\n  __typename?: 'RootQueryToUserConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: User;\n};\n\n/** Page Info on the &quot;RootQueryToUserConnection&quot; */\nexport type RootQueryToUserConnectionPageInfo = PageInfo & UserConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToUserConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToUserConnection connection */\nexport type RootQueryToUserConnectionWhereArgs = {\n  /** Array of userIds to exclude. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Pass an array of post types to filter results to users who have published posts in those post types. */\n  hasPublishedPosts?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of userIds to include. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** The user login. */\n  login?: InputMaybe<Scalars['String']['input']>;\n  /** An array of logins to include. Users matching one of these logins will be included in results. */\n  loginIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */\n  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The user nicename. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */\n  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */\n  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<UsersConnectionOrderbyInput>>>;\n  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */\n  role?: InputMaybe<UserRoleEnum>;\n  /** An array of role names. Matched users must have at least one of these roles. */\n  roleIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;\n  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */\n  roleNotIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;\n  /** Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */\n  searchColumns?: InputMaybe<Array<InputMaybe<UsersConnectionSearchColumnEnum>>>;\n};\n\n/** Connection between the RootQuery type and the UserRole type */\nexport type RootQueryToUserRoleConnection = Connection & UserRoleConnection & {\n  __typename?: 'RootQueryToUserRoleConnection';\n  /** Edges for the RootQueryToUserRoleConnection connection */\n  edges: Array<RootQueryToUserRoleConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<UserRole>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToUserRoleConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {\n  __typename?: 'RootQueryToUserRoleConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: UserRole;\n};\n\n/** Page Info on the &quot;RootQueryToUserRoleConnection&quot; */\nexport type RootQueryToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToUserRoleConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the sendPasswordResetEmail mutation. */\nexport type SendPasswordResetEmailInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the user's username or email address. */\n  username: Scalars['String']['input'];\n};\n\n/** The payload for the sendPasswordResetEmail mutation. */\nexport type SendPasswordResetEmailPayload = {\n  __typename?: 'SendPasswordResetEmailPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent. */\n  success?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * The user that the password reset email was sent to\n   * @deprecated This field will be removed in a future version of WPGraphQL\n   */\n  user?: Maybe<User>;\n};\n\n/** All of the registered settings */\nexport type Settings = {\n  __typename?: 'Settings';\n  /** Settings of the the string Settings Group */\n  discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsDateFormat?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsDescription?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsEmail?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsLanguage?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the integer Settings Group */\n  generalSettingsStartOfWeek?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsTimeFormat?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsTimezone?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsTitle?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsUrl?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the integer Settings Group */\n  readingSettingsPageForPosts?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the integer Settings Group */\n  readingSettingsPageOnFront?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the integer Settings Group */\n  readingSettingsPostsPerPage?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the string Settings Group */\n  readingSettingsShowOnFront?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the integer Settings Group */\n  writingSettingsDefaultCategory?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the string Settings Group */\n  writingSettingsDefaultPostFormat?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the boolean Settings Group */\n  writingSettingsUseSmilies?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** The tag type */\nexport type Tag = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {\n  __typename?: 'Tag';\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the Tag type and the ContentNode type */\n  contentNodes?: Maybe<TagToContentNodeConnection>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Ncmaz Taxonomy Meta&quot; was set to Show in GraphQL. */\n  ncTaxonomyMeta?: Maybe<Tag_Nctaxonomymeta>;\n  /** Connection between the Tag type and the post type */\n  posts?: Maybe<TagToPostConnection>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  tagId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Tag type and the Taxonomy type */\n  taxonomy?: Maybe<TagToTaxonomyConnectionEdge>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The tag type */\nexport type TagContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<TagToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The tag type */\nexport type TagEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The tag type */\nexport type TagEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The tag type */\nexport type TagPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<TagToPostConnectionWhereArgs>;\n};\n\n/** Connection to tag Nodes */\nexport type TagConnection = {\n  /** A list of edges (relational context) between RootQuery and connected tag Nodes */\n  edges: Array<TagConnectionEdge>;\n  /** A list of connected tag Nodes */\n  nodes: Array<Tag>;\n  /** Information about pagination in a connection. */\n  pageInfo: TagConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected tag */\nexport type TagConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected tag Node */\n  node: Tag;\n};\n\n/** Page Info on the connected TagConnectionEdge */\nexport type TagConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum TagIdType {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the Tag type and the ContentNode type */\nexport type TagToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'TagToContentNodeConnection';\n  /** Edges for the TagToContentNodeConnection connection */\n  edges: Array<TagToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: TagToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TagToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'TagToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;TagToContentNodeConnection&quot; */\nexport type TagToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TagToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the TagToContentNodeConnection connection */\nexport type TagToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfTagEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Tag type and the post type */\nexport type TagToPostConnection = Connection & PostConnection & {\n  __typename?: 'TagToPostConnection';\n  /** Edges for the TagToPostConnection connection */\n  edges: Array<TagToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: TagToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TagToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'TagToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;TagToPostConnection&quot; */\nexport type TagToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'TagToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the TagToPostConnection connection */\nexport type TagToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Tag type and the Taxonomy type */\nexport type TagToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {\n  __typename?: 'TagToTaxonomyConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Taxonomy;\n};\n\n/** Field Group */\nexport type Tag_Nctaxonomymeta = AcfFieldGroup & {\n  __typename?: 'Tag_Nctaxonomymeta';\n  color?: Maybe<Scalars['String']['output']>;\n  featuredImage?: Maybe<MediaItem>;\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\nexport type TaxArray = {\n  field?: InputMaybe<TaxQueryField>;\n  /** Whether or not to include children for hierarchical taxonomies. Defaults to false to improve performance (note that this is opposite of the default for WP_Query). */\n  includeChildren?: InputMaybe<Scalars['Boolean']['input']>;\n  operator?: InputMaybe<TaxQueryOperator>;\n  taxonomy?: InputMaybe<TaxonomyEnum>;\n  /** A list of term slugs */\n  terms?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** Query objects based on taxonomy parameters */\nexport type TaxQuery = {\n  relation?: InputMaybe<RelationEnum>;\n  taxArray?: InputMaybe<Array<InputMaybe<TaxArray>>>;\n};\n\n/** Which field to select taxonomy term by. Default value is \"term_id\" */\nexport enum TaxQueryField {\n  Id = 'ID',\n  Name = 'NAME',\n  Slug = 'SLUG',\n  TaxonomyId = 'TAXONOMY_ID'\n}\n\nexport enum TaxQueryOperator {\n  And = 'AND',\n  Exists = 'EXISTS',\n  In = 'IN',\n  NotExists = 'NOT_EXISTS',\n  NotIn = 'NOT_IN'\n}\n\n/** A taxonomy object */\nexport type Taxonomy = Node & {\n  __typename?: 'Taxonomy';\n  /** List of Content Types associated with the Taxonomy */\n  connectedContentTypes?: Maybe<TaxonomyToContentTypeConnection>;\n  /** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The plural name of the post type within the GraphQL Schema. */\n  graphqlPluralName?: Maybe<Scalars['String']['output']>;\n  /** The singular name of the post type within the GraphQL Schema. */\n  graphqlSingleName?: Maybe<Scalars['String']['output']>;\n  /** Whether the taxonomy is hierarchical */\n  hierarchical?: Maybe<Scalars['Boolean']['output']>;\n  /** The globally unique identifier of the taxonomy object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Name of the taxonomy shown in the menu. Usually plural. */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Whether the taxonomy is publicly queryable */\n  public?: Maybe<Scalars['Boolean']['output']>;\n  /** Name of content type to diplay in REST API &quot;wp/v2&quot; namespace. */\n  restBase?: Maybe<Scalars['String']['output']>;\n  /** The REST Controller class assigned to handling this content type. */\n  restControllerClass?: Maybe<Scalars['String']['output']>;\n  /** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */\n  showCloud?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to display a column for the taxonomy on its post type listing screens. */\n  showInAdminColumn?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to add the post type to the GraphQL Schema. */\n  showInGraphql?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to show the taxonomy in the admin menu */\n  showInMenu?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the taxonomy is available for selection in navigation menus. */\n  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to show the taxonomy in the quick/bulk edit panel. */\n  showInQuickEdit?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */\n  showInRest?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */\n  showUi?: Maybe<Scalars['Boolean']['output']>;\n};\n\n\n/** A taxonomy object */\nexport type TaxonomyConnectedContentTypesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to Taxonomy Nodes */\nexport type TaxonomyConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Taxonomy Nodes */\n  edges: Array<TaxonomyConnectionEdge>;\n  /** A list of connected Taxonomy Nodes */\n  nodes: Array<Taxonomy>;\n  /** Information about pagination in a connection. */\n  pageInfo: TaxonomyConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Taxonomy */\nexport type TaxonomyConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Taxonomy Node */\n  node: Taxonomy;\n};\n\n/** Page Info on the connected TaxonomyConnectionEdge */\nexport type TaxonomyConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Allowed taxonomies */\nexport enum TaxonomyEnum {\n  /** Taxonomy enum category */\n  Category = 'CATEGORY',\n  /** Taxonomy enum post_format */\n  Postformat = 'POSTFORMAT',\n  /** Taxonomy enum post_tag */\n  Tag = 'TAG'\n}\n\n/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum TaxonomyIdTypeEnum {\n  /** The globally unique ID */\n  Id = 'ID',\n  /** The name of the taxonomy */\n  Name = 'NAME'\n}\n\n/** Connection between the Taxonomy type and the ContentType type */\nexport type TaxonomyToContentTypeConnection = Connection & ContentTypeConnection & {\n  __typename?: 'TaxonomyToContentTypeConnection';\n  /** Edges for the TaxonomyToContentTypeConnection connection */\n  edges: Array<TaxonomyToContentTypeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentType>;\n  /** Information about pagination in a connection. */\n  pageInfo: TaxonomyToContentTypeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TaxonomyToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {\n  __typename?: 'TaxonomyToContentTypeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentType;\n};\n\n/** Page Info on the &quot;TaxonomyToContentTypeConnection&quot; */\nexport type TaxonomyToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TaxonomyToContentTypeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to the node */\nexport type Template_Blank = ContentTemplate & {\n  __typename?: 'Template_Blank';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to the node */\nexport type Template_BlogAlternative = ContentTemplate & {\n  __typename?: 'Template_BlogAlternative';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to the node */\nexport type Template_ReduxCanvas = ContentTemplate & {\n  __typename?: 'Template_ReduxCanvas';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to the node */\nexport type Template_ReduxContained = ContentTemplate & {\n  __typename?: 'Template_ReduxContained';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to the node */\nexport type Template_ReduxFullWidth = ContentTemplate & {\n  __typename?: 'Template_ReduxFullWidth';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */\nexport type TermNode = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the primary key from the database. */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */\nexport type TermNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */\nexport type TermNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to TermNode Nodes */\nexport type TermNodeConnection = {\n  /** A list of edges (relational context) between RootQuery and connected TermNode Nodes */\n  edges: Array<TermNodeConnectionEdge>;\n  /** A list of connected TermNode Nodes */\n  nodes: Array<TermNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: TermNodeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected TermNode */\nexport type TermNodeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected TermNode Node */\n  node: TermNode;\n};\n\n/** Page Info on the connected TermNodeConnectionEdge */\nexport type TermNodeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum TermNodeIdTypeEnum {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the TermNode type and the EnqueuedScript type */\nexport type TermNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'TermNodeToEnqueuedScriptConnection';\n  /** Edges for the TermNodeToEnqueuedScriptConnection connection */\n  edges: Array<TermNodeToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TermNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'TermNodeToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;TermNodeToEnqueuedScriptConnection&quot; */\nexport type TermNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TermNodeToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the TermNode type and the EnqueuedStylesheet type */\nexport type TermNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'TermNodeToEnqueuedStylesheetConnection';\n  /** Edges for the TermNodeToEnqueuedStylesheetConnection connection */\n  edges: Array<TermNodeToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TermNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'TermNodeToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;TermNodeToEnqueuedStylesheetConnection&quot; */\nexport type TermNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TermNodeToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Options for ordering the connection by */\nexport enum TermObjectsConnectionOrderbyEnum {\n  /** Order the connection by item count. */\n  Count = 'COUNT',\n  /** Order the connection by description. */\n  Description = 'DESCRIPTION',\n  /** Order the connection by name. */\n  Name = 'NAME',\n  /** Order the connection by slug. */\n  Slug = 'SLUG',\n  /** Order the connection by term group. */\n  TermGroup = 'TERM_GROUP',\n  /** Order the connection by term id. */\n  TermId = 'TERM_ID',\n  /** Order the connection by term order. */\n  TermOrder = 'TERM_ORDER'\n}\n\n/** A theme object */\nexport type Theme = Node & {\n  __typename?: 'Theme';\n  /** Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ). */\n  author?: Maybe<Scalars['String']['output']>;\n  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ). */\n  authorUri?: Maybe<Scalars['String']['output']>;\n  /** The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ). */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the theme object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ). */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot(). */\n  screenshot?: Maybe<Scalars['String']['output']>;\n  /** The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet(). */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ). */\n  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ). */\n  themeUri?: Maybe<Scalars['String']['output']>;\n  /** The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ). */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to Theme Nodes */\nexport type ThemeConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Theme Nodes */\n  edges: Array<ThemeConnectionEdge>;\n  /** A list of connected Theme Nodes */\n  nodes: Array<Theme>;\n  /** Information about pagination in a connection. */\n  pageInfo: ThemeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Theme */\nexport type ThemeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Theme Node */\n  node: Theme;\n};\n\n/** Page Info on the connected ThemeConnectionEdge */\nexport type ThemeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Any node that has a URI */\nexport type UniformResourceIdentifiable = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the updateCategory mutation. */\nexport type UpdateCategoryInput = {\n  /** The slug that the category will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the category object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the category object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateCategory mutation. */\nexport type UpdateCategoryPayload = {\n  __typename?: 'UpdateCategoryPayload';\n  /** The created category */\n  category?: Maybe<Category>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the updateComment mutation. */\nexport type UpdateCommentInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment being updated. */\n  id: Scalars['ID']['input'];\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n  /** Type of comment. */\n  type?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateComment mutation. */\nexport type UpdateCommentPayload = {\n  __typename?: 'UpdateCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The comment that was created */\n  comment?: Maybe<Comment>;\n  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Input for the updateMediaItem mutation. */\nexport type UpdateMediaItemInput = {\n  /** Alternative text to display when mediaItem is not displayed */\n  altText?: InputMaybe<Scalars['String']['input']>;\n  /** The userId to assign as the author of the mediaItem */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** The caption for the mediaItem */\n  caption?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the mediaItem */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the mediaItem */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The date (in GMT zone) of the mediaItem */\n  dateGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Description of the mediaItem */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The file name of the mediaItem */\n  filePath?: InputMaybe<Scalars['String']['input']>;\n  /** The file type of the mediaItem */\n  fileType?: InputMaybe<MimeTypeEnum>;\n  /** The ID of the mediaItem object */\n  id: Scalars['ID']['input'];\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The ping status for the mediaItem */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the mediaItem */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the mediaItem */\n  status?: InputMaybe<MediaItemStatusEnum>;\n  /** The title of the mediaItem */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateMediaItem mutation. */\nexport type UpdateMediaItemPayload = {\n  __typename?: 'UpdateMediaItemPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The MediaItem object mutation type. */\n  mediaItem?: Maybe<MediaItem>;\n};\n\n/** Input for the updatePage mutation. */\nexport type UpdatePageInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the page object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updatePage mutation. */\nexport type UpdatePagePayload = {\n  __typename?: 'UpdatePagePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  page?: Maybe<Page>;\n};\n\n/** Input for the updatePostFormat mutation. */\nexport type UpdatePostFormatInput = {\n  /** The slug that the post_format will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_format object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the post_format object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updatePostFormat mutation. */\nexport type UpdatePostFormatPayload = {\n  __typename?: 'UpdatePostFormatPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_format */\n  postFormat?: Maybe<PostFormat>;\n};\n\n/** Input for the updatePost mutation. */\nexport type UpdatePostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** Set connections between the post and categories */\n  categories?: InputMaybe<PostCategoriesInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the post object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  ncFeaturedImageDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  ncTags?: InputMaybe<Scalars['String']['input']>;\n  ncmazAudioUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImgs1DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs2DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs3DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs4DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs5DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs6DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs7DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGalleryImgs8DatabaseID?: InputMaybe<Scalars['Int']['input']>;\n  ncmazVideoUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The ping status for the object */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** URLs that have been pinged. */\n  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Set connections between the post and postFormats */\n  postFormats?: InputMaybe<PostPostFormatsInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Set connections between the post and tags */\n  tags?: InputMaybe<PostTagsInput>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** URLs queued to be pinged. */\n  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** The payload for the updatePost mutation. */\nexport type UpdatePostPayload = {\n  __typename?: 'UpdatePostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  post?: Maybe<Post>;\n};\n\n/** Input for the updateSettings mutation. */\nexport type UpdateSettingsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Allow people to submit comments on new posts. */\n  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */\n  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** A date format for all date strings. */\n  generalSettingsDateFormat?: InputMaybe<Scalars['String']['input']>;\n  /** Site tagline. */\n  generalSettingsDescription?: InputMaybe<Scalars['String']['input']>;\n  /** This address is used for admin purposes, like new user notification. */\n  generalSettingsEmail?: InputMaybe<Scalars['String']['input']>;\n  /** WordPress locale code. */\n  generalSettingsLanguage?: InputMaybe<Scalars['String']['input']>;\n  /** A day number of the week that the week should start on. */\n  generalSettingsStartOfWeek?: InputMaybe<Scalars['Int']['input']>;\n  /** A time format for all time strings. */\n  generalSettingsTimeFormat?: InputMaybe<Scalars['String']['input']>;\n  /** A city in the same timezone as you. */\n  generalSettingsTimezone?: InputMaybe<Scalars['String']['input']>;\n  /** Site title. */\n  generalSettingsTitle?: InputMaybe<Scalars['String']['input']>;\n  /** Site URL. */\n  generalSettingsUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the page that should display the latest posts */\n  readingSettingsPageForPosts?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the page that should be displayed on the front page */\n  readingSettingsPageOnFront?: InputMaybe<Scalars['Int']['input']>;\n  /** Blog pages show at most. */\n  readingSettingsPostsPerPage?: InputMaybe<Scalars['Int']['input']>;\n  /** What to show on the front page */\n  readingSettingsShowOnFront?: InputMaybe<Scalars['String']['input']>;\n  /** Default post category. */\n  writingSettingsDefaultCategory?: InputMaybe<Scalars['Int']['input']>;\n  /** Default post format. */\n  writingSettingsDefaultPostFormat?: InputMaybe<Scalars['String']['input']>;\n  /** Convert emoticons like :-) and :-P to graphics on display. */\n  writingSettingsUseSmilies?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the updateSettings mutation. */\nexport type UpdateSettingsPayload = {\n  __typename?: 'UpdateSettingsPayload';\n  /** Update all settings. */\n  allSettings?: Maybe<Settings>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Update the DiscussionSettings setting. */\n  discussionSettings?: Maybe<DiscussionSettings>;\n  /** Update the GeneralSettings setting. */\n  generalSettings?: Maybe<GeneralSettings>;\n  /** Update the ReadingSettings setting. */\n  readingSettings?: Maybe<ReadingSettings>;\n  /** Update the WritingSettings setting. */\n  writingSettings?: Maybe<WritingSettings>;\n};\n\n/** Input for the updateTag mutation. */\nexport type UpdateTagInput = {\n  /** The slug that the post_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the post_tag object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateTag mutation. */\nexport type UpdateTagPayload = {\n  __typename?: 'UpdateTagPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_tag */\n  tag?: Maybe<Tag>;\n};\n\n/** Input for the updateUser mutation. */\nexport type UpdateUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user */\n  id: Scalars['ID']['input'];\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  ncmazBackgroundImage?: InputMaybe<Scalars['Int']['input']>;\n  ncmazBio?: InputMaybe<Scalars['String']['input']>;\n  ncmazBuymeacoffeUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazFacebookUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazFeaturedImage?: InputMaybe<Scalars['Int']['input']>;\n  ncmazGithubUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazInstagramUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazLinkedinUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazMediumUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazPinterestUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazTwitchUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazTwitterUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazVimeoUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazWebsiteUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazYoutubeUrl?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** An array of roles to be assigned to the user. */\n  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateUser mutation. */\nexport type UpdateUserPayload = {\n  __typename?: 'UpdateUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** A User object */\nexport type User = Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable & {\n  __typename?: 'User';\n  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */\n  avatar?: Maybe<Avatar>;\n  /** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */\n  capKey?: Maybe<Scalars['String']['output']>;\n  /** A list of capabilities (permissions) granted to the user */\n  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Connection between the User type and the Comment type */\n  comments?: Maybe<UserToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Identifies the primary key from the database. */\n  databaseId: Scalars['Int']['output'];\n  /** Description of the user. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<UserToEnqueuedScriptConnection>;\n  /** Connection between the User type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<UserToEnqueuedStylesheetConnection>;\n  /** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */\n  extraCapabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */\n  firstName?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the user object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */\n  lastName?: Maybe<Scalars['String']['output']>;\n  /** The preferred language locale set for the user. Value derived from get_user_locale(). */\n  locale?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User type and the mediaItem type */\n  mediaItems?: Maybe<UserToMediaItemConnection>;\n  /** Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Added to the GraphQL Schema because the ACF Field Group &quot;Ncmaz User Meta&quot; was set to Show in GraphQL. */\n  ncUserMeta?: Maybe<User_Ncusermeta>;\n  /** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */\n  nicename?: Maybe<Scalars['String']['output']>;\n  /** Nickname of the user. */\n  nickname?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User type and the page type */\n  pages?: Maybe<UserToPageConnection>;\n  /** Connection between the User type and the post type */\n  posts?: Maybe<UserToPostConnection>;\n  /** The date the user registered or was created. The field follows a full ISO8601 date string format. */\n  registeredDate?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User and Revisions authored by the user */\n  revisions?: Maybe<UserToRevisionsConnection>;\n  /** Connection between the User type and the UserRole type */\n  roles?: Maybe<UserToUserRoleConnection>;\n  /** Whether the Toolbar should be displayed when the user is viewing the site. */\n  shouldShowAdminToolbar?: Maybe<Scalars['Boolean']['output']>;\n  shouldShowFaustToolbar?: Maybe<Scalars['Boolean']['output']>;\n  /** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */\n  slug?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n  /** A website url that is associated with the user. */\n  url?: Maybe<Scalars['String']['output']>;\n  /**\n   * The Id of the user. Equivalent to WP_User-&gt;ID\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  userId?: Maybe<Scalars['Int']['output']>;\n  /** Username for the user. This field is equivalent to WP_User-&gt;user_login. */\n  username?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A User object */\nexport type UserAvatarArgs = {\n  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;\n  rating?: InputMaybe<AvatarRatingEnum>;\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A User object */\nexport type UserCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToCommentConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A User object */\nexport type UserEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A User object */\nexport type UserMediaItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToMediaItemConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserPagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToPageConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToPostConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToRevisionsConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserRolesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to User Nodes */\nexport type UserConnection = {\n  /** A list of edges (relational context) between RootQuery and connected User Nodes */\n  edges: Array<UserConnectionEdge>;\n  /** A list of connected User Nodes */\n  nodes: Array<User>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected User */\nexport type UserConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected User Node */\n  node: User;\n};\n\n/** Page Info on the connected UserConnectionEdge */\nexport type UserConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum UserNodeIdTypeEnum {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The Email of the User */\n  Email = 'EMAIL',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The slug of the User */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI',\n  /** The username the User uses to login with */\n  Username = 'USERNAME'\n}\n\n/** A user role object */\nexport type UserRole = Node & {\n  __typename?: 'UserRole';\n  /** The capabilities that belong to this role */\n  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The display name of the role */\n  displayName?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the user role object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The registered name of the role */\n  name?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to UserRole Nodes */\nexport type UserRoleConnection = {\n  /** A list of edges (relational context) between RootQuery and connected UserRole Nodes */\n  edges: Array<UserRoleConnectionEdge>;\n  /** A list of connected UserRole Nodes */\n  nodes: Array<UserRole>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserRoleConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected UserRole */\nexport type UserRoleConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected UserRole Node */\n  node: UserRole;\n};\n\n/** Page Info on the connected UserRoleConnectionEdge */\nexport type UserRoleConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Names of available user roles */\nexport enum UserRoleEnum {\n  /** User role with specific capabilities */\n  Administrator = 'ADMINISTRATOR',\n  /** User role with specific capabilities */\n  Author = 'AUTHOR',\n  /** User role with specific capabilities */\n  Contributor = 'CONTRIBUTOR',\n  /** User role with specific capabilities */\n  Editor = 'EDITOR',\n  /** User role with specific capabilities */\n  Subscriber = 'SUBSCRIBER'\n}\n\n/** Connection between the User type and the Comment type */\nexport type UserToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'UserToCommentConnection';\n  /** Edges for the UserToCommentConnection connection */\n  edges: Array<UserToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'UserToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;UserToCommentConnection&quot; */\nexport type UserToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToCommentConnection connection */\nexport type UserToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the User type and the EnqueuedScript type */\nexport type UserToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'UserToEnqueuedScriptConnection';\n  /** Edges for the UserToEnqueuedScriptConnection connection */\n  edges: Array<UserToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'UserToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;UserToEnqueuedScriptConnection&quot; */\nexport type UserToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the User type and the EnqueuedStylesheet type */\nexport type UserToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'UserToEnqueuedStylesheetConnection';\n  /** Edges for the UserToEnqueuedStylesheetConnection connection */\n  edges: Array<UserToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'UserToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;UserToEnqueuedStylesheetConnection&quot; */\nexport type UserToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the User type and the mediaItem type */\nexport type UserToMediaItemConnection = Connection & MediaItemConnection & {\n  __typename?: 'UserToMediaItemConnection';\n  /** Edges for the UserToMediaItemConnection connection */\n  edges: Array<UserToMediaItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MediaItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToMediaItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {\n  __typename?: 'UserToMediaItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MediaItem;\n};\n\n/** Page Info on the &quot;UserToMediaItemConnection&quot; */\nexport type UserToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToMediaItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToMediaItemConnection connection */\nexport type UserToMediaItemConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the page type */\nexport type UserToPageConnection = Connection & PageConnection & {\n  __typename?: 'UserToPageConnection';\n  /** Edges for the UserToPageConnection connection */\n  edges: Array<UserToPageConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToPageConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToPageConnectionEdge = Edge & PageConnectionEdge & {\n  __typename?: 'UserToPageConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Page;\n};\n\n/** Page Info on the &quot;UserToPageConnection&quot; */\nexport type UserToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToPageConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToPageConnection connection */\nexport type UserToPageConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the post type */\nexport type UserToPostConnection = Connection & PostConnection & {\n  __typename?: 'UserToPostConnection';\n  /** Edges for the UserToPostConnection connection */\n  edges: Array<UserToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'UserToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;UserToPostConnection&quot; */\nexport type UserToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'UserToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToPostConnection connection */\nexport type UserToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the ContentNode type */\nexport type UserToRevisionsConnection = Connection & ContentNodeConnection & {\n  __typename?: 'UserToRevisionsConnection';\n  /** Edges for the UserToRevisionsConnection connection */\n  edges: Array<UserToRevisionsConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToRevisionsConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'UserToRevisionsConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;UserToRevisionsConnection&quot; */\nexport type UserToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToRevisionsConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToRevisionsConnection connection */\nexport type UserToRevisionsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  taxQuery?: InputMaybe<TaxQuery>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the UserRole type */\nexport type UserToUserRoleConnection = Connection & UserRoleConnection & {\n  __typename?: 'UserToUserRoleConnection';\n  /** Edges for the UserToUserRoleConnection connection */\n  edges: Array<UserToUserRoleConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<UserRole>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToUserRoleConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {\n  __typename?: 'UserToUserRoleConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: UserRole;\n};\n\n/** Page Info on the &quot;UserToUserRoleConnection&quot; */\nexport type UserToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {\n  __typename?: 'UserToUserRoleConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Field Group */\nexport type User_Ncusermeta = AcfFieldGroup & {\n  __typename?: 'User_Ncusermeta';\n  backgroundImage?: Maybe<MediaItem>;\n  /** You should have an account here or something similar -  https://www.buymeacoffee.com */\n  buymeacoffeUrl?: Maybe<Scalars['String']['output']>;\n  color?: Maybe<Scalars['String']['output']>;\n  facebookUrl?: Maybe<Scalars['String']['output']>;\n  featuredImage?: Maybe<MediaItem>;\n  /** The name of the ACF Field Group */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  githubUrl?: Maybe<Scalars['String']['output']>;\n  instagramUrl?: Maybe<Scalars['String']['output']>;\n  linkedinUrl?: Maybe<Scalars['String']['output']>;\n  mediumUrl?: Maybe<Scalars['String']['output']>;\n  /** Job/Career of the user. Example: Web Developer, Designer, etc. */\n  ncBio?: Maybe<Scalars['String']['output']>;\n  pinterestUrl?: Maybe<Scalars['String']['output']>;\n  twitchUrl?: Maybe<Scalars['String']['output']>;\n  twitterUrl?: Maybe<Scalars['String']['output']>;\n  vimeoUrl?: Maybe<Scalars['String']['output']>;\n  websiteUrl?: Maybe<Scalars['String']['output']>;\n  youtubeUrl?: Maybe<Scalars['String']['output']>;\n};\n\n/** Field to order the connection by */\nexport enum UsersConnectionOrderbyEnum {\n  /** Order by display name */\n  DisplayName = 'DISPLAY_NAME',\n  /** Order by email address */\n  Email = 'EMAIL',\n  /** Order by login */\n  Login = 'LOGIN',\n  /** Preserve the login order given in the LOGIN_IN array */\n  LoginIn = 'LOGIN_IN',\n  /** Order by nice name */\n  NiceName = 'NICE_NAME',\n  /** Preserve the nice name order given in the NICE_NAME_IN array */\n  NiceNameIn = 'NICE_NAME_IN',\n  /** Order by registration date */\n  Registered = 'REGISTERED',\n  /** Order by URL */\n  Url = 'URL'\n}\n\n/** Options for ordering the connection */\nexport type UsersConnectionOrderbyInput = {\n  /** The field name used to sort the results. */\n  field: UsersConnectionOrderbyEnum;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n};\n\n/** Column used for searching for users. */\nexport enum UsersConnectionSearchColumnEnum {\n  /** The user's email address. */\n  Email = 'EMAIL',\n  /** The globally unique ID. */\n  Id = 'ID',\n  /** The username the User uses to login with. */\n  Login = 'LOGIN',\n  /** A URL-friendly name for the user. The default is the user's username. */\n  Nicename = 'NICENAME',\n  /** The URL of the user's website. */\n  Url = 'URL'\n}\n\n/** Information about pagination in a connection. */\nexport type WpPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The writing setting type */\nexport type WritingSettings = {\n  __typename?: 'WritingSettings';\n  /** Default post category. */\n  defaultCategory?: Maybe<Scalars['Int']['output']>;\n  /** Default post format. */\n  defaultPostFormat?: Maybe<Scalars['String']['output']>;\n  /** Convert emoticons like :-) and :-P to graphics on display. */\n  useSmilies?: Maybe<Scalars['Boolean']['output']>;\n};\n\ntype NcmazFcTermCardFields_Category_Fragment = { __typename: 'Category', id: string, name?: string | null, count?: number | null, uri?: string | null, slug?: string | null, databaseId: number, description?: string | null, link?: string | null, taxonomyName?: string | null, ncTaxonomyMeta?: { __typename?: 'Category_Nctaxonomymeta', color?: string | null, featuredImage?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null } | null } & { ' $fragmentName'?: 'NcmazFcTermCardFields_Category_Fragment' };\n\ntype NcmazFcTermCardFields_PostFormat_Fragment = { __typename: 'PostFormat', id: string, count?: number | null, uri?: string | null, name?: string | null, slug?: string | null, databaseId: number, description?: string | null, link?: string | null, taxonomyName?: string | null } & { ' $fragmentName'?: 'NcmazFcTermCardFields_PostFormat_Fragment' };\n\ntype NcmazFcTermCardFields_Tag_Fragment = { __typename: 'Tag', id: string, name?: string | null, count?: number | null, uri?: string | null, slug?: string | null, databaseId: number, description?: string | null, link?: string | null, taxonomyName?: string | null, ncTaxonomyMeta?: { __typename?: 'Tag_Nctaxonomymeta', color?: string | null, featuredImage?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null } | null } & { ' $fragmentName'?: 'NcmazFcTermCardFields_Tag_Fragment' };\n\nexport type NcmazFcTermCardFieldsFragment = NcmazFcTermCardFields_Category_Fragment | NcmazFcTermCardFields_PostFormat_Fragment | NcmazFcTermCardFields_Tag_Fragment;\n\nexport type NcmazFcTermsCardFieldsFragment = { __typename: 'RootQueryToTermNodeConnection', edges: Array<{ __typename?: 'RootQueryToTermNodeConnectionEdge', node: (\n      { __typename?: 'Category' }\n      & { ' $fragmentRefs'?: { 'NcmazFcTermCardFields_Category_Fragment': NcmazFcTermCardFields_Category_Fragment } }\n    ) | (\n      { __typename?: 'PostFormat' }\n      & { ' $fragmentRefs'?: { 'NcmazFcTermCardFields_PostFormat_Fragment': NcmazFcTermCardFields_PostFormat_Fragment } }\n    ) | (\n      { __typename?: 'Tag' }\n      & { ' $fragmentRefs'?: { 'NcmazFcTermCardFields_Tag_Fragment': NcmazFcTermCardFields_Tag_Fragment } }\n    ) }> } & { ' $fragmentName'?: 'NcmazFcTermsCardFieldsFragment' };\n\nexport type NcmazFcPostsEdegsFieldsFragment = { __typename: 'RootQueryToPostConnection', edges: Array<{ __typename?: 'RootQueryToPostConnectionEdge', node: (\n      { __typename?: 'Post' }\n      & { ' $fragmentRefs'?: { 'NcmazFcPostCardFieldsFragment': NcmazFcPostCardFieldsFragment } }\n    ) }> } & { ' $fragmentName'?: 'NcmazFcPostsEdegsFieldsFragment' };\n\nexport type NcmazFcPostCardFieldsFragment = { __typename: 'Post', id: string, link?: string | null, uri?: string | null, modifiedGmt?: string | null, modified?: string | null, isSticky: boolean, dateGmt?: string | null, date?: string | null, commentStatus?: string | null, status?: string | null, commentCount?: number | null, excerpt?: string | null, databaseId: number, slug?: string | null, title?: string | null, author?: { __typename?: 'NodeWithAuthorToUserConnectionEdge', node: { __typename?: 'User', id: string, databaseId: number, url?: string | null, uri?: string | null, username?: string | null, name?: string | null, slug?: string | null, avatar?: { __typename?: 'Avatar', url?: string | null } | null, ncUserMeta?: { __typename?: 'User_Ncusermeta', featuredImage?: (\n          { __typename?: 'MediaItem' }\n          & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n        ) | null } | null } } | null, categories?: { __typename?: 'PostToCategoryConnection', edges: Array<{ __typename?: 'PostToCategoryConnectionEdge', node: { __typename?: 'Category', id: string, link?: string | null, name?: string | null, uri?: string | null, slug?: string | null, count?: number | null, categoryId?: number | null, ncTaxonomyMeta?: { __typename?: 'Category_Nctaxonomymeta', color?: string | null } | null } }> } | null, featuredImage?: { __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge', node: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) } | null, postFormats?: { __typename?: 'PostToPostFormatConnection', edges: Array<{ __typename?: 'PostToPostFormatConnectionEdge', node: { __typename?: 'PostFormat', id: string, name?: string | null, slug?: string | null } }> } | null, ncmazVideoUrl?: { __typename?: 'Post_Ncmazvideourl', videoUrl?: string | null } | null, ncmazAudioUrl?: { __typename?: 'Post_Ncmazaudiourl', audioUrl?: string | null } | null, ncPostMetaData?: (\n    { __typename?: 'Post_Ncpostmetadata' }\n    & { ' $fragmentRefs'?: { 'NcmazFcPostMetaFieldsFragment': NcmazFcPostMetaFieldsFragment } }\n  ) | null, ncmazGalleryImgs?: { __typename?: 'Post_Ncmazgalleryimgs', image1?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null, image2?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null, image3?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null, image4?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null, image5?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null, image6?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null, image7?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null, image8?: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) | null } | null } & { ' $fragmentName'?: 'NcmazFcPostCardFieldsFragment' };\n\nexport type NcmazFcImageFieldsFragment = { __typename: 'MediaItem', id: string, altText?: string | null, caption?: string | null, databaseId: number, sizes?: string | null, sourceUrl?: string | null, srcSet?: string | null } & { ' $fragmentName'?: 'NcmazFcImageFieldsFragment' };\n\nexport type NcmazFcPostMetaFieldsFragment = { __typename: 'Post_Ncpostmetadata', reactionLikedList?: string | null, savedList?: string | null, showRightSidebar?: boolean | null, singlePageStyle?: string | null, viewsCount?: string | null, readingTime?: number | null } & { ' $fragmentName'?: 'NcmazFcPostMetaFieldsFragment' };\n\nexport type PostsWithVariablesQueryQueryVariables = Exact<{\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>>;\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>>;\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>>;\n  search?: InputMaybe<Scalars['String']['input']>;\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  field?: InputMaybe<PostObjectsConnectionOrderbyEnum>;\n  order?: InputMaybe<OrderEnum>;\n}>;\n\n\nexport type PostsWithVariablesQueryQuery = { __typename?: 'RootQuery', posts?: (\n    { __typename?: 'RootQueryToPostConnection' }\n    & { ' $fragmentRefs'?: { 'NcmazFcPostsEdegsFieldsFragment': NcmazFcPostsEdegsFieldsFragment } }\n  ) | null };\n\nexport type TermsWithVariablesQueryQueryVariables = Exact<{\n  first?: InputMaybe<Scalars['Int']['input']>;\n  order?: InputMaybe<OrderEnum>;\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>> | InputMaybe<TaxonomyEnum>>;\n}>;\n\n\nexport type TermsWithVariablesQueryQuery = { __typename?: 'RootQuery', terms?: { __typename?: 'RootQueryToTermNodeConnection', edges: Array<{ __typename?: 'RootQueryToTermNodeConnectionEdge', node: { __typename: 'Category', id: string, name?: string | null, count?: number | null, slug?: string | null, databaseId: number, description?: string | null, link?: string | null, taxonomyName?: string | null, ncTaxonomyMeta?: { __typename?: 'Category_Nctaxonomymeta', color?: string | null, featuredImage?: (\n            { __typename?: 'MediaItem' }\n            & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n          ) | null } | null } | { __typename: 'PostFormat', id: string, count?: number | null, name?: string | null, slug?: string | null, databaseId: number, description?: string | null, link?: string | null, taxonomyName?: string | null } | { __typename: 'Tag', id: string, name?: string | null, count?: number | null, slug?: string | null, databaseId: number, description?: string | null, link?: string | null, taxonomyName?: string | null, ncTaxonomyMeta?: { __typename?: 'Tag_Nctaxonomymeta', color?: string | null, featuredImage?: (\n            { __typename?: 'MediaItem' }\n            & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n          ) | null } | null } }> } | null };\n\nexport const NcmazFcImageFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sizes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"srcSet\"}}]}}]} as unknown as DocumentNode<NcmazFcImageFieldsFragment, unknown>;\nexport const NcmazFcTermCardFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTermCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TermNode\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"taxonomyName\"}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Tag\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sizes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"srcSet\"}}]}}]} as unknown as DocumentNode<NcmazFcTermCardFieldsFragment, unknown>;\nexport const NcmazFcTermsCardFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTermsCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"RootQueryToTermNodeConnection\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTermCardFields\"}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sizes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"srcSet\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTermCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TermNode\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"taxonomyName\"}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Tag\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}}]} as unknown as DocumentNode<NcmazFcTermsCardFieldsFragment, unknown>;\nexport const NcmazFcPostMetaFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post_Ncpostmetadata\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"reactionLikedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"savedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"showRightSidebar\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"singlePageStyle\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}}]}}]} as unknown as DocumentNode<NcmazFcPostMetaFieldsFragment, unknown>;\nexport const NcmazFcPostCardFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modifiedGmt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modified\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isSticky\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dateGmt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentStatus\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"author\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"avatar\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"excerpt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"postFormats\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazVideoUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"videoUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazAudioUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"audioUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncPostMetaData\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazGalleryImgs\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image1\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image2\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image3\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image4\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image5\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image6\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image7\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image8\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sizes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"srcSet\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post_Ncpostmetadata\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"reactionLikedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"savedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"showRightSidebar\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"singlePageStyle\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}}]}}]} as unknown as DocumentNode<NcmazFcPostCardFieldsFragment, unknown>;\nexport const NcmazFcPostsEdegsFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostsEdegsFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"RootQueryToPostConnection\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sizes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"srcSet\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post_Ncpostmetadata\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"reactionLikedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"savedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"showRightSidebar\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"singlePageStyle\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modifiedGmt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modified\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isSticky\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dateGmt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentStatus\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"author\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"avatar\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"excerpt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"postFormats\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazVideoUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"videoUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazAudioUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"audioUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncPostMetaData\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazGalleryImgs\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image1\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image2\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image3\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image4\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image5\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image6\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image7\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image8\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]} as unknown as DocumentNode<NcmazFcPostsEdegsFieldsFragment, unknown>;\nexport const PostsWithVariablesQueryDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"postsWithVariablesQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"authorIn\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},\"defaultValue\":{\"kind\":\"StringValue\",\"value\":\"\",\"block\":false}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryIn\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},\"defaultValue\":{\"kind\":\"StringValue\",\"value\":\"\",\"block\":false}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"tagIn\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},\"defaultValue\":{\"kind\":\"StringValue\",\"value\":\"\",\"block\":false}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"search\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":{\"kind\":\"StringValue\",\"value\":\"\",\"block\":false}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"parentIn\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},\"defaultValue\":{\"kind\":\"StringValue\",\"value\":\"\",\"block\":false}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":{\"kind\":\"IntValue\",\"value\":\"10\"}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PostObjectsConnectionOrderbyEnum\"}},\"defaultValue\":{\"kind\":\"EnumValue\",\"value\":\"AUTHOR\"}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"order\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrderEnum\"}},\"defaultValue\":{\"kind\":\"EnumValue\",\"value\":\"ASC\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"posts\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"},\"value\":{\"kind\":\"ObjectValue\",\"fields\":[{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"authorIn\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"authorIn\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryIn\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryIn\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"tagIn\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"tagIn\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"search\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"search\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"parentIn\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"parentIn\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"orderby\"},\"value\":{\"kind\":\"ObjectValue\",\"fields\":[{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"order\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"order\"}}}]}}]}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostsEdegsFields\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sizes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"srcSet\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post_Ncpostmetadata\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"reactionLikedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"savedList\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"showRightSidebar\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"singlePageStyle\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modifiedGmt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modified\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isSticky\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"dateGmt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentStatus\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"author\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"avatar\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"url\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"excerpt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"postFormats\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazVideoUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"videoUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazAudioUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"audioUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncPostMetaData\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazGalleryImgs\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image1\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image2\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image3\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image4\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image5\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image6\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image7\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image8\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostsEdegsFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"RootQueryToPostConnection\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"}}]}}]}}]}}]} as unknown as DocumentNode<PostsWithVariablesQueryQuery, PostsWithVariablesQueryQueryVariables>;\nexport const TermsWithVariablesQueryDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"termsWithVariablesQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":{\"kind\":\"IntValue\",\"value\":\"10\"}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"order\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrderEnum\"}},\"defaultValue\":{\"kind\":\"EnumValue\",\"value\":\"ASC\"}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"orderby\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TermObjectsConnectionOrderbyEnum\"}},\"defaultValue\":{\"kind\":\"EnumValue\",\"value\":\"COUNT\"}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"taxonomies\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaxonomyEnum\"}}},\"defaultValue\":{\"kind\":\"EnumValue\",\"value\":\"CATEGORY\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"terms\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"},\"value\":{\"kind\":\"ObjectValue\",\"fields\":[{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"taxonomies\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"taxonomies\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"orderby\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"orderby\"}}},{\"kind\":\"ObjectField\",\"name\":{\"kind\":\"Name\",\"value\":\"order\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"order\"}}}]}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"edges\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"taxonomyName\"}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Tag\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sizes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"srcSet\"}}]}}]} as unknown as DocumentNode<TermsWithVariablesQueryQuery, TermsWithVariablesQueryQueryVariables>;","export * from \"./fragment-masking\";\nexport * from \"./gql\";","import { AttrsGenericType } from \"../types\";\r\n\r\nexport interface BlockTerms_Attrs {\r\n\tuniqueId: string;\r\n\tnumberOfTags: number;\r\n\torder: \"DESC\" | \"ASC\";\r\n\torderBy: \"NAME\" | \"COUNT\" | \"TERM_GROUP\" | \"TERM_ORDER\";\r\n\ttaxonomy: \"CATEGORY\" | \"POSTFORMAT\" | \"TAG\";\r\n\tshowTagCounts: boolean;\r\n\tblockVariation: string;\r\n\tinitTerms: any[];\r\n}\r\n\r\nconst blokcAttrs: AttrsGenericType<BlockTerms_Attrs> = {\r\n\tuniqueId: {\r\n\t\ttype: \"string\",\r\n\t\tdefault: \"\",\r\n\t},\r\n\tinitTerms: {\r\n\t\ttype: \"array\",\r\n\t\tdefault: [],\r\n\t},\r\n\torder: {\r\n\t\ttype: \"string\",\r\n\t\tdefault: \"DESC\",\r\n\t},\r\n\torderBy: {\r\n\t\ttype: \"string\",\r\n\t\tdefault: \"NAME\",\r\n\t},\r\n\tblockVariation: {\r\n\t\ttype: \"string\",\r\n\t\tdefault: \"style-1\",\r\n\t},\r\n\tnumberOfTags: {\r\n\t\ttype: \"number\",\r\n\t\tdefault: 30,\r\n\t},\r\n\tshowTagCounts: {\r\n\t\ttype: \"boolean\",\r\n\t\tdefault: true,\r\n\t},\r\n\ttaxonomy: {\r\n\t\ttype: \"string\",\r\n\t\tdefault: \"TAG\",\r\n\t},\r\n};\r\n\r\nexport default blokcAttrs;\r\n","const v1 = {};\r\nconst v2 = {};\r\n\r\nconst deprecated = [v2, v1];\r\n\r\nexport default deprecated;\r\n","/**\n * WordPress dependencies\n */\nimport React, { FC, useEffect } from \"react\";\nimport {\n\tPanelBody,\n\tToggleControl,\n\tSelectControl,\n\tRangeControl,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport { store as coreStore } from \"@wordpress/core-data\";\nimport { withSelect } from \"@wordpress/data\";\nimport { InspectorControls, useBlockProps } from \"@wordpress/block-editor\";\nimport { ContainerEditProps } from \"../types\";\nimport { BlockTerms_Attrs } from \"./attributes\";\nimport useTermGqlQuery from \"../hooks/useTermGqlQuery\";\nimport TermOrderControl from \"./order-control\";\nimport SectionSliderNewCategories from \"../frontend-components/SectionSliderNewCategories/SectionSliderNewCategories\";\n\nconst MIN_TAGS = 1;\nconst MAX_TAGS = 100;\n\nconst Edit: FC<ContainerEditProps<BlockTerms_Attrs>> = (props) => {\n\tconst { attributes, setAttributes } = props;\n\n\tconst {\n\t\tblockVariation,\n\t\tnumberOfTags,\n\t\tshowTagCounts,\n\t\ttaxonomy,\n\t\tuniqueId,\n\t\torder,\n\t\torderBy,\n\t} = attributes;\n\n\tconst { data, dataLists, error, loading, variables } =\n\t\tuseTermGqlQuery(attributes);\n\n\t// ---- SAVE initPosts ----\n\tuseEffect(() => {\n\t\tif (loading) {\n\t\t\treturn;\n\t\t}\n\t\tconsole.log(999, \"__terms___\", {\n\t\t\tloading,\n\t\t\terror,\n\t\t\tdata,\n\t\t\tvariables,\n\t\t\tdataLists,\n\t\t});\n\t\tsetAttributes({\n\t\t\tinitTerms: dataLists,\n\t\t});\n\t}, [loading]);\n\n\tconst inspectorControls = (\n\t\t<InspectorControls>\n\t\t\t<PanelBody title=\"Layout\">\n\t\t\t\t<div className=\"space-y-2.5\">\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tlabel={__(\"Select block's variation\", \"ncmazfc\")}\n\t\t\t\t\t\tvalue={blockVariation}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t{ label: \"Style 1\", value: \"style-1\" },\n\t\t\t\t\t\t\t{ label: \"Style 2\", value: \"style-2\" },\n\t\t\t\t\t\t\t{ label: \"Style 3\", value: \"style-3\" },\n\t\t\t\t\t\t\t{ label: \"Style 4\", value: \"style-4\" },\n\t\t\t\t\t\t\t{ label: \"Style 5\", value: \"style-5\" },\n\t\t\t\t\t\t\t{ label: \"Style 6\", value: \"style-6\" },\n\t\t\t\t\t\t\t{ label: \"Style 7\", value: \"style-7\" },\n\t\t\t\t\t\t\t{ label: \"Style 8\", value: \"style-8\" },\n\t\t\t\t\t\t\t{ label: \"Style 9\", value: \"style-9\" },\n\t\t\t\t\t\t\t{ label: \"Style 10\", value: \"style-10\" },\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tonChange={(blockVariation) => setAttributes({ blockVariation })}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</PanelBody>\n\t\t\t<PanelBody title={__(\"Settings\")}>\n\t\t\t\t<SelectControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tlabel={__(\"Taxonomy\")}\n\t\t\t\t\toptions={[\n\t\t\t\t\t\t{ label: \"CATEGORY\", value: \"CATEGORY\" },\n\t\t\t\t\t\t{ label: \"POSTFORMAT\", value: \"POSTFORMAT\" },\n\t\t\t\t\t\t{ label: \"TAG\", value: \"TAG\" },\n\t\t\t\t\t]}\n\t\t\t\t\tvalue={taxonomy}\n\t\t\t\t\tonChange={(selectedTaxonomy) =>\n\t\t\t\t\t\tsetAttributes({\n\t\t\t\t\t\t\ttaxonomy: selectedTaxonomy as BlockTerms_Attrs[\"taxonomy\"],\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\n\t\t\t\t<TermOrderControl\n\t\t\t\t\t{...{ order, orderBy }}\n\t\t\t\t\tonChange={({ order, orderBy }) => {\n\t\t\t\t\t\tsetAttributes({ order, orderBy });\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<ToggleControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tlabel={__(\"Show post counts\")}\n\t\t\t\t\tchecked={showTagCounts}\n\t\t\t\t\tonChange={() => setAttributes({ showTagCounts: !showTagCounts })}\n\t\t\t\t/>\n\t\t\t\t<RangeControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tlabel={__(\"Number of tags\")}\n\t\t\t\t\tvalue={numberOfTags}\n\t\t\t\t\tonChange={(value) => setAttributes({ numberOfTags: value })}\n\t\t\t\t\tmin={MIN_TAGS}\n\t\t\t\t\tmax={MAX_TAGS}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t</PanelBody>\n\t\t</InspectorControls>\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{inspectorControls}\n\t\t\t<div {...useBlockProps()}>\n\t\t\t\t<div className=\"space-y-2.5\">\n\t\t\t\t\t{loading && <p>{__(\"Loading…\")}</p>}\n\t\t\t\t\t{error && (\n\t\t\t\t\t\t<pre>\n\t\t\t\t\t\t\t<code>{JSON.stringify(error)}</code>\n\t\t\t\t\t\t</pre>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<SectionSliderNewCategories\n\t\t\t\t\tterms={data?.terms?.edges || []}\n\t\t\t\t\tcategoryCardType=\"card4\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\n// @ts-ignore\nexport default Edit;\n","import { registerBlockType } from \"@wordpress/blocks\";\nimport \"./style.scss\";\n\n/**\n * Internal dependencies\n */\nimport Edit from \"./edit\";\nimport save from \"./save\";\nimport metadata from \"./block.json\";\nimport deprecated from \"./deprecated\";\nimport attributes from \"./attributes\";\n//\nimport { client } from \"../main\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { Suspense } from \"@wordpress/element\";\nimport { Spinner } from \"@wordpress/components\";\n\nregisterBlockType(metadata.name, {\n\tedit: (props) => (\n\t\t<ApolloProvider client={client}>\n\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t<Edit {...props} />\n\t\t\t</Suspense>\n\t\t</ApolloProvider>\n\t),\n\tsave,\n\tattributes,\n\tdeprecated: deprecated,\n\texample: {},\n\ticon: (\n\t\t<svg\n\t\t\tclassName=\"wcb-editor-block-icons fill-none \"\n\t\t\twidth={24}\n\t\t\theight={24}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t>\n\t\t\t<path\n\t\t\t\td=\"M5 10H7C9 10 10 9 10 7V5C10 3 9 2 7 2H5C3 2 2 3 2 5V7C2 9 3 10 5 10Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M17 10H19C21 10 22 9 22 7V5C22 3 21 2 19 2H17C15 2 14 3 14 5V7C14 9 15 10 17 10Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M17 22H19C21 22 22 21 22 19V17C22 15 21 14 19 14H17C15 14 14 15 14 17V19C14 21 15 22 17 22Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M5 22H7C9 22 10 21 10 19V17C10 15 9 14 7 14H5C3 14 2 15 2 17V19C2 21 3 22 5 22Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t</svg>\n\t),\n});\n","/**\r\n * WordPress dependencies\r\n */\r\nimport React from \"react\";\r\nimport { SelectControl } from \"@wordpress/components\";\r\nimport { __ } from \"@wordpress/i18n\";\r\nimport { BlockTerms_Attrs } from \"./attributes\";\r\n\r\nconst orderOptions: {\r\n\tlabel: string;\r\n\tvalue: `${BlockTerms_Attrs[\"orderBy\"]}/${BlockTerms_Attrs[\"order\"]}`;\r\n}[] = [\r\n\t{\r\n\t\tlabel: __(\"Item count/desc\"),\r\n\t\tvalue: \"COUNT/DESC\",\r\n\t},\r\n\t{\r\n\t\tlabel: __(\"Item count/asc\"),\r\n\t\tvalue: \"COUNT/ASC\",\r\n\t},\r\n\t{\r\n\t\t/* translators: label for ordering posts by title in ascending order */\r\n\t\tlabel: __(\"A → Z\"),\r\n\t\tvalue: \"NAME/ASC\",\r\n\t},\r\n\t{\r\n\t\t/* translators: label for ordering posts by title in descending order */\r\n\t\tlabel: __(\"Z → A\"),\r\n\t\tvalue: \"NAME/DESC\",\r\n\t},\r\n\t{\r\n\t\t/* translators: label for ordering posts by title in ascending order */\r\n\t\tlabel: __(\"Term group/asc\"),\r\n\t\tvalue: \"TERM_GROUP/ASC\",\r\n\t},\r\n\t{\r\n\t\t/* translators: label for ordering posts by title in descending order */\r\n\t\tlabel: __(\"Term group/desc\"),\r\n\t\tvalue: \"TERM_GROUP/DESC\",\r\n\t},\r\n\t{\r\n\t\t/* translators: label for ordering posts by title in ascending order */\r\n\t\tlabel: __(\"Term order/asc\"),\r\n\t\tvalue: \"TERM_ORDER/ASC\",\r\n\t},\r\n\t{\r\n\t\t/* translators: label for ordering posts by title in descending order */\r\n\t\tlabel: __(\"Term order/desc\"),\r\n\t\tvalue: \"TERM_ORDER/DESC\",\r\n\t},\r\n];\r\nfunction TermOrderControl({\r\n\torder,\r\n\torderBy,\r\n\tonChange,\r\n}: {\r\n\torder: BlockTerms_Attrs[\"order\"];\r\n\torderBy: BlockTerms_Attrs[\"orderBy\"];\r\n\tonChange: (value: {\r\n\t\torder: BlockTerms_Attrs[\"order\"];\r\n\t\torderBy: BlockTerms_Attrs[\"orderBy\"];\r\n\t}) => void;\r\n}) {\r\n\treturn (\r\n\t\t<SelectControl\r\n\t\t\t__nextHasNoMarginBottom\r\n\t\t\tlabel={__(\"Order by\")}\r\n\t\t\tvalue={`${orderBy}/${order}`}\r\n\t\t\toptions={orderOptions}\r\n\t\t\tonChange={(value) => {\r\n\t\t\t\tconst [newOrderBy, newOrder] = value.split(\"/\");\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tonChange({ order: newOrder, orderBy: newOrderBy });\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default TermOrderControl;\r\n","import { useBlockProps } from \"@wordpress/block-editor\";\nimport React from \"react\";\n\nexport default function save() {\n\treturn (\n\t\t<p {...useBlockProps.save()}>\n\t\t\t{\"Todo List – hello from the saved content!\"}\n\t\t</p>\n\t);\n}\n","import React, { FC, ReactNode } from \"react\";\r\n\r\nconst Badge = ({ className = \"relative\", name, color = \"pink\", href = \"\" }) => {\r\n\tconst getColorClass = (hasHover = true) => {\r\n\t\tswitch (color) {\r\n\t\t\tcase \"pink\":\r\n\t\t\t\treturn `text-pink-800 bg-pink-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-pink-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t\tcase \"red\":\r\n\t\t\t\treturn `text-red-800 bg-red-100 ${hasHover ? \"hover:bg-red-800\" : \"\"}`;\r\n\t\t\tcase \"gray\":\r\n\t\t\t\treturn `text-gray-800 bg-gray-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-gray-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t\tcase \"green\":\r\n\t\t\t\treturn `text-green-800 bg-green-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-green-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t\tcase \"purple\":\r\n\t\t\t\treturn `text-purple-800 bg-purple-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-purple-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t\tcase \"indigo\":\r\n\t\t\t\treturn `text-indigo-800 bg-indigo-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-indigo-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t\tcase \"yellow\":\r\n\t\t\t\treturn `text-yellow-800 bg-yellow-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-yellow-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t\tcase \"blue\":\r\n\t\t\t\treturn `text-blue-800 bg-blue-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-blue-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t\tdefault:\r\n\t\t\t\treturn `text-pink-800 bg-pink-100 ${\r\n\t\t\t\t\thasHover ? \"hover:bg-pink-800\" : \"\"\r\n\t\t\t\t}`;\r\n\t\t}\r\n\t};\r\n\r\n\tconst CLASSES =\r\n\t\t\"nc-Badge  inline-flex px-2.5 py-1 rounded-full font-medium text-xs \" +\r\n\t\tclassName;\r\n\treturn !!href ? (\r\n\t\t<a\r\n\t\t\thref={href || \"\"}\r\n\t\t\tclassName={`transition-colors hover:text-white duration-300 ${CLASSES} ${getColorClass()}`}\r\n\t\t>\r\n\t\t\t{name}\r\n\t\t</a>\r\n\t) : (\r\n\t\t<span className={`${CLASSES} ${getColorClass(false)} ${className}`}>\r\n\t\t\t{name}\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nexport default Badge;\r\n","import React, { FC } from \"react\";\r\nimport { TaxonomyType } from \"../SectionSliderNewCategories/SectionSliderNewCategories\";\r\nimport NcImage from \"../NcImage/NcImage\";\r\n\r\nexport interface CardCategory1Props {\r\n\tclassName?: string;\r\n\ttaxonomy: TaxonomyType;\r\n\tsize?: \"large\" | \"normal\";\r\n}\r\n\r\nconst CardCategory1: FC<CardCategory1Props> = ({\r\n\tclassName = \"\",\r\n\tsize = \"normal\",\r\n\ttaxonomy,\r\n}) => {\r\n\tconst { count, name, ncTaxonomyMeta } = taxonomy;\r\n\treturn (\r\n\t\t<span className={`nc-CardCategory1 flex items-center ${className}`}>\r\n\t\t\t<NcImage\r\n\t\t\t\talt=\"\"\r\n\t\t\t\tcontainerClassName={`relative flex-shrink-0 ${\r\n\t\t\t\t\tsize === \"large\" ? \"w-20 h-20\" : \"w-12 h-12\"\r\n\t\t\t\t} rounded-lg me-4 overflow-hidden`}\r\n\t\t\t\tsrc={ncTaxonomyMeta?.featuredImage?.sourceUrl || \"\"}\r\n\t\t\t\tfill\r\n\t\t\t\tclassName=\"object-cover\"\r\n\t\t\t\tsizes=\"80px\"\r\n\t\t\t/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2\r\n\t\t\t\t\tclassName={`${\r\n\t\t\t\t\t\tsize === \"large\" ? \"text-lg\" : \"text-base\"\r\n\t\t\t\t\t} nc-card-title text-neutral-900 dark:text-neutral-100 text-sm sm:text-base font-medium sm:font-semibold`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{name}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={`${\r\n\t\t\t\t\t\tsize === \"large\" ? \"text-sm\" : \"text-xs\"\r\n\t\t\t\t\t} block mt-[2px] text-neutral-500 dark:text-neutral-400`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{count} Articles\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nexport default CardCategory1;\r\n","import React, { FC } from \"react\";\r\nimport NcImage from \"../NcImage/NcImage\";\r\nimport { TwMainColor } from \"../../data/types\";\r\nimport { TaxonomyType } from \"../SectionSliderNewCategories/SectionSliderNewCategories\";\r\nimport Badge from \"../Badge/Badge\";\r\n\r\nexport interface CardCategory2Props {\r\n\tclassName?: string;\r\n\ttaxonomy: TaxonomyType;\r\n\tindex?: string;\r\n}\r\n\r\nconst CardCategory2: FC<CardCategory2Props> = ({\r\n\tclassName = \"\",\r\n\ttaxonomy,\r\n\tindex,\r\n}) => {\r\n\tconst { count, name, ncTaxonomyMeta } = taxonomy;\r\n\treturn (\r\n\t\t<span\r\n\t\t\tclassName={`nc-CardCategory2 relative flex flex-col items-center justify-center text-center px-3 py-5 sm:p-6 bg-white dark:bg-neutral-900 rounded-3xl transition-colors ${className}`}\r\n\t\t>\r\n\t\t\t{index && (\r\n\t\t\t\t<Badge\r\n\t\t\t\t\tcolor={ncTaxonomyMeta?.color as TwMainColor}\r\n\t\t\t\t\tname={index}\r\n\t\t\t\t\tclassName=\"absolute -top-2 sm:top-3 left-3\"\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t\t<NcImage\r\n\t\t\t\tcontainerClassName={`relative flex-shrink-0 w-20 h-20 rounded-full shadow-lg overflow-hidden z-0`}\r\n\t\t\t\tsrc={ncTaxonomyMeta?.featuredImage?.sourceUrl || \"\"}\r\n\t\t\t\tfill\r\n\t\t\t\tsizes=\"80px\"\r\n\t\t\t\talt=\"categories\"\r\n\t\t\t\tclassName=\"object-cover \"\r\n\t\t\t/>\r\n\t\t\t<div className=\"mt-3\">\r\n\t\t\t\t<h2 className={`text-base font-semibold`}>{name}</h2>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={`block mt-1 text-sm text-neutral-500 dark:text-neutral-400`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{count} Articles\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nexport default CardCategory2;\r\n","import React, { FC } from \"react\";\r\nimport { TaxonomyType } from \"../SectionSliderNewCategories/SectionSliderNewCategories\";\r\nimport NcImage from \"../NcImage/NcImage\";\r\n\r\nexport interface CardCategory3Props {\r\n\tclassName?: string;\r\n\ttaxonomy: TaxonomyType;\r\n}\r\n\r\nconst CardCategory3: FC<CardCategory3Props> = ({\r\n\tclassName = \"\",\r\n\ttaxonomy,\r\n}) => {\r\n\tconst { count, name, ncTaxonomyMeta } = taxonomy;\r\n\treturn (\r\n\t\t<span className={`nc-CardCategory3 flex flex-col ${className}`}>\r\n\t\t\t<div className=\"flex-shrink-0 relative w-full aspect-w-5 aspect-h-5 h-0 rounded-2xl overflow-hidden group\">\r\n\t\t\t\t<NcImage\r\n\t\t\t\t\tsrc={ncTaxonomyMeta?.featuredImage?.sourceUrl || \"\"}\r\n\t\t\t\t\tclassName=\"object-cover w-full h-full rounded-2xl\"\r\n\t\t\t\t\tsizes=\"(min-width: 1024px) 20rem, (min-width: 640px) 16rem, 12rem\"\r\n\t\t\t\t\tfill\r\n\t\t\t\t\talt=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<span className=\"opacity-0 group-hover:opacity-100 absolute inset-0 bg-black bg-opacity-10 transition-opacity\"></span>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"mt-4 \">\r\n\t\t\t\t<h2\r\n\t\t\t\t\tclassName={`text-base text-neutral-900 dark:text-neutral-100 font-semibold `}\r\n\t\t\t\t>\r\n\t\t\t\t\t{name}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={`block mt-1 text-sm text-neutral-6000 dark:text-neutral-400`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{count} Articles\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nexport default CardCategory3;\r\n","import React, { FC } from \"react\";\r\nimport { TaxonomyType } from \"../SectionSliderNewCategories/SectionSliderNewCategories\";\r\nimport NcImage from \"../NcImage/NcImage\";\r\nimport Badge from \"../Badge/Badge\";\r\nimport { TwMainColor } from \"../../data/types\";\r\n\r\nexport interface CardCategory4Props {\r\n\tclassName?: string;\r\n\ttaxonomy: TaxonomyType;\r\n\tindex?: string;\r\n}\r\n\r\nconst CardCategory4: FC<CardCategory4Props> = ({\r\n\tclassName = \"\",\r\n\ttaxonomy,\r\n\tindex,\r\n}) => {\r\n\tconst { count, name, ncTaxonomyMeta } = taxonomy;\r\n\tconst getColorClass = () => {\r\n\t\tswitch (ncTaxonomyMeta?.color) {\r\n\t\t\tcase \"pink\":\r\n\t\t\t\treturn \"bg-pink-500\";\r\n\t\t\tcase \"red\":\r\n\t\t\t\treturn \"bg-red-500\";\r\n\t\t\tcase \"gray\":\r\n\t\t\t\treturn \"bg-gray-500\";\r\n\t\t\tcase \"green\":\r\n\t\t\t\treturn \"bg-green-500\";\r\n\t\t\tcase \"purple\":\r\n\t\t\t\treturn \"bg-purple-500\";\r\n\t\t\tcase \"indigo\":\r\n\t\t\t\treturn \"bg-indigo-500\";\r\n\t\t\tcase \"yellow\":\r\n\t\t\t\treturn \"bg-yellow-500\";\r\n\t\t\tcase \"blue\":\r\n\t\t\t\treturn \"bg-blue-500\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"bg-pink-500\";\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={`nc-CardCategory4 flex flex-col ${className}`}>\r\n\t\t\t<div className=\"flex-shrink-0 relative w-full aspect-w-7 aspect-h-5 h-0 rounded-3xl overflow-hidden group\">\r\n\t\t\t\t<NcImage\r\n\t\t\t\t\talt=\"taxonomies\"\r\n\t\t\t\t\tfill\r\n\t\t\t\t\tsrc={ncTaxonomyMeta?.featuredImage?.sourceUrl || \"\"}\r\n\t\t\t\t\tclassName=\"object-cover w-full h-full rounded-2xl\"\r\n\t\t\t\t\tsizes=\"(min-width: 1024px) 20rem, (min-width: 640px) 16rem, 12rem\"\r\n\t\t\t\t/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{index && (\r\n\t\t\t\t\t\t<Badge\r\n\t\t\t\t\t\t\tcolor={ncTaxonomyMeta?.color as TwMainColor}\r\n\t\t\t\t\t\t\tname={index}\r\n\t\t\t\t\t\t\tclassName=\"absolute top-3 start-3\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<span className=\"opacity-0 group-hover:opacity-100 absolute inset-0 bg-black bg-opacity-10 transition-opacity\"></span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"flex items-center mt-5\">\r\n\t\t\t\t<div className={`w-9 h-9 ${getColorClass()} rounded-full`}></div>\r\n\t\t\t\t<div className=\"ms-4\">\r\n\t\t\t\t\t<h2 className=\"text-base text-neutral-900 dark:text-neutral-100 font-medium\">\r\n\t\t\t\t\t\t{name}\r\n\t\t\t\t\t</h2>\r\n\t\t\t\t\t<span className=\"block text-sm text-neutral-500 dark:text-neutral-400\">\r\n\t\t\t\t\t\t{count} Articles\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardCategory4;\r\n","import React, { FC } from \"react\";\r\nimport { ArrowRightIcon } from \"@heroicons/react/24/solid\";\r\nimport { TaxonomyType } from \"../SectionSliderNewCategories/SectionSliderNewCategories\";\r\nimport NcImage from \"../NcImage/NcImage\";\r\nimport Badge from \"../Badge/Badge\";\r\nimport { TwMainColor } from \"../../data/types\";\r\n\r\nexport interface CardCategory5Props {\r\n\tclassName?: string;\r\n\ttaxonomy: TaxonomyType;\r\n}\r\n\r\nconst CardCategory5: FC<CardCategory5Props> = ({\r\n\tclassName = \"\",\r\n\ttaxonomy,\r\n}) => {\r\n\tconst { count, name, ncTaxonomyMeta } = taxonomy;\r\n\r\n\treturn (\r\n\t\t<div className={`nc-CardCategory5 relative block group ${className}`}>\r\n\t\t\t<div\r\n\t\t\t\tclassName={`flex-shrink-0 relative w-full aspect-w-8 aspect-h-5 h-0 rounded-3xl overflow-hidden z-0 group`}\r\n\t\t\t>\r\n\t\t\t\t<NcImage\r\n\t\t\t\t\tfill\r\n\t\t\t\t\talt=\"thumbnail\"\r\n\t\t\t\t\tsrc={ncTaxonomyMeta?.featuredImage?.sourceUrl || \"\"}\r\n\t\t\t\t\tclassName=\"object-cover w-full h-full rounded-2xl\"\r\n\t\t\t\t\tsizes=\"(min-width: 1024px) 20rem, (min-width: 640px) 16rem, 12rem\"\r\n\t\t\t\t/>\r\n\t\t\t\t<span className=\"absolute inset-0 bg-black bg-opacity-20 group-hover:bg-opacity-30 transition-colors\"></span>\r\n\t\t\t</div>\r\n\t\t\t<Badge\r\n\t\t\t\tclassName=\"absolute top-3 end-3\"\r\n\t\t\t\tcolor={ncTaxonomyMeta?.color as TwMainColor}\r\n\t\t\t\tname={\r\n\t\t\t\t\t<div className=\"flex items-center\">\r\n\t\t\t\t\t\t{count}\r\n\t\t\t\t\t\t<ArrowRightIcon className=\"ms-1.5 w-3.5 h-3.5 rtl:rotate-180\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t\t<div className=\"absolute inset-0 flex items-center justify-center\">\r\n\t\t\t\t<h2\r\n\t\t\t\t\tclassName={`text-base font-medium px-4 py-2 sm:px-6 sm:py-3 bg-white text-neutral-900 bg-opacity-50 backdrop-filter backdrop-blur-lg rounded-full border-2 border-white border-opacity-60`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{name}\r\n\t\t\t\t</h2>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardCategory5;\r\n","import React, { FC, ReactNode, useEffect, useState } from \"react\";\r\nimport { useWindowSize } from \"react-use\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nimport { AnimatePresence, motion, MotionConfig } from \"framer-motion\";\r\nimport { variants } from \"../utils/animationVariants\";\r\nimport PrevBtn from \"./NextPrev/PrevBtn\";\r\nimport NextBtn from \"./NextPrev/NextBtn\";\r\n\r\nexport interface MySliderProps<T> {\r\n\tclassName?: string;\r\n\titemPerRow?: number;\r\n\tdata: T[];\r\n\trenderItem?: (item: T, indx: number) => ReactNode;\r\n\tarrowBtnClass?: string;\r\n}\r\n\r\nexport default function MySlider<T>({\r\n\tclassName = \"\",\r\n\titemPerRow = 5,\r\n\tdata,\r\n\trenderItem = () => <div></div>,\r\n\tarrowBtnClass = \"top-1/2 -translate-y-1/2\",\r\n}: MySliderProps<T>) {\r\n\tconst [currentIndex, setCurrentIndex] = useState(0);\r\n\tconst [direction, setDirection] = useState(0);\r\n\tconst [numberOfItems, setNumberOfitem] = useState(0);\r\n\r\n\tconst windowWidth = useWindowSize().width;\r\n\tuseEffect(() => {\r\n\t\tif (windowWidth <= 320) {\r\n\t\t\treturn setNumberOfitem(1);\r\n\t\t}\r\n\t\tif (windowWidth < 500) {\r\n\t\t\treturn setNumberOfitem(itemPerRow - 3 || 2);\r\n\t\t}\r\n\t\tif (windowWidth < 1024) {\r\n\t\t\treturn setNumberOfitem(itemPerRow - 2 || 3);\r\n\t\t}\r\n\t\tif (windowWidth < 1280) {\r\n\t\t\treturn setNumberOfitem(itemPerRow - 1);\r\n\t\t}\r\n\r\n\t\tsetNumberOfitem(itemPerRow);\r\n\t}, [itemPerRow, windowWidth]);\r\n\r\n\tfunction changeItemId(newVal: number) {\r\n\t\tif (newVal > currentIndex) {\r\n\t\t\tsetDirection(1);\r\n\t\t} else {\r\n\t\t\tsetDirection(-1);\r\n\t\t}\r\n\t\tsetCurrentIndex(newVal);\r\n\t}\r\n\r\n\tconst handlers = useSwipeable({\r\n\t\tonSwipedLeft: () => {\r\n\t\t\tif (currentIndex < data?.length - 1) {\r\n\t\t\t\tchangeItemId(currentIndex + 1);\r\n\t\t\t}\r\n\t\t},\r\n\t\tonSwipedRight: () => {\r\n\t\t\tif (currentIndex > 0) {\r\n\t\t\t\tchangeItemId(currentIndex - 1);\r\n\t\t\t}\r\n\t\t},\r\n\t\ttrackMouse: true,\r\n\t});\r\n\r\n\tif (!numberOfItems) {\r\n\t\treturn <div></div>;\r\n\t}\r\n\r\n\tconst isRTL = document.querySelector(\"html\")?.getAttribute(\"dir\") === \"rtl\";\r\n\r\n\treturn (\r\n\t\t<div className={`nc-MySlider ${className}`}>\r\n\t\t\t<MotionConfig\r\n\t\t\t\ttransition={{\r\n\t\t\t\t\tx: { type: \"spring\", stiffness: 300, damping: 30 },\r\n\t\t\t\t\topacity: { duration: 0.2 },\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div className={`relative flow-root`} {...handlers}>\r\n\t\t\t\t\t<div className={`flow-root overflow-hidden rounded-xl`}>\r\n\t\t\t\t\t\t<motion.ul\r\n\t\t\t\t\t\t\tinitial={false}\r\n\t\t\t\t\t\t\tclassName=\"relative whitespace-nowrap -mx-2 xl:-mx-4 \"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<AnimatePresence initial={false} custom={direction}>\r\n\t\t\t\t\t\t\t\t{data.map((item, indx) => (\r\n\t\t\t\t\t\t\t\t\t<motion.li\r\n\t\t\t\t\t\t\t\t\t\tclassName={`relative inline-block px-2 xl:px-4 whitespace-normal`}\r\n\t\t\t\t\t\t\t\t\t\tcustom={direction}\r\n\t\t\t\t\t\t\t\t\t\tinitial={{\r\n\t\t\t\t\t\t\t\t\t\t\tx: !isRTL\r\n\t\t\t\t\t\t\t\t\t\t\t\t? `${(currentIndex - 1) * -100}%`\r\n\t\t\t\t\t\t\t\t\t\t\t\t: `${(currentIndex - 1) * 100}%`,\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tanimate={{\r\n\t\t\t\t\t\t\t\t\t\t\tx: !isRTL\r\n\t\t\t\t\t\t\t\t\t\t\t\t? `${currentIndex * -100}%`\r\n\t\t\t\t\t\t\t\t\t\t\t\t: `${currentIndex * 100}%`,\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tvariants={variants(200, 1)}\r\n\t\t\t\t\t\t\t\t\t\tkey={indx}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\twidth: `calc(1/${numberOfItems} * 100%)`,\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{renderItem(item, indx)}\r\n\t\t\t\t\t\t\t\t\t</motion.li>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</AnimatePresence>\r\n\t\t\t\t\t\t</motion.ul>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{currentIndex ? (\r\n\t\t\t\t\t\t<PrevBtn\r\n\t\t\t\t\t\t\tonClick={() => changeItemId(currentIndex - 1)}\r\n\t\t\t\t\t\t\tclassName={`w-9 h-9 xl:w-12 xl:h-12 text-lg absolute -start-3 xl:-start-6 z-[1] ${arrowBtnClass}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : null}\r\n\r\n\t\t\t\t\t{data.length > currentIndex + numberOfItems ? (\r\n\t\t\t\t\t\t<NextBtn\r\n\t\t\t\t\t\t\tonClick={() => changeItemId(currentIndex + 1)}\r\n\t\t\t\t\t\t\tclassName={`w-9 h-9 xl:w-12 xl:h-12 text-lg absolute -end-3 xl:-end-6 z-[1] ${arrowBtnClass}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</div>\r\n\t\t\t</MotionConfig>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { FC, ImgHTMLAttributes } from \"react\";\r\n\r\nexport interface NcImageProps extends ImgHTMLAttributes<HTMLImageElement> {\r\n\tcontainerClassName?: string;\r\n\tfill?: boolean;\r\n}\r\n\r\nconst NcImage: FC<NcImageProps> = ({\r\n\tcontainerClassName = \"\",\r\n\talt = \"nc-imgs\",\r\n\tclassName = \"object-cover w-full h-full\",\r\n\tloading = \"lazy\",\r\n\tsrc,\r\n\tsizes,\r\n\tfill = false,\r\n\t...args\r\n}) => {\r\n\tconst renderLoadingPlaceholder = () => {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={`${className} flex items-center justify-center bg-neutral-200 dark:bg-neutral-6000 text-neutral-100 dark:text-neutral-500`}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"h-2/4 max-w-[50%]\"></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`nc-NcImage ${\r\n\t\t\t\tfill ? \"absolute inset-0\" : \"\"\r\n\t\t\t} ${containerClassName}`}\r\n\t\t\tdata-nc-id=\"NcImage\"\r\n\t\t>\r\n\t\t\t{!!src && src.includes(\"http\") ? (\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={src}\r\n\t\t\t\t\talt={alt}\r\n\t\t\t\t\tclassName={` ${\r\n\t\t\t\t\t\tfill ? \"absolute inset-0 w-full h-full\" : \"\"\r\n\t\t\t\t\t} ${className}`}\r\n\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t{...args}\r\n\t\t\t\t\t// srcSet=\"http://localhost/wordpress-1/wp-content/uploads/2022/09/1650732.jpg 960w, http://localhost/wordpress-1/wp-content/uploads/2022/09/1650732-240x300.jpg 240w, http://localhost/wordpress-1/wp-content/uploads/2022/09/1650732-819x1024.jpg 819w, http://localhost/wordpress-1/wp-content/uploads/2022/09/1650732-768x960.jpg 768w\"\r\n\t\t\t\t></img>\r\n\t\t\t) : (\r\n\t\t\t\trenderLoadingPlaceholder()\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default NcImage;\r\n","import { ChevronRightIcon } from \"@heroicons/react/24/solid\";\r\nimport React, { ButtonHTMLAttributes, FC } from \"react\";\r\n\r\ninterface Props extends ButtonHTMLAttributes<HTMLButtonElement> {}\r\n\r\nconst NextBtn: FC<Props> = ({ className = \"w-10 h-10 text-lg\", ...args }) => {\r\n\treturn (\r\n\t\t<button\r\n\t\t\tclassName={`NextBtn ${className} bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-6000 dark:hover:border-neutral-500 rounded-full inline-flex items-center justify-center hover:border-neutral-300 }`}\r\n\t\t\t{...args}\r\n\t\t>\r\n\t\t\t<ChevronRightIcon className=\"w-5 h-5 rtl:rotate-180\" />\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default NextBtn;\r\n","import { ChevronLeftIcon } from \"@heroicons/react/24/solid\";\r\nimport React, { ButtonHTMLAttributes, FC } from \"react\";\r\n\r\ninterface Props extends ButtonHTMLAttributes<HTMLButtonElement> {}\r\n\r\nconst PrevBtn: FC<Props> = ({ className = \"w-10 h-10 text-lg\", ...args }) => {\r\n\treturn (\r\n\t\t<button\r\n\t\t\tclassName={`PrevBtn ${className} bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-6000 dark:hover:border-neutral-500 rounded-full inline-flex items-center justify-center hover:border-neutral-300 `}\r\n\t\t\t{...args}\r\n\t\t>\r\n\t\t\t<ChevronLeftIcon className=\"w-5 h-5 rtl:rotate-180\" />\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default PrevBtn;\r\n","import React, { FC } from \"react\";\r\nimport {\r\n\tNcmazFcImageFieldsFragment,\r\n\tNcmazFcTermCardFieldsFragment,\r\n\tTermsWithVariablesQueryQuery,\r\n} from \"../../__generated__/graphql\";\r\nimport CardCategory1 from \"../CardCategory1/CardCategory1\";\r\nimport CardCategory2 from \"../CardCategory2/CardCategory2\";\r\nimport CardCategory3 from \"../CardCategory3/CardCategory3\";\r\nimport CardCategory4 from \"../CardCategory4/CardCategory4\";\r\nimport CardCategory5 from \"../CardCategory5/CardCategory5\";\r\nimport MySlider from \"../MySlider\";\r\n\r\nexport type TaxonomyType = NcmazFcTermCardFieldsFragment & {\r\n\tncTaxonomyMeta?: {\r\n\t\tcolor?: string;\r\n\t\tfeaturedImage?: NcmazFcImageFieldsFragment;\r\n\t};\r\n};\r\n\r\nexport interface SectionSliderNewCategoriesProps {\r\n\tclassName?: string;\r\n\tterms: NonNullable<TermsWithVariablesQueryQuery[\"terms\"]>[\"edges\"];\r\n\tcategoryCardType?: \"card1\" | \"card2\" | \"card3\" | \"card4\" | \"card5\";\r\n\titemPerRow?: 4 | 5;\r\n}\r\n\r\nconst SectionSliderNewCategories: FC<SectionSliderNewCategoriesProps> = ({\r\n\tclassName = \"\",\r\n\tterms,\r\n\titemPerRow = 5,\r\n\tcategoryCardType = \"card3\",\r\n}) => {\r\n\tconst renderCard = (item: TaxonomyType, index: number) => {\r\n\t\tconst topIndex = index < 3 ? `#${index + 1}` : undefined;\r\n\t\tswitch (categoryCardType) {\r\n\t\t\tcase \"card1\":\r\n\t\t\t\treturn <CardCategory1 key={index} taxonomy={item} />;\r\n\t\t\tcase \"card2\":\r\n\t\t\t\treturn <CardCategory2 key={index} index={topIndex} taxonomy={item} />;\r\n\t\t\tcase \"card3\":\r\n\t\t\t\treturn <CardCategory3 key={index} taxonomy={item} />;\r\n\t\t\tcase \"card4\":\r\n\t\t\t\treturn <CardCategory4 key={index} index={topIndex} taxonomy={item} />;\r\n\t\t\tcase \"card5\":\r\n\t\t\t\treturn <CardCategory5 key={index} taxonomy={item} />;\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={`nc-SectionSliderNewCategories ${className}`}>\r\n\t\t\t<MySlider\r\n\t\t\t\tdata={terms}\r\n\t\t\t\trenderItem={(item, indx) => renderCard(item.node, indx)}\r\n\t\t\t\titemPerRow={itemPerRow}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SectionSliderNewCategories;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { graphql } from \"../__generated__\";\r\nimport { BlockTerms_Attrs } from \"../block-terms/attributes\";\r\n\r\nconst termsWithVariablesQueryDocument = graphql(/* GraphQL */ `\r\n\tquery termsWithVariablesQuery(\r\n\t\t$first: Int = 10\r\n\t\t$order: OrderEnum = ASC\r\n\t\t$orderby: TermObjectsConnectionOrderbyEnum = COUNT\r\n\t\t$taxonomies: [TaxonomyEnum] = CATEGORY\r\n\t) {\r\n\t\tterms(\r\n\t\t\twhere: { taxonomies: $taxonomies, orderby: $orderby, order: $order }\r\n\t\t\tfirst: $first\r\n\t\t) {\r\n\t\t\tedges {\r\n\t\t\t\tnode {\r\n\t\t\t\t\t__typename\r\n\t\t\t\t\tid\r\n\t\t\t\t\tcount\r\n\t\t\t\t\tname\r\n\t\t\t\t\tslug\r\n\t\t\t\t\tdatabaseId\r\n\t\t\t\t\tdescription\r\n\t\t\t\t\tlink\r\n\t\t\t\t\ttaxonomyName\r\n\t\t\t\t\t... on Category {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\tncTaxonomyMeta {\r\n\t\t\t\t\t\t\tcolor\r\n\t\t\t\t\t\t\tfeaturedImage {\r\n\t\t\t\t\t\t\t\t...NcmazFcImageFields\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t... on Tag {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\tncTaxonomyMeta {\r\n\t\t\t\t\t\t\tcolor\r\n\t\t\t\t\t\t\tfeaturedImage {\r\n\t\t\t\t\t\t\t\t...NcmazFcImageFields\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`);\r\n\r\nexport default function useTermGqlQuery(attributes: BlockTerms_Attrs) {\r\n\tconst {\r\n\t\tblockVariation,\r\n\t\tnumberOfTags,\r\n\t\tshowTagCounts,\r\n\t\ttaxonomy,\r\n\t\tuniqueId,\r\n\t\torder,\r\n\t\torderBy,\r\n\t} = attributes;\r\n\t//\r\n\tlet variables = {};\r\n\t//\r\n\r\n\t// CATEGORIES\r\n\tvariables = {\r\n\t\torder,\r\n\t\torderby: orderBy,\r\n\t\tfirst: Number(numberOfTags),\r\n\t\ttaxonomies: taxonomy,\r\n\t};\r\n\r\n\t// =================== QUERY GRAPHQL ===================\r\n\tconst { loading, error, data } = useQuery(termsWithVariablesQueryDocument, {\r\n\t\tvariables,\r\n\t});\r\n\r\n\tconst dataLists = data?.terms?.edges || [];\r\n\r\n\treturn {\r\n\t\tvariables,\r\n\t\tloading,\r\n\t\terror,\r\n\t\tdata,\r\n\t\tdataLists,\r\n\t};\r\n}\r\n","import {\r\n\tApolloClient,\r\n\tInMemoryCache,\r\n\tApolloProvider,\r\n\tuseQuery,\r\n\tgql,\r\n\tHttpLink,\r\n\tfrom,\r\n} from \"@apollo/client\";\r\nimport { RetryLink } from \"@apollo/client/link/retry\";\r\n//\r\n// import \"@glidejs/glide/dist/css/glide.core.min.css\";\r\n// import \"./styles/index.scss\";\r\n// import \"./style.css\";\r\nconsole.log(12345, \"-------- FIRTS MAIN JS -------\");\r\n//\r\n\r\nconst cache = new InMemoryCache({\r\n\taddTypename: false,\r\n\ttypePolicies: {},\r\n});\r\n\r\nconst link = new RetryLink();\r\n\r\nconst httpLink = new HttpLink({\r\n\turi: ncmazcoreJsData.graphQLBasePath,\r\n});\r\n\r\nexport const client = new ApolloClient({\r\n\turi: ncmazcoreJsData.graphQLBasePath,\r\n\tcache,\r\n\tlink: from([link, httpLink]),\r\n});\r\n","export const variants = (x = 1000, opacity = 0) => ({\r\n  enter: (direction: number) => {\r\n    return {\r\n      x: direction > 0 ? x : -x,\r\n      opacity,\r\n    };\r\n  },\r\n  center: {\r\n    x: 0,\r\n    opacity: 1,\r\n  },\r\n  exit: (direction: number) => {\r\n    return {\r\n      x: direction < 0 ? x : -x,\r\n      opacity,\r\n    };\r\n  },\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport {};","import { Trie } from '@wry/trie';\nexport { Trie as KeyTrie } from '@wry/trie';\nimport { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\n\nfunction defaultDispose() { }\r\nvar Cache = /** @class */ (function () {\r\n    function Cache(max, dispose) {\r\n        if (max === void 0) { max = Infinity; }\r\n        if (dispose === void 0) { dispose = defaultDispose; }\r\n        this.max = max;\r\n        this.dispose = dispose;\r\n        this.map = new Map();\r\n        this.newest = null;\r\n        this.oldest = null;\r\n    }\r\n    Cache.prototype.has = function (key) {\r\n        return this.map.has(key);\r\n    };\r\n    Cache.prototype.get = function (key) {\r\n        var node = this.getNode(key);\r\n        return node && node.value;\r\n    };\r\n    Cache.prototype.getNode = function (key) {\r\n        var node = this.map.get(key);\r\n        if (node && node !== this.newest) {\r\n            var older = node.older, newer = node.newer;\r\n            if (newer) {\r\n                newer.older = older;\r\n            }\r\n            if (older) {\r\n                older.newer = newer;\r\n            }\r\n            node.older = this.newest;\r\n            node.older.newer = node;\r\n            node.newer = null;\r\n            this.newest = node;\r\n            if (node === this.oldest) {\r\n                this.oldest = newer;\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    Cache.prototype.set = function (key, value) {\r\n        var node = this.getNode(key);\r\n        if (node) {\r\n            return node.value = value;\r\n        }\r\n        node = {\r\n            key: key,\r\n            value: value,\r\n            newer: null,\r\n            older: this.newest\r\n        };\r\n        if (this.newest) {\r\n            this.newest.newer = node;\r\n        }\r\n        this.newest = node;\r\n        this.oldest = this.oldest || node;\r\n        this.map.set(key, node);\r\n        return node.value;\r\n    };\r\n    Cache.prototype.clean = function () {\r\n        while (this.oldest && this.map.size > this.max) {\r\n            this.delete(this.oldest.key);\r\n        }\r\n    };\r\n    Cache.prototype.delete = function (key) {\r\n        var node = this.map.get(key);\r\n        if (node) {\r\n            if (node === this.newest) {\r\n                this.newest = node.older;\r\n            }\r\n            if (node === this.oldest) {\r\n                this.oldest = node.newer;\r\n            }\r\n            if (node.newer) {\r\n                node.newer.older = node.older;\r\n            }\r\n            if (node.older) {\r\n                node.older.newer = node.newer;\r\n            }\r\n            this.map.delete(key);\r\n            this.dispose(node.value, key);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return Cache;\r\n}());\n\nvar parentEntrySlot = new Slot();\n\nvar _a;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nvar \r\n// This Array.from polyfill is restricted to working with Set<any> for now,\r\n// but we can improve the polyfill and add other input types, as needed. Note\r\n// that this fallback implementation will only be used if the host environment\r\n// does not support a native Array.from function. In most modern JS runtimes,\r\n// the toArray function exported here will be === Array.from.\r\ntoArray = (_a = Array.from, _a === void 0 ? function (collection) {\r\n    var array = [];\r\n    collection.forEach(function (item) { return array.push(item); });\r\n    return array;\r\n} : _a);\r\nfunction maybeUnsubscribe(entryOrDep) {\r\n    var unsubscribe = entryOrDep.unsubscribe;\r\n    if (typeof unsubscribe === \"function\") {\r\n        entryOrDep.unsubscribe = void 0;\r\n        unsubscribe();\r\n    }\r\n}\n\nvar emptySetPool = [];\r\nvar POOL_TARGET_SIZE = 100;\r\n// Since this package might be used browsers, we should avoid using the\r\n// Node built-in assert module.\r\nfunction assert(condition, optionalMessage) {\r\n    if (!condition) {\r\n        throw new Error(optionalMessage || \"assertion failure\");\r\n    }\r\n}\r\nfunction valueIs(a, b) {\r\n    var len = a.length;\r\n    return (\r\n    // Unknown values are not equal to each other.\r\n    len > 0 &&\r\n        // Both values must be ordinary (or both exceptional) to be equal.\r\n        len === b.length &&\r\n        // The underlying value or exception must be the same.\r\n        a[len - 1] === b[len - 1]);\r\n}\r\nfunction valueGet(value) {\r\n    switch (value.length) {\r\n        case 0: throw new Error(\"unknown value\");\r\n        case 1: return value[0];\r\n        case 2: throw value[1];\r\n    }\r\n}\r\nfunction valueCopy(value) {\r\n    return value.slice(0);\r\n}\r\nvar Entry = /** @class */ (function () {\r\n    function Entry(fn) {\r\n        this.fn = fn;\r\n        this.parents = new Set();\r\n        this.childValues = new Map();\r\n        // When this Entry has children that are dirty, this property becomes\r\n        // a Set containing other Entry objects, borrowed from emptySetPool.\r\n        // When the set becomes empty, it gets recycled back to emptySetPool.\r\n        this.dirtyChildren = null;\r\n        this.dirty = true;\r\n        this.recomputing = false;\r\n        this.value = [];\r\n        this.deps = null;\r\n        ++Entry.count;\r\n    }\r\n    Entry.prototype.peek = function () {\r\n        if (this.value.length === 1 && !mightBeDirty(this)) {\r\n            rememberParent(this);\r\n            return this.value[0];\r\n        }\r\n    };\r\n    // This is the most important method of the Entry API, because it\r\n    // determines whether the cached this.value can be returned immediately,\r\n    // or must be recomputed. The overall performance of the caching system\r\n    // depends on the truth of the following observations: (1) this.dirty is\r\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\r\n    // (3) valueGet(this.value) is usually returned without recomputation.\r\n    Entry.prototype.recompute = function (args) {\r\n        assert(!this.recomputing, \"already recomputing\");\r\n        rememberParent(this);\r\n        return mightBeDirty(this)\r\n            ? reallyRecompute(this, args)\r\n            : valueGet(this.value);\r\n    };\r\n    Entry.prototype.setDirty = function () {\r\n        if (this.dirty)\r\n            return;\r\n        this.dirty = true;\r\n        this.value.length = 0;\r\n        reportDirty(this);\r\n        // We can go ahead and unsubscribe here, since any further dirty\r\n        // notifications we receive will be redundant, and unsubscribing may\r\n        // free up some resources, e.g. file watchers.\r\n        maybeUnsubscribe(this);\r\n    };\r\n    Entry.prototype.dispose = function () {\r\n        var _this = this;\r\n        this.setDirty();\r\n        // Sever any dependency relationships with our own children, so those\r\n        // children don't retain this parent Entry in their child.parents sets,\r\n        // thereby preventing it from being fully garbage collected.\r\n        forgetChildren(this);\r\n        // Because this entry has been kicked out of the cache (in index.js),\r\n        // we've lost the ability to find out if/when this entry becomes dirty,\r\n        // whether that happens through a subscription, because of a direct call\r\n        // to entry.setDirty(), or because one of its children becomes dirty.\r\n        // Because of this loss of future information, we have to assume the\r\n        // worst (that this entry might have become dirty very soon), so we must\r\n        // immediately mark this entry's parents as dirty. Normally we could\r\n        // just call entry.setDirty() rather than calling parent.setDirty() for\r\n        // each parent, but that would leave this entry in parent.childValues\r\n        // and parent.dirtyChildren, which would prevent the child from being\r\n        // truly forgotten.\r\n        eachParent(this, function (parent, child) {\r\n            parent.setDirty();\r\n            forgetChild(parent, _this);\r\n        });\r\n    };\r\n    Entry.prototype.forget = function () {\r\n        // The code that creates Entry objects in index.ts will replace this method\r\n        // with one that actually removes the Entry from the cache, which will also\r\n        // trigger the entry.dispose method.\r\n        this.dispose();\r\n    };\r\n    Entry.prototype.dependOn = function (dep) {\r\n        dep.add(this);\r\n        if (!this.deps) {\r\n            this.deps = emptySetPool.pop() || new Set();\r\n        }\r\n        this.deps.add(dep);\r\n    };\r\n    Entry.prototype.forgetDeps = function () {\r\n        var _this = this;\r\n        if (this.deps) {\r\n            toArray(this.deps).forEach(function (dep) { return dep.delete(_this); });\r\n            this.deps.clear();\r\n            emptySetPool.push(this.deps);\r\n            this.deps = null;\r\n        }\r\n    };\r\n    Entry.count = 0;\r\n    return Entry;\r\n}());\r\nfunction rememberParent(child) {\r\n    var parent = parentEntrySlot.getValue();\r\n    if (parent) {\r\n        child.parents.add(parent);\r\n        if (!parent.childValues.has(child)) {\r\n            parent.childValues.set(child, []);\r\n        }\r\n        if (mightBeDirty(child)) {\r\n            reportDirtyChild(parent, child);\r\n        }\r\n        else {\r\n            reportCleanChild(parent, child);\r\n        }\r\n        return parent;\r\n    }\r\n}\r\nfunction reallyRecompute(entry, args) {\r\n    forgetChildren(entry);\r\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\r\n    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\r\n    if (maybeSubscribe(entry, args)) {\r\n        // If we successfully recomputed entry.value and did not fail to\r\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\r\n        setClean(entry);\r\n    }\r\n    return valueGet(entry.value);\r\n}\r\nfunction recomputeNewValue(entry, args) {\r\n    entry.recomputing = true;\r\n    // Set entry.value as unknown.\r\n    entry.value.length = 0;\r\n    try {\r\n        // If entry.fn succeeds, entry.value will become a normal Value.\r\n        entry.value[0] = entry.fn.apply(null, args);\r\n    }\r\n    catch (e) {\r\n        // If entry.fn throws, entry.value will become exceptional.\r\n        entry.value[1] = e;\r\n    }\r\n    // Either way, this line is always reached.\r\n    entry.recomputing = false;\r\n}\r\nfunction mightBeDirty(entry) {\r\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\r\n}\r\nfunction setClean(entry) {\r\n    entry.dirty = false;\r\n    if (mightBeDirty(entry)) {\r\n        // This Entry may still have dirty children, in which case we can't\r\n        // let our parents know we're clean just yet.\r\n        return;\r\n    }\r\n    reportClean(entry);\r\n}\r\nfunction reportDirty(child) {\r\n    eachParent(child, reportDirtyChild);\r\n}\r\nfunction reportClean(child) {\r\n    eachParent(child, reportCleanChild);\r\n}\r\nfunction eachParent(child, callback) {\r\n    var parentCount = child.parents.size;\r\n    if (parentCount) {\r\n        var parents = toArray(child.parents);\r\n        for (var i = 0; i < parentCount; ++i) {\r\n            callback(parents[i], child);\r\n        }\r\n    }\r\n}\r\n// Let a parent Entry know that one of its children may be dirty.\r\nfunction reportDirtyChild(parent, child) {\r\n    // Must have called rememberParent(child) before calling\r\n    // reportDirtyChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(mightBeDirty(child));\r\n    var parentWasClean = !mightBeDirty(parent);\r\n    if (!parent.dirtyChildren) {\r\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\r\n    }\r\n    else if (parent.dirtyChildren.has(child)) {\r\n        // If we already know this child is dirty, then we must have already\r\n        // informed our own parents that we are dirty, so we can terminate\r\n        // the recursion early.\r\n        return;\r\n    }\r\n    parent.dirtyChildren.add(child);\r\n    // If parent was clean before, it just became (possibly) dirty (according to\r\n    // mightBeDirty), since we just added child to parent.dirtyChildren.\r\n    if (parentWasClean) {\r\n        reportDirty(parent);\r\n    }\r\n}\r\n// Let a parent Entry know that one of its children is no longer dirty.\r\nfunction reportCleanChild(parent, child) {\r\n    // Must have called rememberChild(child) before calling\r\n    // reportCleanChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(!mightBeDirty(child));\r\n    var childValue = parent.childValues.get(child);\r\n    if (childValue.length === 0) {\r\n        parent.childValues.set(child, valueCopy(child.value));\r\n    }\r\n    else if (!valueIs(childValue, child.value)) {\r\n        parent.setDirty();\r\n    }\r\n    removeDirtyChild(parent, child);\r\n    if (mightBeDirty(parent)) {\r\n        return;\r\n    }\r\n    reportClean(parent);\r\n}\r\nfunction removeDirtyChild(parent, child) {\r\n    var dc = parent.dirtyChildren;\r\n    if (dc) {\r\n        dc.delete(child);\r\n        if (dc.size === 0) {\r\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\r\n                emptySetPool.push(dc);\r\n            }\r\n            parent.dirtyChildren = null;\r\n        }\r\n    }\r\n}\r\n// Removes all children from this entry and returns an array of the\r\n// removed children.\r\nfunction forgetChildren(parent) {\r\n    if (parent.childValues.size > 0) {\r\n        parent.childValues.forEach(function (_value, child) {\r\n            forgetChild(parent, child);\r\n        });\r\n    }\r\n    // Remove this parent Entry from any sets to which it was added by the\r\n    // addToSet method.\r\n    parent.forgetDeps();\r\n    // After we forget all our children, this.dirtyChildren must be empty\r\n    // and therefore must have been reset to null.\r\n    assert(parent.dirtyChildren === null);\r\n}\r\nfunction forgetChild(parent, child) {\r\n    child.parents.delete(parent);\r\n    parent.childValues.delete(child);\r\n    removeDirtyChild(parent, child);\r\n}\r\nfunction maybeSubscribe(entry, args) {\r\n    if (typeof entry.subscribe === \"function\") {\r\n        try {\r\n            maybeUnsubscribe(entry); // Prevent double subscriptions.\r\n            entry.unsubscribe = entry.subscribe.apply(null, args);\r\n        }\r\n        catch (e) {\r\n            // If this Entry has a subscribe function and it threw an exception\r\n            // (or an unsubscribe function it previously returned now throws),\r\n            // return false to indicate that we were not able to subscribe (or\r\n            // unsubscribe), and this Entry should remain dirty.\r\n            entry.setDirty();\r\n            return false;\r\n        }\r\n    }\r\n    // Returning true indicates either that there was no entry.subscribe\r\n    // function or that it succeeded.\r\n    return true;\r\n}\n\nvar EntryMethods = {\r\n    setDirty: true,\r\n    dispose: true,\r\n    forget: true, // Fully remove parent Entry from LRU cache and computation graph\r\n};\r\nfunction dep(options) {\r\n    var depsByKey = new Map();\r\n    var subscribe = options && options.subscribe;\r\n    function depend(key) {\r\n        var parent = parentEntrySlot.getValue();\r\n        if (parent) {\r\n            var dep_1 = depsByKey.get(key);\r\n            if (!dep_1) {\r\n                depsByKey.set(key, dep_1 = new Set);\r\n            }\r\n            parent.dependOn(dep_1);\r\n            if (typeof subscribe === \"function\") {\r\n                maybeUnsubscribe(dep_1);\r\n                dep_1.unsubscribe = subscribe(key);\r\n            }\r\n        }\r\n    }\r\n    depend.dirty = function dirty(key, entryMethodName) {\r\n        var dep = depsByKey.get(key);\r\n        if (dep) {\r\n            var m_1 = (entryMethodName &&\r\n                hasOwnProperty.call(EntryMethods, entryMethodName)) ? entryMethodName : \"setDirty\";\r\n            // We have to use toArray(dep).forEach instead of dep.forEach, because\r\n            // modifying a Set while iterating over it can cause elements in the Set\r\n            // to be removed from the Set before they've been iterated over.\r\n            toArray(dep).forEach(function (entry) { return entry[m_1](); });\r\n            depsByKey.delete(key);\r\n            maybeUnsubscribe(dep);\r\n        }\r\n    };\r\n    return depend;\r\n}\n\nfunction makeDefaultMakeCacheKeyFunction() {\r\n    var keyTrie = new Trie(typeof WeakMap === \"function\");\r\n    return function () {\r\n        return keyTrie.lookupArray(arguments);\r\n    };\r\n}\r\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\r\n// a unique object for any shallow-identical list of arguments. If you need\r\n// to implement a custom makeCacheKey function, you may find it helpful to\r\n// delegate the final work to defaultMakeCacheKey, which is why we export it\r\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\r\n// does not support WeakMap, or you have the ability to return a string key.\r\n// In those cases, just write your own custom makeCacheKey functions.\r\nvar defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\r\nvar caches = new Set();\r\nfunction wrap(originalFunction, options) {\r\n    if (options === void 0) { options = Object.create(null); }\r\n    var cache = new Cache(options.max || Math.pow(2, 16), function (entry) { return entry.dispose(); });\r\n    var keyArgs = options.keyArgs;\r\n    var makeCacheKey = options.makeCacheKey ||\r\n        makeDefaultMakeCacheKeyFunction();\r\n    var optimistic = function () {\r\n        var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\r\n        if (key === void 0) {\r\n            return originalFunction.apply(null, arguments);\r\n        }\r\n        var entry = cache.get(key);\r\n        if (!entry) {\r\n            cache.set(key, entry = new Entry(originalFunction));\r\n            entry.subscribe = options.subscribe;\r\n            // Give the Entry the ability to trigger cache.delete(key), even though\r\n            // the Entry itself does not know about key or cache.\r\n            entry.forget = function () { return cache.delete(key); };\r\n        }\r\n        var value = entry.recompute(Array.prototype.slice.call(arguments));\r\n        // Move this entry to the front of the least-recently used queue,\r\n        // since we just finished computing its value.\r\n        cache.set(key, entry);\r\n        caches.add(cache);\r\n        // Clean up any excess entries in the cache, but only if there is no\r\n        // active parent entry, meaning we're not in the middle of a larger\r\n        // computation that might be flummoxed by the cleaning.\r\n        if (!parentEntrySlot.hasValue()) {\r\n            caches.forEach(function (cache) { return cache.clean(); });\r\n            caches.clear();\r\n        }\r\n        return value;\r\n    };\r\n    Object.defineProperty(optimistic, \"size\", {\r\n        get: function () {\r\n            return cache[\"map\"].size;\r\n        },\r\n        configurable: false,\r\n        enumerable: false,\r\n    });\r\n    function dirtyKey(key) {\r\n        var entry = cache.get(key);\r\n        if (entry) {\r\n            entry.setDirty();\r\n        }\r\n    }\r\n    optimistic.dirtyKey = dirtyKey;\r\n    optimistic.dirty = function dirty() {\r\n        dirtyKey(makeCacheKey.apply(null, arguments));\r\n    };\r\n    function peekKey(key) {\r\n        var entry = cache.get(key);\r\n        if (entry) {\r\n            return entry.peek();\r\n        }\r\n    }\r\n    optimistic.peekKey = peekKey;\r\n    optimistic.peek = function peek() {\r\n        return peekKey(makeCacheKey.apply(null, arguments));\r\n    };\r\n    function forgetKey(key) {\r\n        return cache.delete(key);\r\n    }\r\n    optimistic.forgetKey = forgetKey;\r\n    optimistic.forget = function forget() {\r\n        return forgetKey(makeCacheKey.apply(null, arguments));\r\n    };\r\n    optimistic.makeCacheKey = makeCacheKey;\r\n    optimistic.getKey = keyArgs ? function getKey() {\r\n        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\r\n    } : makeCacheKey;\r\n    return Object.freeze(optimistic);\r\n}\n\nexport { defaultMakeCacheKey, dep, wrap };\n//# sourceMappingURL=bundle.esm.js.map\n","// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\r\n// object keys weakly, yet can also hold non-object keys, unlike the\r\n// native `WeakMap`.\r\n// If no makeData function is supplied, the looked-up data will be an empty,\r\n// null-prototype Object.\r\nvar defaultMakeData = function () { return Object.create(null); };\r\n// Useful for processing arguments objects as well as arrays.\r\nvar _a = Array.prototype, forEach = _a.forEach, slice = _a.slice;\r\nvar Trie = /** @class */ (function () {\r\n    function Trie(weakness, makeData) {\r\n        if (weakness === void 0) { weakness = true; }\r\n        if (makeData === void 0) { makeData = defaultMakeData; }\r\n        this.weakness = weakness;\r\n        this.makeData = makeData;\r\n    }\r\n    Trie.prototype.lookup = function () {\r\n        var array = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            array[_i] = arguments[_i];\r\n        }\r\n        return this.lookupArray(array);\r\n    };\r\n    Trie.prototype.lookupArray = function (array) {\r\n        var node = this;\r\n        forEach.call(array, function (key) { return node = node.getChildTrie(key); });\r\n        return node.data || (node.data = this.makeData(slice.call(array)));\r\n    };\r\n    Trie.prototype.getChildTrie = function (key) {\r\n        var map = this.weakness && isObjRef(key)\r\n            ? this.weak || (this.weak = new WeakMap())\r\n            : this.strong || (this.strong = new Map());\r\n        var child = map.get(key);\r\n        if (!child)\r\n            map.set(key, child = new Trie(this.weakness, this.makeData));\r\n        return child;\r\n    };\r\n    return Trie;\r\n}());\r\nfunction isObjRef(value) {\r\n    switch (typeof value) {\r\n        case \"object\":\r\n            if (value === null)\r\n                break;\r\n        // Fall through to return true...\r\n        case \"function\":\r\n            return true;\r\n    }\r\n    return false;\r\n}\n\nexport { Trie };\n//# sourceMappingURL=trie.esm.js.map\n","import * as React from 'react';\n\nconst LEFT = \"Left\";\nconst RIGHT = \"Right\";\nconst UP = \"Up\";\nconst DOWN = \"Down\";\n\n/* global document */\nconst defaultProps = {\n    delta: 10,\n    preventScrollOnSwipe: false,\n    rotationAngle: 0,\n    trackMouse: false,\n    trackTouch: true,\n    swipeDuration: Infinity,\n    touchEventOptions: { passive: true },\n};\nconst initialState = {\n    first: true,\n    initial: [0, 0],\n    start: 0,\n    swiping: false,\n    xy: [0, 0],\n};\nconst mouseMove = \"mousemove\";\nconst mouseUp = \"mouseup\";\nconst touchEnd = \"touchend\";\nconst touchMove = \"touchmove\";\nconst touchStart = \"touchstart\";\nfunction getDirection(absX, absY, deltaX, deltaY) {\n    if (absX > absY) {\n        if (deltaX > 0) {\n            return RIGHT;\n        }\n        return LEFT;\n    }\n    else if (deltaY > 0) {\n        return DOWN;\n    }\n    return UP;\n}\nfunction rotateXYByAngle(pos, angle) {\n    if (angle === 0)\n        return pos;\n    const angleInRadians = (Math.PI / 180) * angle;\n    const x = pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);\n    const y = pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);\n    return [x, y];\n}\nfunction getHandlers(set, handlerProps) {\n    const onStart = (event) => {\n        const isTouch = \"touches\" in event;\n        // if more than a single touch don't track, for now...\n        if (isTouch && event.touches.length > 1)\n            return;\n        set((state, props) => {\n            // setup mouse listeners on document to track swipe since swipe can leave container\n            if (props.trackMouse && !isTouch) {\n                document.addEventListener(mouseMove, onMove);\n                document.addEventListener(mouseUp, onUp);\n            }\n            const { clientX, clientY } = isTouch ? event.touches[0] : event;\n            const xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n            props.onTouchStartOrOnMouseDown &&\n                props.onTouchStartOrOnMouseDown({ event });\n            return Object.assign(Object.assign(Object.assign({}, state), initialState), { initial: xy.slice(), xy, start: event.timeStamp || 0 });\n        });\n    };\n    const onMove = (event) => {\n        set((state, props) => {\n            const isTouch = \"touches\" in event;\n            // Discount a swipe if additional touches are present after\n            // a swipe has started.\n            if (isTouch && event.touches.length > 1) {\n                return state;\n            }\n            // if swipe has exceeded duration stop tracking\n            if (event.timeStamp - state.start > props.swipeDuration) {\n                return state.swiping ? Object.assign(Object.assign({}, state), { swiping: false }) : state;\n            }\n            const { clientX, clientY } = isTouch ? event.touches[0] : event;\n            const [x, y] = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n            const deltaX = x - state.xy[0];\n            const deltaY = y - state.xy[1];\n            const absX = Math.abs(deltaX);\n            const absY = Math.abs(deltaY);\n            const time = (event.timeStamp || 0) - state.start;\n            const velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);\n            const vxvy = [deltaX / (time || 1), deltaY / (time || 1)];\n            const dir = getDirection(absX, absY, deltaX, deltaY);\n            // if swipe is under delta and we have not started to track a swipe: skip update\n            const delta = typeof props.delta === \"number\"\n                ? props.delta\n                : props.delta[dir.toLowerCase()] ||\n                    defaultProps.delta;\n            if (absX < delta && absY < delta && !state.swiping)\n                return state;\n            const eventData = {\n                absX,\n                absY,\n                deltaX,\n                deltaY,\n                dir,\n                event,\n                first: state.first,\n                initial: state.initial,\n                velocity,\n                vxvy,\n            };\n            // call onSwipeStart if present and is first swipe event\n            eventData.first && props.onSwipeStart && props.onSwipeStart(eventData);\n            // call onSwiping if present\n            props.onSwiping && props.onSwiping(eventData);\n            // track if a swipe is cancelable (handler for swiping or swiped(dir) exists)\n            // so we can call preventDefault if needed\n            let cancelablePageSwipe = false;\n            if (props.onSwiping ||\n                props.onSwiped ||\n                props[`onSwiped${dir}`]) {\n                cancelablePageSwipe = true;\n            }\n            if (cancelablePageSwipe &&\n                props.preventScrollOnSwipe &&\n                props.trackTouch &&\n                event.cancelable) {\n                event.preventDefault();\n            }\n            return Object.assign(Object.assign({}, state), { \n                // first is now always false\n                first: false, eventData, swiping: true });\n        });\n    };\n    const onEnd = (event) => {\n        set((state, props) => {\n            let eventData;\n            if (state.swiping && state.eventData) {\n                // if swipe is less than duration fire swiped callbacks\n                if (event.timeStamp - state.start < props.swipeDuration) {\n                    eventData = Object.assign(Object.assign({}, state.eventData), { event });\n                    props.onSwiped && props.onSwiped(eventData);\n                    const onSwipedDir = props[`onSwiped${eventData.dir}`];\n                    onSwipedDir && onSwipedDir(eventData);\n                }\n            }\n            else {\n                props.onTap && props.onTap({ event });\n            }\n            props.onTouchEndOrOnMouseUp && props.onTouchEndOrOnMouseUp({ event });\n            return Object.assign(Object.assign(Object.assign({}, state), initialState), { eventData });\n        });\n    };\n    const cleanUpMouse = () => {\n        // safe to just call removeEventListener\n        document.removeEventListener(mouseMove, onMove);\n        document.removeEventListener(mouseUp, onUp);\n    };\n    const onUp = (e) => {\n        cleanUpMouse();\n        onEnd(e);\n    };\n    /**\n     * The value of passive on touchMove depends on `preventScrollOnSwipe`:\n     * - true => { passive: false }\n     * - false => { passive: true } // Default\n     *\n     * NOTE: When preventScrollOnSwipe is true, we attempt to call preventDefault to prevent scroll.\n     *\n     * props.touchEventOptions can also be set for all touch event listeners,\n     * but for `touchmove` specifically when `preventScrollOnSwipe` it will\n     * supersede and force passive to false.\n     *\n     */\n    const attachTouch = (el, props) => {\n        let cleanup = () => { };\n        if (el && el.addEventListener) {\n            const baseOptions = Object.assign(Object.assign({}, defaultProps.touchEventOptions), props.touchEventOptions);\n            // attach touch event listeners and handlers\n            const tls = [\n                [touchStart, onStart, baseOptions],\n                // preventScrollOnSwipe option supersedes touchEventOptions.passive\n                [\n                    touchMove,\n                    onMove,\n                    Object.assign(Object.assign({}, baseOptions), (props.preventScrollOnSwipe ? { passive: false } : {})),\n                ],\n                [touchEnd, onEnd, baseOptions],\n            ];\n            tls.forEach(([e, h, o]) => el.addEventListener(e, h, o));\n            // return properly scoped cleanup method for removing listeners, options not required\n            cleanup = () => tls.forEach(([e, h]) => el.removeEventListener(e, h));\n        }\n        return cleanup;\n    };\n    const onRef = (el) => {\n        // \"inline\" ref functions are called twice on render, once with null then again with DOM element\n        // ignore null here\n        if (el === null)\n            return;\n        set((state, props) => {\n            // if the same DOM el as previous just return state\n            if (state.el === el)\n                return state;\n            const addState = {};\n            // if new DOM el clean up old DOM and reset cleanUpTouch\n            if (state.el && state.el !== el && state.cleanUpTouch) {\n                state.cleanUpTouch();\n                addState.cleanUpTouch = void 0;\n            }\n            // only attach if we want to track touch\n            if (props.trackTouch && el) {\n                addState.cleanUpTouch = attachTouch(el, props);\n            }\n            // store event attached DOM el for comparison, clean up, and re-attachment\n            return Object.assign(Object.assign(Object.assign({}, state), { el }), addState);\n        });\n    };\n    // set ref callback to attach touch event listeners\n    const output = {\n        ref: onRef,\n    };\n    // if track mouse attach mouse down listener\n    if (handlerProps.trackMouse) {\n        output.onMouseDown = onStart;\n    }\n    return [output, attachTouch];\n}\nfunction updateTransientState(state, props, previousProps, attachTouch) {\n    // if trackTouch is off or there is no el, then remove handlers if necessary and exit\n    if (!props.trackTouch || !state.el) {\n        if (state.cleanUpTouch) {\n            state.cleanUpTouch();\n        }\n        return Object.assign(Object.assign({}, state), { cleanUpTouch: undefined });\n    }\n    // trackTouch is on, so if there are no handlers attached, attach them and exit\n    if (!state.cleanUpTouch) {\n        return Object.assign(Object.assign({}, state), { cleanUpTouch: attachTouch(state.el, props) });\n    }\n    // trackTouch is on and handlers are already attached, so if preventScrollOnSwipe changes value,\n    // remove and reattach handlers (this is required to update the passive option when attaching\n    // the handlers)\n    if (props.preventScrollOnSwipe !== previousProps.preventScrollOnSwipe ||\n        props.touchEventOptions.passive !== previousProps.touchEventOptions.passive) {\n        state.cleanUpTouch();\n        return Object.assign(Object.assign({}, state), { cleanUpTouch: attachTouch(state.el, props) });\n    }\n    return state;\n}\nfunction useSwipeable(options) {\n    const { trackMouse } = options;\n    const transientState = React.useRef(Object.assign({}, initialState));\n    const transientProps = React.useRef(Object.assign({}, defaultProps));\n    // track previous rendered props\n    const previousProps = React.useRef(Object.assign({}, transientProps.current));\n    previousProps.current = Object.assign({}, transientProps.current);\n    // update current render props & defaults\n    transientProps.current = Object.assign(Object.assign({}, defaultProps), options);\n    // Force defaults for config properties\n    let defaultKey;\n    for (defaultKey in defaultProps) {\n        if (transientProps.current[defaultKey] === void 0) {\n            transientProps.current[defaultKey] = defaultProps[defaultKey];\n        }\n    }\n    const [handlers, attachTouch] = React.useMemo(() => getHandlers((stateSetter) => (transientState.current = stateSetter(transientState.current, transientProps.current)), { trackMouse }), [trackMouse]);\n    transientState.current = updateTransientState(transientState.current, transientProps.current, previousProps.current, attachTouch);\n    return handlers;\n}\n\nexport { DOWN, LEFT, RIGHT, UP, useSwipeable };\n//# sourceMappingURL=index.js.map\n","export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n","import { useCallback, useRef, useState } from 'react';\nimport useUnmount from './useUnmount';\nvar useRafState = function (initialState) {\n    var frame = useRef(0);\n    var _a = useState(initialState), state = _a[0], setState = _a[1];\n    var setRafState = useCallback(function (value) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(function () {\n            setState(value);\n        });\n    }, []);\n    useUnmount(function () {\n        cancelAnimationFrame(frame.current);\n    });\n    return [state, setRafState];\n};\nexport default useRafState;\n","import { useRef } from 'react';\nimport useEffectOnce from './useEffectOnce';\nvar useUnmount = function (fn) {\n    var fnRef = useRef(fn);\n    // update the ref each render so if it change the newest callback will be invoked\n    fnRef.current = fn;\n    useEffectOnce(function () { return function () { return fnRef.current(); }; });\n};\nexport default useUnmount;\n","import { useEffect } from 'react';\nimport useRafState from './useRafState';\nimport { isBrowser, off, on } from './misc/util';\nvar useWindowSize = function (initialWidth, initialHeight) {\n    if (initialWidth === void 0) { initialWidth = Infinity; }\n    if (initialHeight === void 0) { initialHeight = Infinity; }\n    var _a = useRafState({\n        width: isBrowser ? window.innerWidth : initialWidth,\n        height: isBrowser ? window.innerHeight : initialHeight,\n    }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        if (isBrowser) {\n            var handler_1 = function () {\n                setState({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            };\n            on(window, 'resize', handler_1);\n            return function () {\n                off(window, 'resize', handler_1);\n            };\n        }\n    }, []);\n    return state;\n};\nexport default useWindowSize;\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","import { __assign, __rest } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { getFragmentQueryDocument, } from \"../../utilities/index.js\";\nvar ApolloCache = (function () {\n    function ApolloCache() {\n        this.getFragmentDoc = wrap(getFragmentQueryDocument);\n    }\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic :\n            options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function () { return updateResult = options.update(_this); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || 'ROOT_QUERY', optimistic: optimistic }));\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || 'ROOT_QUERY',\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n//# sourceMappingURL=cache.js.map","import { __extends } from \"tslib\";\nvar MissingFieldError = (function (_super) {\n    __extends(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for (var i = _this.path.length - 1; i >= 0; --i) {\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        }\n        else {\n            _this.missing = _this.path;\n        }\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error));\nexport { MissingFieldError };\n//# sourceMappingURL=common.js.map","import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar INVALIDATE = Object.create(null);\nvar EntityStore = (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)\n            ? _this.get(objectOrReference.__ref, storeFieldName)\n            : objectOrReference && objectOrReference[storeFieldName]); };\n        this.canRead = function (objOrRef) {\n            return isReference(objOrRef)\n                ? _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return makeReference(objOrIdOrRef);\n            }\n            if (isReference(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        if (hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function (older, newer) {\n        var _this = this;\n        var dataId;\n        if (isReference(older))\n            older = older.__ref;\n        if (isReference(newer))\n            newer = newer.__ref;\n        var existing = typeof older === \"string\"\n            ? this.lookup(dataId = older)\n            : older;\n        var incoming = typeof newer === \"string\"\n            ? this.lookup(dataId = newer)\n            : newer;\n        if (!incoming)\n            return;\n        __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        var fieldName = fieldNameFromStoreName(storeFieldName);\n                        if (fieldName !== storeFieldName &&\n                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename &&\n                    !(existing && existing.__typename) &&\n                    this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                    fieldName: fieldNameOrOptions,\n                    from: from || makeReference(dataId),\n                } : fieldNameOrOptions, { store: _this }); },\n            };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\"\n                    ? fields\n                    : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE :\n                        modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    }\n                    else {\n                        if (newValue === DELETE)\n                            newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args\n                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function () {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function (id) {\n            if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = { extraRootIds: extraRootIds.sort() };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = __rest(newData, [\"__META\"]);\n            Object.keys(rest_1).forEach(function (dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        else {\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root)\n                return found_1;\n            var workSet_1 = new Set([root]);\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                if (isNonNullObject(obj)) {\n                    Object.keys(obj).forEach(function (key) {\n                        var child = obj[key];\n                        if (isNonNullObject(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\nvar CacheGroup = (function () {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) { parent = null; }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function () {\n        this.d = this.caching ? dep() : null;\n        this.keyMaker = new Trie(canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    return storeFieldName + '#' + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function (EntityStore) {\n    var Root = (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new Trie(canUseWeakMap);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function () {\n            return this;\n        };\n        Root.prototype.getStorage = function () {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        _this.delete(dataId);\n                    }\n                    else if (!ownStoreObject) {\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    }\n                    else if (ownStoreObject !== parentStoreObject) {\n                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n                            if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function () {\n        var p = this.parent;\n        while (p.parent)\n            p = p.parent;\n        return p.getStorage.apply(p, arguments);\n    };\n    return Layer;\n}(EntityStore));\nvar Stump = (function (_super) {\n    __extends(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function () {\n        return this;\n    };\n    Stump.prototype.merge = function () {\n        return this.parent.merge.apply(this.parent, arguments);\n    };\n    return Stump;\n}(Layer));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n    return !!(store instanceof EntityStore && store.group.caching);\n}\n//# sourceMappingURL=entityStore.js.map","import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude, isNonNullObject, compact, createFragmentMap, getFragmentDefinitions, isArray, } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function isNullish(value) {\n    return value === null || value === void 0;\n}\nexport { isArray };\nexport function defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject =\n                !isNullish(id) ? { id: id } :\n                    !isNullish(_id) ? { _id: _id } :\n                        void 0;\n        }\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat((typeof id === \"number\" ||\n                typeof id === \"string\") ? id : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    canonizeResults: false,\n};\nexport function normalizeConfig(config) {\n    return compact(defaultConfig, config);\n}\nexport function shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n    return isReference(objectOrReference)\n        ? store.get(objectOrReference.__ref, \"__typename\")\n        : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n    if (isNonNullObject(result)) {\n        return isArray(result)\n            ? result.every(function (item) { return selectionSetMatchesResult(selectionSet, item, variables); })\n            : selectionSet.selections.every(function (field) {\n                if (isField(field) && shouldInclude(field, variables)) {\n                    var key = resultKeyNameFromField(field);\n                    return hasOwn.call(result, key) &&\n                        (!field.selectionSet ||\n                            selectionSetMatchesResult(field.selectionSet, result[key], variables));\n                }\n                return true;\n            });\n    }\n    return false;\n}\nexport function storeValueIsStoreObject(value) {\n    return isNonNullObject(value) &&\n        !isReference(value) &&\n        !isArray(value);\n}\nexport function makeProcessedFieldsMerger() {\n    return new DeepMerger;\n}\nexport function extractFragmentContext(document, fragments) {\n    var fragmentMap = createFragmentMap(getFragmentDefinitions(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function (name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        },\n    };\n}\n//# sourceMappingURL=helpers.js.map","import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport \"./fixPolyfills.js\";\nimport { wrap } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference, } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nvar InMemoryCache = (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.typenameDocumentCache = new Map();\n        _this.makeVar = makeVar;\n        _this.txCount = 0;\n        _this.config = normalizeConfig(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies,\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function () {\n        var rootStore = this.data = new EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching,\n        });\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: shouldCanonizeResults(this.config),\n            canon: resetResultIdentities\n                ? void 0\n                : previousReader && previousReader.canon,\n            fragments: fragments,\n        }), fragments);\n        this.maybeBroadcastWatch = wrap(function (c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize,\n            makeCacheKey: function (c) {\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if (supportsResultCaching(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query, c.callback, canonicalStringify({ optimistic: optimistic, id: id, variables: variables }));\n                }\n            }\n        });\n        new Set([\n            this.data.group,\n            this.optimisticData.group,\n        ]).forEach(function (group) { return group.resetCaching(); });\n    };\n    InMemoryCache.prototype.restore = function (data) {\n        this.init();\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        var _a = options.returnPartialData, returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, config: this.config, returnPartialData: returnPartialData })).result || null;\n        }\n        catch (e) {\n            if (e instanceof MissingFieldError) {\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function (options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function (options) {\n        if (hasOwn.call(options, \"id\") && !options.id) {\n            return false;\n        }\n        var store = options.optimistic\n            ? this.optimisticData\n            : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function (options) {\n        return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, rootId: options.id || \"ROOT_QUERY\", config: this.config }));\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            recallCache(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function () {\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                forgetCache(_this);\n            }\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function (options) {\n        canonicalStringify.reset();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            }\n            else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    InMemoryCache.prototype.retain = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    InMemoryCache.prototype.release = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    InMemoryCache.prototype.identify = function (object) {\n        if (isReference(object))\n            return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        }\n        catch (e) {\n            __DEV__ && invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function (options) {\n        if (!options.id) {\n            if (hasOwn.call(options, \"id\")) {\n                return false;\n            }\n            options = __assign(__assign({}, options), { id: \"ROOT_QUERY\" });\n        }\n        try {\n            ++this.txCount;\n            return this.optimisticData.evict(options, this.data);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function (options) {\n        var _this = this;\n        this.init();\n        canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            this.watches.forEach(function (watch) { return _this.maybeBroadcastWatch.forget(watch); });\n            this.watches.clear();\n            forgetCache(this);\n        }\n        else {\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function (options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function (layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(_this);\n            }\n            finally {\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                } }));\n        }\n        if (typeof optimistic === 'string') {\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        }\n        else if (optimistic === false) {\n            perform(this.data);\n        }\n        else {\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                } }));\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function (watch) { return _this.maybeBroadcastWatch.dirty(watch); });\n            }\n        }\n        else {\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || (optimisticId !== null),\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        if (this.addTypename) {\n            var result = this.typenameDocumentCache.get(document);\n            if (!result) {\n                result = addTypenameToDocument(document);\n                this.typenameDocumentCache.set(document, result);\n                this.typenameDocumentCache.set(result, result);\n            }\n            return result;\n        }\n        return document;\n    };\n    InMemoryCache.prototype.transformForLink = function (document) {\n        var fragments = this.config.fragments;\n        return fragments\n            ? fragments.transform(document)\n            : document;\n    };\n    InMemoryCache.prototype.broadcastWatches = function (options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c, options); });\n        }\n    };\n    InMemoryCache.prototype.broadcastWatch = function (c, options) {\n        var lastDiff = c.lastDiff;\n        var diff = this.diff(c);\n        if (options) {\n            if (c.optimistic &&\n                typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated &&\n                options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                return;\n            }\n        }\n        if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(ApolloCache));\nexport { InMemoryCache };\n//# sourceMappingURL=inMemoryCache.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    var cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] ||\n        (specifierInfoCache[cacheKey] = Object.create(null));\n}\nexport function keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n        var extract = function (from, key) { return context.readField(key, from); };\n        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n            if (extracted === void 0 &&\n                object !== context.storeObject &&\n                hasOwn.call(object, schemaKeyPath[0])) {\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            __DEV__ ? invariant(extracted !== void 0, \"Missing field '\".concat(schemaKeyPath.join('.'), \"' while extracting keyFields from \").concat(JSON.stringify(object))) : invariant(extracted !== void 0, 2);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n        var collected = collectSpecifierPaths(specifier, function (keyPath) {\n            var firstKey = keyPath[0];\n            var firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && isNonEmptyArray(field.directives)) {\n                    var directiveName_1 = firstKey.slice(1);\n                    var d = field.directives.find(function (d) { return d.name.value === directiveName_1; });\n                    var directiveArgs = d && argumentsObjectFromField(d, variables);\n                    return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));\n                }\n                return;\n            }\n            if (firstChar === \"$\") {\n                var variableName = firstKey.slice(1);\n                if (variables && hasOwn.call(variables, variableName)) {\n                    var varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        var suffix = JSON.stringify(collected);\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n    var merger = new DeepMerger;\n    return getSpecifierPaths(specifier).reduce(function (collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            for (var i = path.length - 1; i >= 0; --i) {\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = info.paths = [];\n        var currentPath_1 = [];\n        spec.forEach(function (s, i) {\n            if (isArray(s)) {\n                getSpecifierPaths(s).forEach(function (p) { return paths_1.push(currentPath_1.concat(p)); });\n                currentPath_1.length = 0;\n            }\n            else {\n                currentPath_1.push(s);\n                if (!isArray(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nexport function extractKeyPath(object, path, extract) {\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return isArray(obj)\n            ? obj.map(function (child) { return reducer(child, key); })\n            : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    if (isNonNullObject(value)) {\n        if (isArray(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function (path) { return extractKeyPath(value, path); });\n    }\n    return value;\n}\n//# sourceMappingURL=key-extractor.js.map","import { __assign } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet, isNonNullObject as isObjectOrArray, } from \"../../utilities/index.js\";\nimport { isArray } from \"./helpers.js\";\nfunction shallowCopy(value) {\n    if (isObjectOrArray(value)) {\n        return isArray(value)\n            ? value.slice(0)\n            : __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n    }\n    return value;\n}\nvar ObjectCanon = (function () {\n    function ObjectCanon() {\n        this.known = new (canUseWeakSet ? WeakSet : Set)();\n        this.pool = new Trie(canUseWeakMap);\n        this.passes = new WeakMap();\n        this.keysByJSON = new Map();\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function (value) {\n        return isObjectOrArray(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function (value) {\n        if (isObjectOrArray(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function (value) {\n        var _this = this;\n        if (isObjectOrArray(value)) {\n            var original = this.passes.get(value);\n            if (original)\n                return original;\n            var proto = Object.getPrototypeOf(value);\n            switch (proto) {\n                case Array.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var array = value.map(this.admit, this);\n                    var node = this.pool.lookupArray(array);\n                    if (!node.array) {\n                        this.known.add(node.array = array);\n                        if (__DEV__) {\n                            Object.freeze(array);\n                        }\n                    }\n                    return node.array;\n                }\n                case null:\n                case Object.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var proto_1 = Object.getPrototypeOf(value);\n                    var array_1 = [proto_1];\n                    var keys = this.sortedKeys(value);\n                    array_1.push(keys.json);\n                    var firstValueIndex_1 = array_1.length;\n                    keys.sorted.forEach(function (key) {\n                        array_1.push(_this.admit(value[key]));\n                    });\n                    var node = this.pool.lookupArray(array_1);\n                    if (!node.object) {\n                        var obj_1 = node.object = Object.create(proto_1);\n                        this.known.add(obj_1);\n                        keys.sorted.forEach(function (key, i) {\n                            obj_1[key] = array_1[firstValueIndex_1 + i];\n                        });\n                        if (__DEV__) {\n                            Object.freeze(obj_1);\n                        }\n                    }\n                    return node.object;\n                }\n            }\n        }\n        return value;\n    };\n    ObjectCanon.prototype.sortedKeys = function (obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, node.keys = { sorted: keys, json: json });\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}());\nexport { ObjectCanon };\nexport var canonicalStringify = Object.assign(function (value) {\n    if (isObjectOrArray(value)) {\n        if (stringifyCanon === void 0) {\n            resetCanonicalStringify();\n        }\n        var canonical = stringifyCanon.admit(value);\n        var json = stringifyCache.get(canonical);\n        if (json === void 0) {\n            stringifyCache.set(canonical, json = JSON.stringify(canonical));\n        }\n        return json;\n    }\n    return JSON.stringify(value);\n}, {\n    reset: resetCanonicalStringify,\n});\nvar stringifyCanon;\nvar stringifyCache;\nfunction resetCanonicalStringify() {\n    stringifyCanon = new ObjectCanon;\n    stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}\n//# sourceMappingURL=object-canon.js.map","import { __assign, __rest } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { storeKeyNameFromField, argumentsObjectFromField, isReference, getStoreKeyName, isNonNullObject, stringifyForDisplay, } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName, storeValueIsStoreObject, selectionSetMatchesResult, TypeOrFieldNameRegExp, defaultDataIdFromObject, isArray, } from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier } from \"./key-extractor.js\";\ngetStoreKeyName.setStringify(canonicalStringify);\nfunction argsFromFieldSpecifier(spec) {\n    return spec.args !== void 0 ? spec.args :\n        spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\nvar nullKeyFieldsFn = function () { return void 0; };\nvar simpleKeyArgsFn = function (_args, context) { return context.fieldName; };\nvar mergeTrueFn = function (existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function (_, incoming) { return incoming; };\nvar Policies = (function () {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        this.supertypeMap = new Map();\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = __assign({ dataIdFromObject: defaultDataIdFromObject }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function (object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = partialContext && (partialContext.typename ||\n            ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\"ROOT_QUERY\"];\n        }\n        var storeObject = partialContext && partialContext.storeObject || object;\n        var context = __assign(__assign({}, partialContext), { typename: typename, storeObject: storeObject, readField: partialContext && partialContext.readField || function () {\n                var options = normalizeReadFieldOptions(arguments, storeObject);\n                return policies.readField(options, {\n                    store: policies.cache[\"data\"],\n                    variables: options.variables,\n                });\n            } });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n        while (keyFn) {\n            var specifierOrId = keyFn(__assign(__assign({}, object), storeObject), context);\n            if (isArray(specifierOrId)) {\n                keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n            }\n            else {\n                id = specifierOrId;\n                break;\n            }\n        }\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [id, context.keyObject] : [id];\n    };\n    Policies.prototype.addTypePolicies = function (typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function (typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = __rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n            if (queryType)\n                _this.setRootTypename(\"Query\", typename);\n            if (mutationType)\n                _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType)\n                _this.setRootTypename(\"Subscription\", typename);\n            if (hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            }\n            else {\n                _this.toBeAdded[typename] = [incoming];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function (typename, incoming) {\n        var _this = this;\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge =\n                typeof merge === \"function\" ? merge :\n                    merge === true ? mergeTrueFn :\n                        merge === false ? mergeFalseFn :\n                            existing.merge;\n        }\n        setMerge(existing, incoming.merge);\n        existing.keyFn =\n            keyFields === false ? nullKeyFieldsFn :\n                isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n                    typeof keyFields === \"function\" ? keyFields :\n                        existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function (fieldName) {\n                var existing = _this.getFieldPolicy(typename, fieldName, true);\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                }\n                else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn =\n                        keyArgs === false ? simpleKeyArgsFn :\n                            isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n                                typeof keyArgs === \"function\" ? keyArgs :\n                                    existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function (which, typename) {\n        if (typename === void 0) { typename = which; }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            __DEV__ ? invariant(!old || old === which, \"Cannot change root \".concat(which, \" __typename more than once\")) : invariant(!old || old === which, 3);\n            if (old)\n                delete this.rootIdsByTypename[old];\n            this.rootIdsByTypename[typename] = rootId;\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function (possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function (supertype) {\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function (subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function (typename) {\n        var _this = this;\n        if (!hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = this.typePolicies[typename] = Object.create(null);\n            policy_1.fields = Object.create(null);\n            var supertypes = this.supertypeMap.get(typename);\n            if (supertypes && supertypes.size) {\n                supertypes.forEach(function (supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = __rest(_a, [\"fields\"]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            inbox.splice(0).forEach(function (policy) {\n                _this.updateTypePolicy(typename, policy);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n        if (typename) {\n            var fieldPolicies = this.getTypePolicy(typename).fields;\n            return fieldPolicies[fieldName] || (createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n        }\n    };\n    Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, supertypeSet = new Set());\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition)\n            return true;\n        if (!typename)\n            return false;\n        var supertype = fragment.typeCondition.name.value;\n        if (typename === supertype)\n            return true;\n        if (this.usingPossibleTypes &&\n            this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [typenameSupertypeSet];\n            var maybeEnqueue_1 = function (subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet &&\n                    supertypeSet.size &&\n                    workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            for (var i = 0; i < workQueue_1.length; ++i) {\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            __DEV__ && invariant.warn(\"Inferring subtype \".concat(typename, \" of supertype \").concat(supertype));\n                        }\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes &&\n                    i === workQueue_1.length - 1 &&\n                    selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function (fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables,\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while (keyFn) {\n                var specifierOrString = keyFn(args, context);\n                if (isArray(specifierOrString)) {\n                    keyFn = keyArgsFnFromSpecifier(specifierOrString);\n                }\n                else {\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName = fieldSpec.field\n                ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n                : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        return fieldName === fieldNameFromStoreName(storeFieldName)\n            ? storeFieldName\n            : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function (options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference)\n            return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField)\n            return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename)\n                options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName, false);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference)\n                ? objectOrReference.__ref\n                : objectOrReference, storeFieldName));\n            return cacheSlot.withValue(this.cache, read, [existing, readOptions]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function (typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            return incoming;\n        }\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, { typename: typename, fieldName: field.name.value, field: field, variables: context.variables }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}());\nexport { Policies };\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function () {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store),\n    };\n}\nexport function normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            from: argc > 1 ? from : objectOrReference,\n        };\n    }\n    else {\n        options = __assign({}, fieldNameOrOptions);\n        if (!hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (__DEV__ && options.from === void 0) {\n        __DEV__ && invariant.warn(\"Undefined 'from' passed to readField with arguments \".concat(stringifyForDisplay(Array.from(readFieldArgs))));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if (isArray(existing) || isArray(incoming)) {\n            throw __DEV__ ? new InvariantError(\"Cannot automatically merge arrays\") : new InvariantError(4);\n        }\n        if (isNonNullObject(existing) &&\n            isNonNullObject(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if (isReference(existing) &&\n                storeValueIsStoreObject(incoming)) {\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if (storeValueIsStoreObject(existing) &&\n                isReference(incoming)) {\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if (storeValueIsStoreObject(existing) &&\n                storeValueIsStoreObject(incoming)) {\n                return __assign(__assign({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n}\n//# sourceMappingURL=policies.js.map","import { dep } from \"optimism\";\nimport { Slot } from \"@wry/context\";\nexport var cacheSlot = new Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, info = {\n            vars: new Set,\n            dep: dep(),\n        });\n    }\n    return info;\n}\nexport function forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function (rv) { return rv.forgetCache(cache); });\n}\nexport function recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function (rv) { return rv.attachCache(cache); });\n}\nexport function makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function (newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function (cache) {\n                    getCacheInfo(cache).dep.dirty(rv);\n                    broadcast(cache);\n                });\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function (listener) { return listener(value); });\n            }\n        }\n        else {\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function (listener) {\n        listeners.add(listener);\n        return function () {\n            listeners.delete(listener);\n        };\n    };\n    var attach = rv.attachCache = function (cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    };\n    rv.forgetCache = function (cache) { return caches.delete(cache); };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n}\n//# sourceMappingURL=reactiveVars.js.map","import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { Kind, } from 'graphql';\nimport { wrap } from 'optimism';\nimport { isField, resultKeyNameFromField, isReference, makeReference, shouldInclude, addTypenameToDocument, getDefaultValues, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact, } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from \"./entityStore.js\";\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\n;\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        options.context.canonizeResults,\n    ];\n}\nvar StoreReader = (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n        this.config = compact(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: shouldCanonizeResults(config),\n        });\n        this.canon = config.canon || new ObjectCanon;\n        this.executeSelectionSet = wrap(function (options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return __assign(__assign({}, other), { result: _this.canon.admit(other.result) });\n                }\n                return other;\n            }\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize,\n            keyArgs: execSelectionSetKeyArgs,\n            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            }\n        });\n        this.executeSubSelectedArray = wrap(function (options) {\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize,\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n    }\n    StoreReader.prototype.resetCanon = function () {\n        this.canon = new ObjectCanon;\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? 'ROOT_QUERY' : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n        var rootRef = makeReference(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: getMainDefinition(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: __assign({ store: store, query: query, policies: policies, variables: variables, varString: canonicalStringify(variables), canonizeResults: canonizeResults }, extractFragmentContext(query, this.config.fragments)),\n        });\n        var missing;\n        if (execResult.missing) {\n            missing = [new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n        if (supportsResultCaching(context.store) &&\n            this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    StoreReader.prototype.execSelectionSetImpl = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if (isReference(objectOrReference) &&\n            !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n            !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\"),\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new DeepMerger();\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            !policies.rootIdsByTypename[typename]) {\n            objectsToMerge.push({ __typename: typename });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a, _b;\n            if (!shouldInclude(selection, variables))\n                return;\n            if (isField(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference,\n                }, context);\n                var resultName = resultKeyNameFromField(selection);\n                if (fieldValue === void 0) {\n                    if (!addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {},\n                            _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference)\n                                ? objectOrReference.__ref + \" object\"\n                                : \"object \" + JSON.stringify(objectOrReference, null, 2)),\n                            _a));\n                    }\n                }\n                else if (isArray(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        enclosingRef: enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                else if (!selection.selectionSet) {\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n                if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n                    throw __DEV__ ? new InvariantError(\"No fragment named \".concat(selection.name.value)) : new InvariantError(5);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = mergeDeepArray(objectsToMerge);\n        var finalResult = { result: result, missing: missing };\n        var frozen = context.canonizeResults\n            ? this.canon.admit(finalResult)\n            : maybeDeepFreeze(finalResult);\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function (item, i) {\n            if (item === null) {\n                return null;\n            }\n            if (isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: isReference(item) ? item : enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (__DEV__) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing,\n        };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function (_, value) {\n            if (typeof value === \"string\")\n                throw value;\n            return value;\n        });\n    }\n    catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (isNonNullObject(value)) {\n                __DEV__ ? invariant(!isReference(value), \"Missing selection set for object of type \".concat(getTypenameFromStoreObject(store, value), \" returned for query field \").concat(field.name.value)) : invariant(!isReference(value), 6);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n//# sourceMappingURL=readFromStore.js.map","import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { Kind, } from 'graphql';\nimport { getFragmentFromSelection, getDefaultValues, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument, isNonEmptyArray, argumentsObjectFromField, } from \"../../utilities/index.js\";\nimport { isArray, makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, extractFragmentContext } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\n;\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = (context.clientOnly === clientOnly &&\n            context.deferred === deferred) ? context : __assign(__assign({}, context), { clientOnly: clientOnly, deferred: deferred }));\n    }\n    return flavored;\n}\nvar StoreWriter = (function () {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function (store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = getOperationDefinition(query);\n        var merger = makeProcessedFieldsMerger();\n        variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n        var context = __assign(__assign({ store: store, written: Object.create(null), merge: function (existing, incoming) {\n                return merger.merge(existing, incoming);\n            }, variables: variables, varString: canonicalStringify(variables) }, extractFragmentContext(query, this.fragments)), { overwrite: !!overwrite, incomingById: new Map, clientOnly: false, deferred: false, flavors: new Map });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: { map: new Map },\n            context: context,\n        });\n        if (!isReference(ref)) {\n            throw __DEV__ ? new InvariantError(\"Could not identify object \".concat(JSON.stringify(result))) : new InvariantError(7);\n        }\n        context.incomingById.forEach(function (_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = makeReference(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if (isReference(applied)) {\n                    return;\n                }\n                storeObject = applied;\n            }\n            if (__DEV__ && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function (field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function (storeFieldName) {\n                    return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] === true;\n                };\n                var hasMergeFunction_1 = function (storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function (storeFieldName) {\n                    if (hasSelectionSet_1(storeFieldName) &&\n                        !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function (_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        var incoming = Object.create(null);\n        var typename = (dataId && policies.rootTypenamesById[dataId]) ||\n            getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n            (dataId && context.store.get(dataId, \"__typename\"));\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        var readField = function () {\n            var options = normalizeReadFieldOptions(arguments, incoming, context.variables);\n            if (isReference(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField(__assign(__assign({}, options), { from: info.storeObject }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, context, typename).forEach(function (context, field) {\n            var _a;\n            var resultFieldKey = resultKeyNameFromField(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables,\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, field.selectionSet\n                    ? getContextFlavor(context, false, false)\n                    : context, childTree);\n                var childTypename = void 0;\n                if (field.selectionSet &&\n                    (isReference(incomingValue) ||\n                        storeValueIsStoreObject(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        field: field,\n                        typename: typename,\n                        merge: merge,\n                    };\n                }\n                else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {},\n                    _a[storeFieldName] = incomingValue,\n                    _a));\n            }\n            else if (__DEV__ &&\n                !context.clientOnly &&\n                !context.deferred &&\n                !addTypenameToDocument.added(field) &&\n                !policies.getReadFunction(typename, field.name.value)) {\n                __DEV__ && invariant.error(\"Missing field '\".concat(resultKeyNameFromField(field), \"' while writing result \").concat(JSON.stringify(result, null, 2)).substring(0, 1000));\n            }\n        });\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField,\n            }), id = _b[0], keyObject = _b[1];\n            dataId = dataId || id;\n            if (keyObject) {\n                incoming = context.merge(incoming, keyObject);\n            }\n        }\n        catch (e) {\n            if (!dataId)\n                throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = makeReference(dataId);\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0)\n                return dataRef;\n            sets.push(selectionSet);\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function (field) { return previous_1.fieldNodeSet.add(field); });\n            }\n            else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet,\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            return __DEV__ ? cloneDeep(value) : value;\n        }\n        if (isArray(value)) {\n            return value.map(function (item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree,\n        });\n    };\n    StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {\n        if (typename === void 0) { typename = getTypenameFromResult(result, selectionSet, context.fragmentMap); }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new Trie(false);\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited)\n                return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function (selection) {\n                if (!shouldInclude(selection, context.variables))\n                    return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (!(clientOnly && deferred) &&\n                    isNonEmptyArray(selection.directives)) {\n                    selection.directives.forEach(function (dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\")\n                            clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = argumentsObjectFromField(dir, context.variables);\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        }\n                    });\n                }\n                if (isField(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                }\n                else {\n                    var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n                        throw __DEV__ ? new InvariantError(\"No fragment named \".concat(selection.name.value)) : new InvariantError(8);\n                    }\n                    if (fragment &&\n                        policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !isReference(incoming)) {\n            var e_1 = (!isArray(incoming) &&\n                (isReference(existing) || storeValueIsStoreObject(existing))) ? existing : void 0;\n            var i_1 = incoming;\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n            }\n            var changedFields_1;\n            var getValue_1 = function (from, name) {\n                return isArray(from)\n                    ? (typeof name === \"number\" ? from[name] : void 0)\n                    : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach(function (childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                if (void 0 === iVal)\n                    return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map;\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    invariant(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                incoming = (isArray(i_1) ? i_1.slice(0) : __assign({}, i_1));\n                changedFields_1.forEach(function (value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}());\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right))\n        return left;\n    if (!left || mergeTreeIsEmpty(left))\n        return right;\n    var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map :\n        left.map.size ? left.map : right.map;\n    var merged = { info: info, map: map };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function (leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function (key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function (objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing)\n        return;\n    var incoming = getChild(incomingObj);\n    if (!incoming)\n        return;\n    if (isReference(existing))\n        return;\n    if (equal(existing, incoming))\n        return;\n    if (Object.keys(existing).every(function (key) { return store.getFieldValue(incoming, key) !== void 0; })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") ||\n        store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    if (warnings.has(typeDotName))\n        return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    if (!isArray(existing) &&\n        !isArray(incoming)) {\n        [existing, incoming].forEach(function (child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" &&\n                !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    __DEV__ && invariant.warn(\"Cache data may be lost when replacing the \".concat(fieldName, \" field of a \").concat(parentType, \" object.\\n\\nThis could cause additional (usually avoidable) network requests to fetch data that were otherwise cached.\\n\\nTo address this problem (which is not a bug in Apollo Client), \").concat(childTypenames.length\n        ? \"either ensure all objects of type \" +\n            childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n        : \"\", \"define a custom merge function for the \").concat(typeDotName, \" field, so InMemoryCache can safely merge these objects:\\n\\n  existing: \").concat(JSON.stringify(existing).slice(0, 1000), \"\\n  incoming: \").concat(JSON.stringify(incoming).slice(0, 1000), \"\\n\\nFor more information about these options, please refer to the documentation:\\n\\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\\n\"));\n}\n//# sourceMappingURL=writeToStore.js.map","import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState, } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\nimport { mergeOptions } from \"../utilities/index.js\";\nexport { mergeOptions };\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, _c = options.connectToDevTools, connectToDevTools = _c === void 0 ? typeof window === 'object' &&\n            !window.__APOLLO_CLIENT__ &&\n            __DEV__ : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? false : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link) {\n            link = uri\n                ? new HttpLink({ uri: uri, credentials: credentials, headers: headers })\n                : ApolloLink.empty();\n        }\n        if (!cache) {\n            throw __DEV__ ? new InvariantError(\"To initialize Apollo Client, you must specify a 'cache' property \" +\n                \"in the options object. \\n\" +\n                \"For more information, please visit: https://go.apollo.dev/c/docs\") : new InvariantError(9);\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        if (connectToDevTools && typeof window === 'object') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && connectToDevTools && __DEV__) {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self &&\n                !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                var nav = window.navigator;\n                var ua = nav && nav.userAgent;\n                var url = void 0;\n                if (typeof ua === \"string\") {\n                    if (ua.indexOf(\"Chrome/\") > -1) {\n                        url = \"https://chrome.google.com/webstore/detail/\" +\n                            \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                    }\n                    else if (ua.indexOf(\"Firefox/\") > -1) {\n                        url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                    }\n                }\n                if (url) {\n                    __DEV__ && invariant.log(\"Download the Apollo DevTools for a better development \" +\n                        \"experience: \" + url);\n                }\n            }\n        }\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: connectToDevTools ? function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.getQueryStore(),\n                            mutations: _this.queryManager.mutationStore || {},\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            } : void 0,\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = mergeOptions(this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = mergeOptions(this.defaultOptions.query, options);\n        }\n        __DEV__ ? invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +\n            'client.query can only return a single result. Please use client.watchQuery ' +\n            'to receive multiple results from the cache and the network, or consider ' +\n            'using a different fetchPolicy, such as cache-first or network-only.') : invariant(options.fetchPolicy !== 'cache-and-network', 10);\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = mergeOptions(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore({\n            discardWatches: false,\n        }); })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore({\n            discardWatches: true,\n        }); })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.refetchQueries = function (options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function (result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        result.queries = queries;\n        result.results = results;\n        result.catch(function (error) {\n            __DEV__ && invariant.debug(\"In client.refetchQueries, Promise.all promise rejected with error \".concat(error));\n        });\n        return result;\n    };\n    ApolloClient.prototype.getObservableQueries = function (include) {\n        if (include === void 0) { include = \"active\"; }\n        return this.queryManager.getObservableQueries(include);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    ApolloClient.prototype.setLink = function (newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    return ApolloClient;\n}());\nexport { ApolloClient };\n//# sourceMappingURL=ApolloClient.js.map","import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode, } from 'graphql';\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache, getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation\n                    ? definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache, client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                isClientFieldDescendant = false;\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                            return [2];\n                        }\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            __DEV__ ? invariant(fragment, \"No fragment named \".concat(selection.name.value)) : invariant(fragment, 11);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (!rootValue) {\n                    return [2, null];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                argumentsObjectFromField(field, variables),\n                                execContext.context,\n                                { field: field, fragmentMap: execContext.fragmentMap },\n                            ]));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        var _a, _b;\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) { return d.name.value === 'client'; })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n        var isSingleASTNode = function (node) { return !Array.isArray(node); };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                visit(definitionNode, {\n                    Directive: function (node, _, __, ___, ancestors) {\n                        if (node.name.value === 'client') {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function (spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        __DEV__ ? invariant(fragment, \"No fragment named \".concat(spread.name.value)) : invariant(fragment, 12);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function (selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    }\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}());\nexport { LocalState };\n//# sourceMappingURL=LocalState.js.map","import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, fixObservableSubclass, getQueryDefinition, } from \"../utilities/index.js\";\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            }\n            catch (_a) { }\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            }\n            else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            if (first) {\n                _this.reobserve().catch(function () { });\n            }\n            return function () {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, _f = options.initialFetchPolicy, initialFetchPolicy = _f === void 0 ? (fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy) : _f;\n        _this.options = __assign(__assign({}, options), { initialFetchPolicy: initialFetchPolicy, fetchPolicy: fetchPolicy });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = getOperationDefinition(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        get: function () {\n            return this.queryManager.transform(this.options.query).document;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n        if (saveAsLastResult === void 0) { saveAsLastResult = true; }\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus ||\n            (lastResult && lastResult.networkStatus) ||\n            NetworkStatus.ready;\n        var result = __assign(__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (skipCacheDataFor(fetchPolicy) ||\n            this.queryManager.transform(this.options.query).hasForcedResolvers) {\n        }\n        else if (this.waitForOwnResult) {\n            this.queryInfo['updateWatch']();\n        }\n        else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if (equal(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                delete result.partial;\n                if (diff.complete &&\n                    result.networkStatus === NetworkStatus.loading &&\n                    (fetchPolicy === 'cache-first' ||\n                        fetchPolicy === 'cache-only')) {\n                    result.networkStatus = NetworkStatus.ready;\n                    result.loading = false;\n                }\n            }\n            else {\n                result.partial = true;\n            }\n            if (__DEV__ &&\n                !diff.complete &&\n                !this.options.partialRefetch &&\n                !result.loading &&\n                !result.data &&\n                !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n        return (!this.last ||\n            !equal(this.last.result, newResult) ||\n            (variables && !equal(this.last.variables, variables)));\n    };\n    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n        var last = this.last;\n        if (last &&\n            last[key] &&\n            (!variablesMustMatch || equal(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var _a;\n        var reobserveOptions = {\n            pollInterval: 0,\n        };\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-and-network') {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        }\n        else if (fetchPolicy === 'no-cache') {\n            reobserveOptions.fetchPolicy = 'no-cache';\n        }\n        else {\n            reobserveOptions.fetchPolicy = 'network-only';\n        }\n        if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = getQueryDefinition(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function (v) { return v.variable.name.value === \"variables\"; })) {\n                __DEV__ && invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables), \") for query \").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), \", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));\n            }\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), { query: this.query }), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) }))), { fetchPolicy: \"no-cache\" });\n        var qid = this.queryManager.generateQueryId();\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            _this.queryManager.cache.batch({\n                update: function (cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false,\n                        }, function (previous) { return updateQuery(previous, {\n                            fetchMoreResult: fetchMoreResult.data,\n                            variables: combinedOptions.variables,\n                        }); });\n                    }\n                    else {\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data,\n                        });\n                    }\n                },\n                onWatchUpdated: function (watch) {\n                    updatedQuerySet.add(watch.query);\n                },\n            });\n            return fetchMoreResult;\n        }).finally(function () {\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            return this.observers.size\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n            }\n            else if (typeof options.nextFetchPolicy === \"function\") {\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy,\n                });\n            }\n            else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            }\n            else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager['fetchConcastWithInfo'](this.queryId, options, newNetworkStatus);\n    };\n    ObservableQuery.prototype.updatePolling = function () {\n        var _this = this;\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo &&\n            pollingInfo.interval === pollInterval) {\n            return;\n        }\n        __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 13);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            if (_this.pollingInfo) {\n                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n                    _this.reobserve({\n                        fetchPolicy: _this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n                    }, NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n            ;\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n        if (variables === void 0) { variables = this.variables; }\n        this.last = __assign(__assign({}, this.last), { result: this.queryManager.assumeImmutableResults\n                ? newResult\n                : cloneDeep(newResult), variables: variables });\n        if (!isNonEmptyArray(newResult.errors)) {\n            delete this.last.error;\n        }\n        return this.last;\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch ||\n            newNetworkStatus === NetworkStatus.fetchMore ||\n            newNetworkStatus === NetworkStatus.poll;\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = compact(this.options, newOptions || {});\n        var options = useDisposableConcast\n            ? mergedOptions\n            : assign(this.options, mergedOptions);\n        if (!useDisposableConcast) {\n            this.updatePolling();\n            if (newOptions &&\n                newOptions.variables &&\n                !equal(newOptions.variables, oldVariables) &&\n                options.fetchPolicy !== \"standby\" &&\n                options.fetchPolicy === oldFetchPolicy) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function () {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && __assign({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function (result) {\n                finishWaitingForOwnResult();\n                _this.reportResult(result, variables);\n            },\n            error: function (error) {\n                finishWaitingForOwnResult();\n                _this.reportError(error, variables);\n            },\n        };\n        if (!useDisposableConcast && fromLink) {\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n    };\n    ObservableQuery.prototype.observe = function () {\n        this.reportResult(this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function (result, variables) {\n        var lastError = this.getLastError();\n        if (lastError || this.isDifferentFromLastResult(result, variables)) {\n            if (lastError || !result.partial || this.options.returnPartialData) {\n                this.updateLastResult(result, variables);\n            }\n            iterateObserversSafely(this.observers, 'next', result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function (error, variables) {\n        var errorResult = __assign(__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false });\n        this.updateLastResult(errorResult, variables);\n        iterateObserversSafely(this.observers, 'error', this.last.error = error);\n    };\n    ObservableQuery.prototype.hasObservers = function () {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        if (this.isTornDown)\n            return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" ||\n        fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            nextFetchPolicy: function () {\n                this.nextFetchPolicy = nextFetchPolicy;\n                if (typeof nextFetchPolicy === \"function\") {\n                    return nextFetchPolicy.apply(this, arguments);\n                }\n                return fetchPolicy;\n            },\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    __DEV__ && invariant.error('Unhandled error', error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n    if (__DEV__ && missing) {\n        __DEV__ && invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)), missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy) {\n    return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}\n//# sourceMappingURL=ObservableQuery.js.map","import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap, } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight, } from \"./networkStatus.js\";\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\nvar QueryInfo = (function () {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.subscriptions = new Set();\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        if (!equal(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function () {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.getDiff = function (variables) {\n        if (variables === void 0) { variables = this.variables; }\n        var options = this.getDiffOptions(variables);\n        if (this.lastDiff && equal(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables = variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return { complete: false };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function (diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions(),\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function (variables) {\n        var _a;\n        if (variables === void 0) { variables = this.variables; }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,\n        };\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        this.updateLastDiff(diff);\n        if (!this.dirty &&\n            !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function () {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    oq[\"observe\"]();\n                }\n                else {\n                    reobserveCacheFirst(oq);\n                }\n            });\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) &&\n            this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" &&\n                fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        if (!this.stopped) {\n            this.stopped = true;\n            this.reset();\n            this.cancel();\n            this.cancel = QueryInfo.prototype.cancel;\n            this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n            var oq = this.observableQuery;\n            if (oq)\n                oq.stopPolling();\n        }\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });\n        if (!this.lastWatch ||\n            !equal(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function () {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal(variables, lastWrite.variables) &&\n            equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        var merger = new DeepMerger();\n        var graphQLErrors = isNonEmptyArray(result.errors)\n            ? result.errors.slice(0)\n            : [];\n        this.reset();\n        if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n            var mergedData = mergeIncrementalData(this.getDiff().result, result);\n            result.data = mergedData;\n        }\n        else if ('hasNext' in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === 'no-cache') {\n            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));\n        }\n        else if (cacheWriteBehavior !== 0) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1,\n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        if (_this.lastDiff &&\n                            _this.lastDiff.diff.complete) {\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    if (!_this.stopped) {\n                        _this.updateWatch(options.variables);\n                    }\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return this.networkStatus = NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" ||\n        errorPolicy === \"all\";\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n//# sourceMappingURL=QueryInfo.js.map","import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { isExecutionPatchIncrementalResult, isExecutionPatchResult, } from \"../utilities/common/incrementalResult.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult, } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(14));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, _h, document, hasClientExports, mutationStoreValue, self;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 15);\n                        __DEV__ ? invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', 16);\n                        mutationId = this.generateMutationId();\n                        _h = this.transform(mutation), document = _h.document, hasClientExports = _h.hasClientExports;\n                        mutation = this.cache.transformForLink(document);\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_j.sent());\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        if (optimisticResponse) {\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                        throw new ApolloError({\n                                            graphQLErrors: getGraphQLErrorsFromResult(result),\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === 'ignore' &&\n                                        graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: optimisticResponse ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        if (!('hasNext' in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            if (!isExecutionPatchIncrementalResult(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                });\n            }\n            if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    query: this.transform(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true,\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = mergeIncrementalData(diff.result, result);\n                }\n                if (typeof mergedData !== 'undefined') {\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: 'ROOT_MUTATION',\n                        query: mutation.document,\n                        variables: mutation.variables,\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && getOperationName(document) || void 0,\n                            queryVariables: variables,\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            mutation.refetchQueries ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    var update = mutation.update;\n                    var isFinalResult = !isExecutionPatchResult(result) ||\n                        (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n                    if (update) {\n                        if (!skipCache) {\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                query: _this.transform(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                                if ('incremental' in result) {\n                                    delete result.incremental;\n                                }\n                                if ('hasNext' in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables,\n                            });\n                        }\n                    }\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: 'ROOT_MUTATION',\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                optimistic: false,\n                removeOptimistic: mutation.removeOptimistic,\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\"\n            ? optimisticResponse(mutation.variables)\n            : optimisticResponse;\n        return this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                __DEV__ && invariant.error(error);\n            }\n        }, mutation.mutationId);\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var noConnection = removeConnectionDirectiveFromDocument(transformed);\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = noConnection && this.localState.serverQuery(noConnection);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n                asQuery: __assign(__assign({}, transformed), { definitions: transformed.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) })\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: observable.query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.') : invariant(options.query, 17);\n        __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 18);\n        __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 19);\n        __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 20);\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(21));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc).document, false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (__DEV__ && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" &&\n                    fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function (result) {\n                if (fetchPolicy !== 'no-cache') {\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = graphQLResultHasError(result);\n                var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    throw new ApolloError(errors);\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = canonicalStringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.beforeNext(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        var linkDocument = this.cache.transformForLink(this.transform(queryInfo.document).document);\n        return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = getGraphQLErrorsFromResult(result);\n            var hasErrors = graphQLErrors.length > 0;\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast;\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (normalized.fetchPolicy !== \"standby\" &&\n                sourcesWithInfo.sources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast, containsDataFromLink;\n        if (this.transform(normalized.query).hasClientExports) {\n            concast = new Concast(this.localState\n                .addExportedVariables(normalized.query, normalized.variables, normalized.context)\n                .then(fromVariables).then(function (sourcesWithInfo) { return sourcesWithInfo.sources; }));\n            containsDataFromLink = true;\n        }\n        else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink,\n        };\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map;\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                optimistic: optimistic && removeOptimistic || false,\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo &&\n                        watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                result = oq.refetch();\n                            }\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset();\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: this.transform(query).document,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(variables); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (__DEV__ &&\n                !returnPartialData &&\n                !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };\n            if (data && _this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            if (errorPolicy === 'none' &&\n                networkStatus === NetworkStatus.refetch &&\n                Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 :\n            (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ? 1\n                : 2;\n        var resultsFromLink = function () { return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n            variables: variables,\n            context: context,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n        }); };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return { fromLink: false, sources: [resultsFromCache(diff, queryInfo.markReady())] };\n                }\n                if (returnPartialData || shouldNotify) {\n                    return { fromLink: true, sources: [resultsFromCache(diff), resultsFromLink()] };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return { fromLink: true, sources: [resultsFromCache(diff), resultsFromLink()] };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-only\":\n                return { fromLink: false, sources: [resultsFromCache(readCache(), queryInfo.markReady())] };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return { fromLink: true, sources: [resultsFromCache(readCache()), resultsFromLink()] };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromCache(queryInfo.getDiff()),\n                            resultsFromLink(),\n                        ],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"standby\":\n                return { fromLink: false, sources: [] };\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n//# sourceMappingURL=QueryManager.js.map","export var NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nexport function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n//# sourceMappingURL=networkStatus.js.map","import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nexport function isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError)\n        errors.push(err.networkError);\n    return errors\n        .map(function (err) { return isNonNullObject(err) && err.message || 'Error message not found.'; })\n        .join('\\n');\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = 'ApolloError';\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\nexport { ApolloError };\n//# sourceMappingURL=index.js.map","import { __extends } from \"tslib\";\nimport { InvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation, } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            return new ApolloLink(function (operation) {\n                return test(operation)\n                    ? leftLink.request(operation) || Observable.of()\n                    : rightLink.request(operation) || Observable.of();\n            });\n        }\n        else {\n            return new ApolloLink(function (operation, forward) {\n                return test(operation)\n                    ? leftLink.request(operation, forward) || Observable.of()\n                    : rightLink.request(operation, forward) || Observable.of();\n            });\n        }\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            __DEV__ && invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        if (isTerminating(nextLink)) {\n            return new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n            });\n        }\n        else {\n            return new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || Observable.of();\n                }) || Observable.of());\n            });\n        }\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw __DEV__ ? new InvariantError('request is not implemented') : new InvariantError(22);\n    };\n    ApolloLink.prototype.onError = function (error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            return false;\n        }\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\nexport { ApolloLink };\n//# sourceMappingURL=ApolloLink.js.map","import { ApolloLink } from \"./ApolloLink.js\";\nexport var execute = ApolloLink.execute;\n//# sourceMappingURL=execute.js.map","import { ApolloLink } from \"./ApolloLink.js\";\nexport var from = ApolloLink.from;\n//# sourceMappingURL=from.js.map","import { __extends } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { createHttpLink } from \"./createHttpLink.js\";\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, createHttpLink(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(ApolloLink));\nexport { HttpLink };\n//# sourceMappingURL=HttpLink.js.map","import { InvariantError } from \"../../utilities/globals/index.js\";\nexport var checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        throw __DEV__ ? new InvariantError(\"\\n\\\"fetch\\\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\\n\\nimport fetch from 'cross-fetch';\\nimport { ApolloClient, HttpLink } from '@apollo/client';\\nconst client = new ApolloClient({\\n  link: new HttpLink({ uri: '/graphql', fetch })\\n});\\n    \") : new InvariantError(23);\n    }\n};\n//# sourceMappingURL=checkFetcher.js.map","import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe, getMainDefinition } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () { return fetch; });\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n    if (__DEV__) {\n        checkFetcher(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions, preserveHeaderCase: preserveHeaderCase },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            var unusedNames_1 = new Set(Object.keys(body.variables));\n            visit(operation.query, {\n                Variable: function (node, _key, parent) {\n                    if (parent && parent.kind !== 'VariableDefinition') {\n                        unusedNames_1.delete(node.name.value);\n                    }\n                },\n            });\n            if (unusedNames_1.size) {\n                body.variables = __assign({}, body.variables);\n                unusedNames_1.forEach(function (name) {\n                    delete body.variables[name];\n                });\n            }\n        }\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        var definitionIsSubscription = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'subscription';\n        };\n        var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n        var hasDefer = hasDirectives(['defer'], operation.query);\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            if (isSubscription && hasDefer) {\n                __DEV__ && invariant.warn(\"Multipart-subscriptions do not support @defer\");\n            }\n            if (isSubscription) {\n                acceptHeader += 'boundary=graphql;subscriptionSpec=1.0,application/json';\n            }\n            else if (hasDefer) {\n                acceptHeader += 'deferSpec=20220824,application/json';\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            var currentFetch = preferredFetch || maybe(function () { return fetch; }) || backupFetch;\n            currentFetch(chosenURI, options)\n                .then(function (response) {\n                var _a;\n                operation.setContext({ response: response });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return readMultipartBody(response, observer);\n                }\n                else {\n                    return readJsonBody(response, operation, observer);\n                }\n            })\n                .catch(function (err) { return handleError(err, observer); });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n//# sourceMappingURL=createHttpLink.js.map","export var createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\n//# sourceMappingURL=createSignalIfSupported.js.map","export default function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n            next: function () {\n                return iterator.next();\n            }\n        },\n        _a[Symbol.asyncIterator] = function () {\n            return this;\n        },\n        _a;\n}\n//# sourceMappingURL=async.js.map","import { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error)\n            return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({ value: chunk, done: false });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[0]({ value: undefined, done: true });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function () {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function (resolve, reject) {\n            if (error)\n                return reject(error);\n            if (data.length)\n                return resolve({ value: data.shift(), done: false });\n            if (done)\n                return resolve({ value: undefined, done: true });\n            waiting.push([resolve, reject]);\n        });\n    }\n    var iterator = {\n        next: function () {\n            return getNext();\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n//# sourceMappingURL=nodeStream.js.map","import { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function () {\n            if (resolved)\n                return Promise.resolve({\n                    value: undefined,\n                    done: true,\n                });\n            resolved = true;\n            return new Promise(function (resolve, reject) {\n                promise\n                    .then(function (value) {\n                    resolve({ value: value, done: false });\n                })\n                    .catch(reject);\n            });\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n//# sourceMappingURL=promise.js.map","import { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function readerIterator(reader) {\n    var iterator = {\n        next: function () {\n            return reader.read();\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n//# sourceMappingURL=reader.js.map","import { __assign, __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, observer) {\n    var _a, _b, _c, _d, _e;\n    return __awaiter(this, void 0, void 0, function () {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _f, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _g, _h;\n        return __generator(this, function (_j) {\n            switch (_j.label) {\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter))\n                        ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim()\n                        : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = responseIterator(response);\n                    running = true;\n                    _j.label = 1;\n                case 1:\n                    if (!running) return [3, 3];\n                    return [4, iterator.next()];\n                case 2:\n                    _f = _j.sent(), value = _f.value, done = _f.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while (bi > -1) {\n                        message = void 0;\n                        _g = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length),\n                        ], message = _g[0], buffer = _g[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 &&\n                            contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            try {\n                                result = parseJsonBody(response, body);\n                                if (Object.keys(result).length > 1 ||\n                                    \"data\" in result ||\n                                    \"incremental\" in result ||\n                                    \"errors\" in result ||\n                                    \"payload\" in result) {\n                                    if (isApolloPayloadResult(result)) {\n                                        next = {};\n                                        if (\"payload\" in result) {\n                                            next = __assign({}, result.payload);\n                                        }\n                                        if (\"errors\" in result) {\n                                            next = __assign(__assign({}, next), { extensions: __assign(__assign({}, (\"extensions\" in next ? next.extensions : null)), (_h = {}, _h[PROTOCOL_ERRORS_SYMBOL] = result.errors, _h)) });\n                                        }\n                                        (_b = observer.next) === null || _b === void 0 ? void 0 : _b.call(observer, next);\n                                    }\n                                    else {\n                                        (_c = observer.next) === null || _c === void 0 ? void 0 : _c.call(observer, result);\n                                    }\n                                }\n                                else if (Object.keys(result).length === 1 &&\n                                    \"hasNext\" in result &&\n                                    !result.hasNext) {\n                                    (_d = observer.complete) === null || _d === void 0 ? void 0 : _d.call(observer);\n                                }\n                            }\n                            catch (err) {\n                                handleError(err, observer);\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [3, 1];\n                case 3:\n                    (_e = observer.complete) === null || _e === void 0 ? void 0 : _e.call(observer);\n                    return [2];\n            }\n        });\n    });\n}\nexport function parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function (line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        var getResult = function () {\n            try {\n                return JSON.parse(bodyText);\n            }\n            catch (err) {\n                return bodyText;\n            }\n        };\n        throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    }\n    catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nexport function handleError(err, observer) {\n    var _a, _b;\n    if (err.name === \"AbortError\")\n        return;\n    if (err.result && err.result.errors && err.result.data) {\n        (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, err.result);\n    }\n    (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, err);\n}\nexport function readJsonBody(response, operation, observer) {\n    parseAndCheckHttpResponse(operation)(response)\n        .then(function (result) {\n        var _a, _b;\n        (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, result);\n        (_b = observer.complete) === null || _b === void 0 ? void 0 : _b.call(observer);\n    })\n        .catch(function (err) { return handleError(err, observer); });\n}\nexport function parseAndCheckHttpResponse(operations) {\n    return function (response) {\n        return response\n            .text()\n            .then(function (bodyText) { return parseJsonBody(response, bodyText); })\n            .then(function (result) {\n            if (response.status >= 300) {\n                throwServerError(response, result, \"Response not successful: Received status code \".concat(response.status));\n            }\n            if (!Array.isArray(result) &&\n                !hasOwnProperty.call(result, \"data\") &&\n                !hasOwnProperty.call(result, \"errors\")) {\n                throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations)\n                    ? operations.map(function (op) { return op.operationName; })\n                    : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n}\n//# sourceMappingURL=parseAndCheckHttpResponse.js.map","import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob, } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response))\n        body = response.body;\n    if (isAsyncIterableIterator(body))\n        return asyncIterator(body);\n    if (isReadableStream(body))\n        return readerIterator(body.getReader());\n    if (isStreamableBlob(body)) {\n        return readerIterator(body.stream().getReader());\n    }\n    if (isBlob(body))\n        return promiseIterator(body.arrayBuffer());\n    if (isNodeReadableStream(body))\n        return nodeStreamIterator(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}\n//# sourceMappingURL=responseIterator.js.map","import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nexport function rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\n//# sourceMappingURL=rewriteURIForGET.js.map","import { __assign, __spreadArray } from \"tslib\";\nimport { print } from 'graphql';\n;\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nexport var fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nexport var defaultPrinter = function (ast, printer) { return printer(ast); };\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation,\n        defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function (config) {\n        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), config.headers) });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = __assign(__assign({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = printer(query, print);\n    return {\n        options: options,\n        body: body,\n    };\n}\n;\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = Object.create(null);\n        Object.keys(Object(headers)).forEach(function (name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    var headerData = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n        headerData[name.toLowerCase()] = { originalName: name, value: headers[name] };\n    });\n    var normalizedHeaders = Object.create(null);\n    Object.keys(headerData).forEach(function (name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n}\n//# sourceMappingURL=selectHttpOptionsAndBody.js.map","export var selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n//# sourceMappingURL=selectURI.js.map","import { InvariantError } from \"../../utilities/globals/index.js\";\nexport var serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = __DEV__ ? new InvariantError(\"Network request failed. \".concat(label, \" is not serializable: \").concat(e.message)) : new InvariantError(24);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\n//# sourceMappingURL=serializeFetchParameter.js.map","export function buildDelayFunction(delayOptions) {\n    var _a = delayOptions || {}, _b = _a.initial, initial = _b === void 0 ? 300 : _b, _c = _a.jitter, jitter = _c === void 0 ? true : _c, _d = _a.max, max = _d === void 0 ? Infinity : _d;\n    var baseDelay = jitter ? initial : initial / 2;\n    return function delayFunction(count) {\n        var delay = Math.min(max, baseDelay * Math.pow(2, count));\n        if (jitter) {\n            delay = Math.random() * delay;\n        }\n        return delay;\n    };\n}\n//# sourceMappingURL=delayFunction.js.map","export function buildRetryFunction(retryOptions) {\n    var _a = retryOptions || {}, retryIf = _a.retryIf, _b = _a.max, max = _b === void 0 ? 5 : _b;\n    return function retryFunction(count, operation, error) {\n        if (count >= max)\n            return false;\n        return retryIf ? retryIf(error, operation) : !!error;\n    };\n}\n//# sourceMappingURL=retryFunction.js.map","import { __awaiter, __extends, __generator } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { buildDelayFunction, } from \"./delayFunction.js\";\nimport { buildRetryFunction, } from \"./retryFunction.js\";\nvar RetryableOperation = (function () {\n    function RetryableOperation(operation, nextLink, delayFor, retryIf) {\n        var _this = this;\n        this.operation = operation;\n        this.nextLink = nextLink;\n        this.delayFor = delayFor;\n        this.retryIf = retryIf;\n        this.retryCount = 0;\n        this.values = [];\n        this.complete = false;\n        this.canceled = false;\n        this.observers = [];\n        this.currentSubscription = null;\n        this.onNext = function (value) {\n            _this.values.push(value);\n            for (var _i = 0, _a = _this.observers; _i < _a.length; _i++) {\n                var observer = _a[_i];\n                if (!observer)\n                    continue;\n                observer.next(value);\n            }\n        };\n        this.onComplete = function () {\n            _this.complete = true;\n            for (var _i = 0, _a = _this.observers; _i < _a.length; _i++) {\n                var observer = _a[_i];\n                if (!observer)\n                    continue;\n                observer.complete();\n            }\n        };\n        this.onError = function (error) { return __awaiter(_this, void 0, void 0, function () {\n            var shouldRetry, _i, _a, observer;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.retryCount += 1;\n                        return [4, this.retryIf(this.retryCount, this.operation, error)];\n                    case 1:\n                        shouldRetry = _b.sent();\n                        if (shouldRetry) {\n                            this.scheduleRetry(this.delayFor(this.retryCount, this.operation, error));\n                            return [2];\n                        }\n                        this.error = error;\n                        for (_i = 0, _a = this.observers; _i < _a.length; _i++) {\n                            observer = _a[_i];\n                            if (!observer)\n                                continue;\n                            observer.error(error);\n                        }\n                        return [2];\n                }\n            });\n        }); };\n    }\n    RetryableOperation.prototype.subscribe = function (observer) {\n        if (this.canceled) {\n            throw new Error(\"Subscribing to a retryable link that was canceled is not supported\");\n        }\n        this.observers.push(observer);\n        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n            var value = _a[_i];\n            observer.next(value);\n        }\n        if (this.complete) {\n            observer.complete();\n        }\n        else if (this.error) {\n            observer.error(this.error);\n        }\n    };\n    RetryableOperation.prototype.unsubscribe = function (observer) {\n        var index = this.observers.indexOf(observer);\n        if (index < 0) {\n            throw new Error(\"RetryLink BUG! Attempting to unsubscribe unknown observer!\");\n        }\n        this.observers[index] = null;\n        if (this.observers.every(function (o) { return o === null; })) {\n            this.cancel();\n        }\n    };\n    RetryableOperation.prototype.start = function () {\n        if (this.currentSubscription)\n            return;\n        this.try();\n    };\n    RetryableOperation.prototype.cancel = function () {\n        if (this.currentSubscription) {\n            this.currentSubscription.unsubscribe();\n        }\n        clearTimeout(this.timerId);\n        this.timerId = undefined;\n        this.currentSubscription = null;\n        this.canceled = true;\n    };\n    RetryableOperation.prototype.try = function () {\n        this.currentSubscription = this.nextLink(this.operation).subscribe({\n            next: this.onNext,\n            error: this.onError,\n            complete: this.onComplete,\n        });\n    };\n    RetryableOperation.prototype.scheduleRetry = function (delay) {\n        var _this = this;\n        if (this.timerId) {\n            throw new Error(\"RetryLink BUG! Encountered overlapping retries\");\n        }\n        this.timerId = setTimeout(function () {\n            _this.timerId = undefined;\n            _this.try();\n        }, delay);\n    };\n    return RetryableOperation;\n}());\nvar RetryLink = (function (_super) {\n    __extends(RetryLink, _super);\n    function RetryLink(options) {\n        var _this = _super.call(this) || this;\n        var _a = options || {}, attempts = _a.attempts, delay = _a.delay;\n        _this.delayFor =\n            typeof delay === 'function' ? delay : buildDelayFunction(delay);\n        _this.retryIf =\n            typeof attempts === 'function' ? attempts : buildRetryFunction(attempts);\n        return _this;\n    }\n    RetryLink.prototype.request = function (operation, nextLink) {\n        var retryable = new RetryableOperation(operation, nextLink, this.delayFor, this.retryIf);\n        retryable.start();\n        return new Observable(function (observer) {\n            retryable.subscribe(observer);\n            return function () {\n                retryable.unsubscribe(observer);\n            };\n        });\n    };\n    return RetryLink;\n}(ApolloLink));\nexport { RetryLink };\n//# sourceMappingURL=retryLink.js.map","import { __assign } from \"tslib\";\nexport function createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign(__assign({}, context), next(context));\n        }\n        else {\n            context = __assign(__assign({}, context), next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    return operation;\n}\n//# sourceMappingURL=createOperation.js.map","import { Observable } from \"../../utilities/index.js\";\nexport function fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\n//# sourceMappingURL=fromError.js.map","export var throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\n//# sourceMappingURL=throwServerError.js.map","import { getOperationName } from \"../../utilities/index.js\";\nexport function transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query) || undefined\n                : '';\n    }\n    return transformedOperation;\n}\n//# sourceMappingURL=transformOperation.js.map","import { InvariantError } from \"../../utilities/globals/index.js\";\nexport function validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw __DEV__ ? new InvariantError(\"illegal argument: \".concat(key)) : new InvariantError(27);\n        }\n    }\n    return operation;\n}\n//# sourceMappingURL=validateOperation.js.map","import * as React from 'react';\nimport { canUseSymbol } from \"../../utilities/index.js\";\nvar contextKey = canUseSymbol\n    ? Symbol.for('__APOLLO_CONTEXT__')\n    : '__APOLLO_CONTEXT__';\nexport function getApolloContext() {\n    var context = React.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(React.createContext, contextKey, {\n            value: context = React.createContext({}),\n            enumerable: false,\n            writable: false,\n            configurable: true,\n        });\n        context.displayName = 'ApolloContext';\n    }\n    return context;\n}\nexport { getApolloContext as resetApolloContext };\n//# sourceMappingURL=ApolloContext.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { getApolloContext } from \"./ApolloContext.js\";\nexport var ApolloProvider = function (_a) {\n    var client = _a.client, children = _a.children;\n    var ApolloContext = getApolloContext();\n    return (React.createElement(ApolloContext.Consumer, null, function (context) {\n        if (context === void 0) { context = {}; }\n        if (client && context.client !== client) {\n            context = Object.assign({}, context, { client: client });\n        }\n        __DEV__ ? invariant(context.client, 'ApolloProvider was not passed a client instance. Make ' +\n            'sure you pass in your client via the \"client\" prop.') : invariant(context.client, 29);\n        return (React.createElement(ApolloContext.Provider, { value: context }, children));\n    }));\n};\n//# sourceMappingURL=ApolloProvider.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport { useContext } from 'react';\nimport { getApolloContext } from \"../context/index.js\";\nexport function useApolloClient(override) {\n    var context = useContext(getApolloContext());\n    var client = override || context.client;\n    __DEV__ ? invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n        'instance in via options.') : invariant(!!client, 32);\n    return client;\n}\n//# sourceMappingURL=useApolloClient.js.map","import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState, } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus, } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n    var stateRef = useRef();\n    if (!stateRef.current ||\n        client !== stateRef.current.client ||\n        query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    var _a = useState(0), _tick = _a[0], setTick = _a[1];\n    state.forceUpdate = function () {\n        setTick(function (tick) { return tick + 1; });\n    };\n    return state;\n}\nvar InternalState = (function () {\n    function InternalState(client, query, previous) {\n        this.client = client;\n        this.query = query;\n        this.ssrDisabledResult = maybeDeepFreeze({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.loading,\n        });\n        this.skipStandbyResult = maybeDeepFreeze({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.ready,\n        });\n        this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n        verifyDocumentType(query, DocumentType.Query);\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    InternalState.prototype.forceUpdate = function () {\n        __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n    };\n    InternalState.prototype.executeQuery = function (options) {\n        var _this = this;\n        var _a;\n        if (options.query) {\n            Object.assign(this, { query: options.query });\n        }\n        this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n        this.forceUpdate();\n        return new Promise(function (resolve) {\n            var result;\n            concast.subscribe({\n                next: function (value) {\n                    result = value;\n                },\n                error: function () {\n                    resolve(_this.toQueryResult(_this.observable.getCurrentResult()));\n                },\n                complete: function () {\n                    resolve(_this.toQueryResult(result));\n                }\n            });\n        });\n    };\n    InternalState.prototype.useQuery = function (options) {\n        var _this = this;\n        this.renderPromises = useContext(getApolloContext()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = useSyncExternalStore(useCallback(function () {\n            if (_this.renderPromises) {\n                return function () { };\n            }\n            var onNext = function () {\n                var previousResult = _this.result;\n                var result = obsQuery.getCurrentResult();\n                if (previousResult &&\n                    previousResult.loading === result.loading &&\n                    previousResult.networkStatus === result.networkStatus &&\n                    equal(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function (error) {\n                var last = obsQuery[\"last\"];\n                subscription.unsubscribe();\n                try {\n                    obsQuery.resetLastResults();\n                    subscription = obsQuery.subscribe(onNext, onError);\n                }\n                finally {\n                    obsQuery[\"last\"] = last;\n                }\n                if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult ||\n                    (previousResult && previousResult.loading) ||\n                    !equal(error, previousResult.error)) {\n                    _this.setResult({\n                        data: (previousResult && previousResult.data),\n                        error: error,\n                        loading: false,\n                        networkStatus: NetworkStatus.error,\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            return function () { return setTimeout(function () { return subscription.unsubscribe(); }); };\n        }, [\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches,\n        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });\n        this.unsafeHandlePartialRefetch(result);\n        return this.toQueryResult(result);\n    };\n    InternalState.prototype.useOptions = function (options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                this.observable.reobserve(this.getObsQueryOptions());\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) &&\n            this.queryHookOptions.ssr === false &&\n            !this.queryHookOptions.skip) {\n            this.result = this.ssrDisabledResult;\n        }\n        else if (this.queryHookOptions.skip ||\n            this.watchQueryOptions.fetchPolicy === 'standby') {\n            this.result = this.skipStandbyResult;\n        }\n        else if (this.result === this.ssrDisabledResult ||\n            this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function () {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults)\n            toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(mergeOptions);\n    };\n    InternalState.prototype.createWatchQueryOptions = function (_a) {\n        var _b;\n        if (_a === void 0) { _a = {}; }\n        var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });\n        if (this.renderPromises &&\n            (watchQueryOptions.fetchPolicy === 'network-only' ||\n                watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n            watchQueryOptions.fetchPolicy = 'cache-first';\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: 'standby',\n            });\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||\n                    this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function () {\n        var _a, _b;\n        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n            \"cache-first\");\n    };\n    InternalState.prototype.onCompleted = function (data) { };\n    InternalState.prototype.onError = function (error) { };\n    InternalState.prototype.useObservableQuery = function () {\n        var obsQuery = this.observable =\n            this.renderPromises\n                && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n                || this.observable\n                || this.client.watchQuery(this.getObsQueryOptions());\n        this.obsQueryFields = useMemo(function () { return ({\n            refetch: obsQuery.refetch.bind(obsQuery),\n            reobserve: obsQuery.reobserve.bind(obsQuery),\n            fetchMore: obsQuery.fetchMore.bind(obsQuery),\n            updateQuery: obsQuery.updateQuery.bind(obsQuery),\n            startPolling: obsQuery.startPolling.bind(obsQuery),\n            stopPolling: obsQuery.stopPolling.bind(obsQuery),\n            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n        }); }, [obsQuery]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false ||\n            this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function (nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function (result) {\n        var _this = this;\n        if (!result.loading) {\n            var error_1 = this.toApolloError(result);\n            Promise.resolve().then(function () {\n                if (error_1) {\n                    _this.onError(error_1);\n                }\n                else if (result.data) {\n                    _this.onCompleted(result.data);\n                }\n            }).catch(function (error) {\n                __DEV__ && invariant.warn(error);\n            });\n        }\n    };\n    InternalState.prototype.toApolloError = function (result) {\n        return isNonEmptyArray(result.errors)\n            ? new ApolloError({ graphQLErrors: result.errors })\n            : result.error;\n    };\n    InternalState.prototype.getCurrentResult = function () {\n        if (!this.result) {\n            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function (result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult)\n            return queryResult;\n        var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n        this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData }));\n        if (!queryResult.error && isNonEmptyArray(result.errors)) {\n            queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n        if (result.partial &&\n            this.queryHookOptions.partialRefetch &&\n            !result.loading &&\n            (!result.data || Object.keys(result.data).length === 0) &&\n            this.observable.options.fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: NetworkStatus.refetch,\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}());\n//# sourceMappingURL=useQuery.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {\n    var value = getSnapshot();\n    if (__DEV__ &&\n        !didWarnUncachedGetSnapshot &&\n        value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n    }\n    var _a = React.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];\n    if (canUseLayoutEffect) {\n        React.useLayoutEffect(function () {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        }, [subscribe, value, getSnapshot]);\n    }\n    else {\n        Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n    }\n    React.useEffect(function () {\n        if (checkIfSnapshotChanged(inst)) {\n            forceUpdate({ inst: inst });\n        }\n        return subscribe(function handleStoreChange() {\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        });\n    }, [subscribe]);\n    return value;\n});\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n//# sourceMappingURL=useSyncExternalStore.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 33);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === 'FragmentDefinition') {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === 'OperationDefinition') {\n            switch (x.operation) {\n                case 'query':\n                    queries.push(x);\n                    break;\n                case 'mutation':\n                    mutations.push(x);\n                    break;\n                case 'subscription':\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    __DEV__ ? invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), 34);\n    __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") +\n        \"subscriptions and \".concat(mutations.length, \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 35);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") +\n        \"\".concat(definitions.length, \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 36);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nexport function verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") +\n        \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 37);\n}\n//# sourceMappingURL=index.js.map","export var isArray = Array.isArray;\nexport function isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n//# sourceMappingURL=arrays.js.map","import { maybe } from \"../globals/index.js\";\nexport var canUseWeakMap = typeof WeakMap === 'function' &&\n    maybe(function () { return navigator.product; }) !== 'ReactNative';\nexport var canUseWeakSet = typeof WeakSet === 'function';\nexport var canUseSymbol = typeof Symbol === 'function' &&\n    typeof Symbol.for === 'function';\nexport var canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nexport var canUseDOM = typeof maybe(function () { return window.document.createElement; }) === \"function\";\nvar usingJSDOM = maybe(function () { return navigator.userAgent.indexOf(\"jsdom\") >= 0; }) || false;\nexport var canUseLayoutEffect = canUseDOM && !usingJSDOM;\n//# sourceMappingURL=canUse.js.map","var toString = Object.prototype.toString;\nexport function cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            seen = seen || new Map;\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            seen = seen || new Map;\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n//# sourceMappingURL=cloneDeep.js.map","export function compact() {\n    var objects = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function (obj) {\n        if (!obj)\n            return;\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n}\n//# sourceMappingURL=compact.js.map","import { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\nexport function graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return isNonEmptyArray(errors);\n}\nexport function getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = isNonEmptyArray(result.errors)\n        ? result.errors.slice(0)\n        : [];\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n}\n//# sourceMappingURL=errorHandling.js.map","import { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n    return (isExecutionPatchIncrementalResult(value) ||\n        isExecutionPatchInitialResult(value));\n}\nexport function isApolloPayloadResult(value) {\n    return isNonNullObject(value) && \"payload\" in value;\n}\nexport function mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n//# sourceMappingURL=incrementalResult.js.map","var prefixCounts = new Map();\nexport function makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}\n//# sourceMappingURL=makeUniqueId.js.map","import \"../globals/index.js\";\nimport { isNonNullObject } from \"./objects.js\";\nfunction deepFreeze(value) {\n    var workSet = new Set([value]);\n    workSet.forEach(function (obj) {\n        if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function (name) {\n                if (isNonNullObject(obj[name]))\n                    workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (__DEV__ && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        }\n        catch (e) {\n            if (e instanceof TypeError)\n                return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nexport function maybeDeepFreeze(obj) {\n    if (__DEV__) {\n        deepFreeze(obj);\n    }\n    return obj;\n}\n//# sourceMappingURL=maybeDeepFreeze.js.map","import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for (var i = 1; i < count; ++i) {\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isNonNullObject(source) && isNonNullObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isNonNullObject(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                }\n                else {\n                    value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\nexport { DeepMerger };\n//# sourceMappingURL=mergeDeep.js.map","import { __assign } from \"tslib\";\nimport { compact } from \"./compact.js\";\nexport function mergeOptions(defaults, options) {\n    return compact(defaults, options, options.variables && {\n        variables: __assign(__assign({}, (defaults && defaults.variables)), options.variables),\n    });\n}\n//# sourceMappingURL=mergeOptions.js.map","export function isNonNullObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\n//# sourceMappingURL=objects.js.map","import { canUseAsyncIteratorSymbol } from \"./canUse.js\";\nexport function isNodeResponse(value) {\n    return !!value.body;\n}\nexport function isReadableStream(value) {\n    return !!value.getReader;\n}\nexport function isAsyncIterableIterator(value) {\n    return !!(canUseAsyncIteratorSymbol &&\n        value[Symbol.asyncIterator]);\n}\nexport function isStreamableBlob(value) {\n    return !!value.stream;\n}\nexport function isBlob(value) {\n    return !!value.arrayBuffer;\n}\nexport function isNodeReadableStream(value) {\n    return !!value.pipe;\n}\n//# sourceMappingURL=responseIterator.js.map","import { makeUniqueId } from \"./makeUniqueId.js\";\nexport function stringifyForDisplay(value) {\n    var undefId = makeUniqueId(\"stringifyForDisplay\");\n    return JSON.stringify(value, function (key, value) {\n        return value === void 0 ? undefId : value;\n    }).split(JSON.stringify(undefId)).join(\"<undefined>\");\n}\n//# sourceMappingURL=stringifyForDisplay.js.map","import global from \"./global.js\";\nimport { maybe } from \"./maybe.js\";\nvar __ = \"__\";\nvar GLOBAL_KEY = [__, __].join(\"DEV\");\nfunction getDEV() {\n    try {\n        return Boolean(__DEV__);\n    }\n    catch (_a) {\n        Object.defineProperty(global, GLOBAL_KEY, {\n            value: maybe(function () { return process.env.NODE_ENV; }) !== \"production\",\n            enumerable: false,\n            configurable: true,\n            writable: true,\n        });\n        return global[GLOBAL_KEY];\n    }\n}\nexport default getDEV();\n//# sourceMappingURL=DEV.js.map","import { remove } from \"ts-invariant/process/index.js\";\nimport { Source } from 'graphql';\nexport function removeTemporaryGlobals() {\n    return typeof Source === \"function\" ? remove() : remove();\n}\n//# sourceMappingURL=fix-graphql.js.map","import { maybe } from \"./maybe.js\";\nexport default (maybe(function () { return globalThis; }) ||\n    maybe(function () { return window; }) ||\n    maybe(function () { return self; }) ||\n    maybe(function () { return global; }) || maybe(function () { return maybe.constructor(\"return this\")(); }));\n//# sourceMappingURL=global.js.map","import { invariant, InvariantError } from \"ts-invariant\";\nimport DEV from \"./DEV.js\";\nexport { DEV };\nexport function checkDEV() {\n    __DEV__ ? invariant(\"boolean\" === typeof DEV, DEV) : invariant(\"boolean\" === typeof DEV, 39);\n}\nimport { removeTemporaryGlobals } from \"./fix-graphql.js\";\nremoveTemporaryGlobals();\nexport { maybe } from \"./maybe.js\";\nexport { default as global } from \"./global.js\";\nexport { invariant, InvariantError };\ncheckDEV();\n//# sourceMappingURL=index.js.map","export function maybe(thunk) {\n    try {\n        return thunk();\n    }\n    catch (_a) { }\n}\n//# sourceMappingURL=maybe.js.map","import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK, } from 'graphql';\nexport function shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            __DEV__ ? invariant(evaledValue !== void 0, \"Invalid variable referenced in @\".concat(directive.name.value, \" directive.\")) : invariant(evaledValue !== void 0, 40);\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nexport function getDirectiveNames(root) {\n    var names = [];\n    visit(root, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nexport var hasAnyDirectives = function (names, root) { return hasDirectives(names, root, false); };\nexport var hasAllDirectives = function (names, root) { return hasDirectives(names, root, true); };\nexport function hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    visit(root, {\n        Directive: function (node) {\n            if (nameSet.delete(node.name.value) &&\n                (!all || !nameSet.size)) {\n                return BREAK;\n            }\n        },\n    });\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n    return document && hasDirectives(['client', 'export'], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nexport function getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function (directive) {\n            if (!isInclusionDirective(directive))\n                return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            __DEV__ ? invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\".concat(directiveName, \" directive.\")) : invariant(directiveArguments && directiveArguments.length === 1, 41);\n            var ifArgument = directiveArguments[0];\n            __DEV__ ? invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\".concat(directiveName, \" directive.\")) : invariant(ifArgument.name && ifArgument.name.value === 'if', 42);\n            var ifValue = ifArgument.value;\n            __DEV__ ? invariant(ifValue &&\n                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\".concat(directiveName, \" directive must be a variable or a boolean value.\")) : invariant(ifValue &&\n                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 43);\n            result.push({ directive: directive, ifArgument: ifArgument });\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=directives.js.map","import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw __DEV__ ? new InvariantError(\"Found a \".concat(definition.operation, \" operation\").concat(definition.name ? \" named '\".concat(definition.name.value, \"'\") : '', \". \") +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(44);\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        __DEV__ ? invariant(fragments.length === 1, \"Found \".concat(fragments.length, \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\")) : invariant(fragments.length === 1, 45);\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case 'InlineFragment':\n            return selection;\n        case 'FragmentSpread': {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            __DEV__ ? invariant(fragment, \"No fragment named \".concat(fragmentName)) : invariant(fragment, 46);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map","import { invariant, InvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n    __DEV__ ? invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc && doc.kind === 'Document', 47);\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw __DEV__ ? new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new InvariantError(48);\n        }\n        return definition;\n    });\n    __DEV__ ? invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : invariant(operations.length <= 1, 49);\n    return doc;\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition';\n    })[0];\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && !!definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) {\n        return definition.kind === 'FragmentDefinition';\n    });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 50);\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    __DEV__ ? invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc.kind === 'Document', 51);\n    __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 52);\n    var fragmentDef = doc.definitions[0];\n    __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 53);\n    return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(54);\n}\nexport function getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function (def) {\n            if (def.defaultValue) {\n                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n}\n//# sourceMappingURL=getFromAST.js.map","import { InvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nexport function makeReference(id) {\n    return { __ref: String(id) };\n}\nexport function isReference(obj) {\n    return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\nexport function isDocumentNode(value) {\n    return (isNonNullObject(value) &&\n        value.kind === \"Document\" &&\n        Array.isArray(value.definitions));\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw __DEV__ ? new InvariantError(\"The inline argument \\\"\".concat(name.value, \"\\\" of kind \\\"\").concat(value.kind, \"\\\"\") +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.') : new InvariantError(55);\n    }\n}\nexport function storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n    if (args &&\n        directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives['connection']['key'], \"(\").concat(stringify(filteredArgs_1), \")\");\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(stringify(directives[key]), \")\");\n            }\n            else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function (s) {\n        var previous = stringify;\n        stringify = s;\n        return previous;\n    },\n});\nvar stringify = function defaultStringify(value) {\n    return JSON.stringify(value, stringifyReplacer);\n};\nfunction stringifyReplacer(_key, value) {\n    if (isNonNullObject(value) && !Array.isArray(value)) {\n        value = Object.keys(value).sort().reduce(function (copy, key) {\n            copy[key] = value[key];\n            return copy;\n        }, {});\n    }\n    return value;\n}\nexport function argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nexport function resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === '__typename') {\n                return result[resultKeyNameFromField(selection)];\n            }\n        }\n        else if (fragments) {\n            fragments.push(selection);\n        }\n        else {\n            fragments = [selection];\n        }\n    }\n    if (typeof result.__typename === 'string') {\n        return result.__typename;\n    }\n    if (fragments) {\n        for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === 'string') {\n                return typename;\n            }\n        }\n    }\n}\nexport function isField(selection) {\n    return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\n//# sourceMappingURL=storeUtils.js.map","import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit, Kind, } from 'graphql';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, } from \"./getFromAST.js\";\nimport { isField } from \"./storeUtils.js\";\nimport { createFragmentMap, } from \"./fragments.js\";\nimport { isArray } from \"../common/arrays.js\";\nvar TYPENAME_FIELD = {\n    kind: Kind.FIELD,\n    name: {\n        kind: Kind.NAME,\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every(function (selection) { return selection.kind === Kind.FRAGMENT_SPREAD &&\n        isEmpty(fragmentMap[selection.name.value], fragmentMap); });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    var nameSet = new Set();\n    var tests = [];\n    directives.forEach(function (directive) {\n        if (directive.name) {\n            nameSet.add(directive.name);\n        }\n        else if (directive.test) {\n            tests.push(directive.test);\n        }\n    });\n    return function (directive) { return (nameSet.has(directive.name.value) ||\n        tests.some(function (test) { return test(directive); })); };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) { key = defaultKey; }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, inUse = {\n                variables: new Set,\n                fragmentSpreads: new Set,\n            });\n        }\n        return inUse;\n    };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function (ancestors) {\n        for (var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p) {\n            if (isArray(ancestor))\n                continue;\n            if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        __DEV__ && invariant.error(\"Could not find operation or fragment\");\n        return null;\n    };\n    var operationCount = 0;\n    for (var i = doc.definitions.length - 1; i >= 0; --i) {\n        if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var hasRemoveDirective = directives.some(function (directive) { return directive.remove; });\n    var shouldRemoveField = function (nodeDirectives) { return (hasRemoveDirective &&\n        nodeDirectives &&\n        nodeDirectives.some(directiveMatcher)); };\n    var originalFragmentDefsByPath = new Map();\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function (node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        },\n    };\n    var docWithoutDirectiveSubtrees = visit(doc, {\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function () {\n                return false;\n            },\n        },\n        Variable: {\n            enter: function (node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            },\n        },\n        FragmentDefinition: {\n            enter: function (node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function (node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    return node;\n                }\n                if (operationCount > 0 &&\n                    node.selectionSet.selections.every(function (selection) { return (selection.kind === Kind.FIELD &&\n                        selection.name.value === '__typename'); })) {\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            },\n        },\n        Directive: {\n            leave: function (node) {\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            },\n        },\n    });\n    if (!firstVisitMadeChanges) {\n        return doc;\n    }\n    var populateTransitiveVars = function (inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function (childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function (varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function (def) {\n        if (def.kind === Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function (childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        }\n        else if (def.kind === Kind.FRAGMENT_DEFINITION &&\n            operationCount === 0 &&\n            !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    allFragmentNamesUsed.forEach(function (fragmentName) {\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function (childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function (fragmentName) { return !!(!allFragmentNamesUsed.has(fragmentName) ||\n        getInUseByFragmentName(fragmentName).removed); };\n    var enterVisitor = {\n        enter: function (node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        },\n    };\n    return nullIfDocIsEmpty(visit(docWithoutDirectiveSubtrees, {\n        FragmentSpread: enterVisitor,\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function (node) {\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions.filter(function (varDef) { return usedVariableNames_1.has(varDef.variable.name.value); }) });\n                    }\n                }\n            },\n        },\n    }));\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n    return visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign(__assign({}, node), { selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false) });\n            },\n        },\n    });\n}, {\n    added: function (field) {\n        return field === TYPENAME_FIELD;\n    },\n});\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (!!selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === Kind.VARIABLE &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) : [] });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nexport function buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    return modifiedDoc;\n}\n//# sourceMappingURL=transform.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\nvar Concast = (function (_super) {\n    __extends(Concast, _super);\n    function Concast(sources) {\n        var _this = _super.call(this, function (observer) {\n            _this.addObserver(observer);\n            return function () { return _this.removeObserver(observer); };\n        }) || this;\n        _this.observers = new Set();\n        _this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        _this.handlers = {\n            next: function (result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\"next\", result];\n                    _this.notify(\"next\", result);\n                    iterateObserversSafely(_this.observers, \"next\", result);\n                }\n            },\n            error: function (error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    if (sub)\n                        setTimeout(function () { return sub.unsubscribe(); });\n                    _this.sub = null;\n                    _this.latest = [\"error\", error];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    iterateObserversSafely(_this.observers, \"error\", error);\n                }\n            },\n            complete: function () {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub)\n                            setTimeout(function () { return sub.unsubscribe(); });\n                        _this.sub = null;\n                        if (_this.latest &&\n                            _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        }\n                        else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        iterateObserversSafely(_this.observers, \"complete\");\n                    }\n                    else if (isPromiseLike(value)) {\n                        value.then(function (obs) { return _this.sub = obs.subscribe(_this.handlers); });\n                    }\n                    else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            },\n        };\n        _this.nextResultListeners = new Set();\n        _this.cancel = function (reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.complete();\n        };\n        _this.promise.catch(function (_) { });\n        if (typeof sources === \"function\") {\n            sources = [new Observable(sources)];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function (iterable) { return _this.start(iterable); }, _this.handlers.error);\n        }\n        else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function (sources) {\n        if (this.sub !== void 0)\n            return;\n        this.sources = Array.from(sources);\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function (observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            if (this.sub === null &&\n                nextOrError === \"next\" &&\n                observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function (observer) {\n        if (!this.observers.has(observer)) {\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function (observer) {\n        if (this.observers.delete(observer) &&\n            this.observers.size < 1) {\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function (method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            this.nextResultListeners = new Set;\n            nextResultListeners.forEach(function (listener) { return listener(method, arg); });\n        }\n    };\n    Concast.prototype.beforeNext = function (callback) {\n        var called = false;\n        this.nextResultListeners.add(function (method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(Observable));\nexport { Concast };\nfixObservableSubclass(Concast);\n//# sourceMappingURL=Concast.js.map","import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeCallbackCount = 0;\n        var completed = false;\n        var promiseQueue = {\n            then: function (callback) {\n                return new Promise(function (resolve) { return resolve(callback()); });\n            },\n        };\n        function makeCallback(examiner, delegate) {\n            if (examiner) {\n                return function (arg) {\n                    ++activeCallbackCount;\n                    var both = function () { return examiner(arg); };\n                    promiseQueue = promiseQueue.then(both, both).then(function (result) {\n                        --activeCallbackCount;\n                        next && next.call(observer, result);\n                        if (completed) {\n                            handler.complete();\n                        }\n                    }, function (error) {\n                        --activeCallbackCount;\n                        throw error;\n                    }).catch(function (caught) {\n                        error && error.call(observer, caught);\n                    });\n                };\n            }\n            else {\n                return function (arg) { return delegate && delegate.call(observer, arg); };\n            }\n        }\n        var handler = {\n            next: makeCallback(mapFn, next),\n            error: makeCallback(catchFn, error),\n            complete: function () {\n                completed = true;\n                if (!activeCallbackCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n//# sourceMappingURL=asyncMap.js.map","export function iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\n//# sourceMappingURL=iteration.js.map","import { Observable } from \"./Observable.js\";\nimport { canUseSymbol } from \"../common/canUse.js\";\nexport function fixObservableSubclass(subclass) {\n    function set(key) {\n        Object.defineProperty(subclass, key, { value: Observable });\n    }\n    if (canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    set(\"@@species\");\n    return subclass;\n}\n//# sourceMappingURL=subclassing.js.map","export var version = '3.7.17';\n//# sourceMappingURL=version.js.map","import * as React from \"react\";\nfunction ArrowRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M12.97 3.97a.75.75 0 011.06 0l7.5 7.5a.75.75 0 010 1.06l-7.5 7.5a.75.75 0 11-1.06-1.06l6.22-6.22H3a.75.75 0 010-1.5h16.19l-6.22-6.22a.75.75 0 010-1.06z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ArrowRightIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ChevronLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M7.72 12.53a.75.75 0 010-1.06l7.5-7.5a.75.75 0 111.06 1.06L9.31 12l6.97 6.97a.75.75 0 11-1.06 1.06l-7.5-7.5z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ChevronLeftIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M16.28 11.47a.75.75 0 010 1.06l-7.5 7.5a.75.75 0 01-1.06-1.06L14.69 12 7.72 5.03a.75.75 0 011.06-1.06l7.5 7.5z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","import { Slot } from \"./slot.js\";\nexport { Slot };\nexport const { bind, noContext } = Slot;\n// Like global.setTimeout, except the callback runs with captured context.\nexport { setTimeoutWithContext as setTimeout };\nfunction setTimeoutWithContext(callback, delay) {\n    return setTimeout(bind(callback), delay);\n}\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nexport function asyncFromGen(genFn) {\n    return function () {\n        const gen = genFn.apply(this, arguments);\n        const boundNext = bind(gen.next);\n        const boundThrow = bind(gen.throw);\n        return new Promise((resolve, reject) => {\n            function invoke(method, argument) {\n                try {\n                    var result = method.call(gen, argument);\n                }\n                catch (error) {\n                    return reject(error);\n                }\n                const next = result.done ? resolve : invokeNext;\n                if (isPromiseLike(result.value)) {\n                    result.value.then(next, result.done ? reject : invokeThrow);\n                }\n                else {\n                    next(result.value);\n                }\n            }\n            const invokeNext = (value) => invoke(boundNext, value);\n            const invokeThrow = (error) => invoke(boundThrow, error);\n            invokeNext();\n        });\n    };\n}\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nconst wrappedFibers = [];\nexport function wrapYieldingFiberMethods(Fiber) {\n    // There can be only one implementation of Fiber per process, so this array\n    // should never grow longer than one element.\n    if (wrappedFibers.indexOf(Fiber) < 0) {\n        const wrap = (obj, method) => {\n            const fn = obj[method];\n            obj[method] = function () {\n                return noContext(fn, arguments, this);\n            };\n        };\n        // These methods can yield, according to\n        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n        wrap(Fiber, \"yield\");\n        wrap(Fiber.prototype, \"run\");\n        wrap(Fiber.prototype, \"throwInto\");\n        wrappedFibers.push(Fiber);\n    }\n    return Fiber;\n}\n//# sourceMappingURL=index.js.map","// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext = null;\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE = {};\nlet idCounter = 1;\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot {\n    constructor() {\n        // If you have a Slot object, you can find out its slot.id, but you cannot\n        // guess the slot.id of a Slot you don't have access to, thanks to the\n        // randomized suffix.\n        this.id = [\n            \"slot\",\n            idCounter++,\n            Date.now(),\n            Math.random().toString(36).slice(2),\n        ].join(\":\");\n    }\n    hasValue() {\n        for (let context = currentContext; context; context = context.parent) {\n            // We use the Slot object iself as a key to its value, which means the\n            // value cannot be obtained without a reference to the Slot object.\n            if (this.id in context.slots) {\n                const value = context.slots[this.id];\n                if (value === MISSING_VALUE)\n                    break;\n                if (context !== currentContext) {\n                    // Cache the value in currentContext.slots so the next lookup will\n                    // be faster. This caching is safe because the tree of contexts and\n                    // the values of the slots are logically immutable.\n                    currentContext.slots[this.id] = value;\n                }\n                return true;\n            }\n        }\n        if (currentContext) {\n            // If a value was not found for this Slot, it's never going to be found\n            // no matter how many times we look it up, so we might as well cache\n            // the absence of the value, too.\n            currentContext.slots[this.id] = MISSING_VALUE;\n        }\n        return false;\n    }\n    getValue() {\n        if (this.hasValue()) {\n            return currentContext.slots[this.id];\n        }\n    }\n    withValue(value, callback, \n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args, thisArg) {\n        const slots = {\n            __proto__: null,\n            [this.id]: value,\n        };\n        const parent = currentContext;\n        currentContext = { parent, slots };\n        try {\n            // Function.prototype.apply allows the arguments array argument to be\n            // omitted or undefined, so args! is fine here.\n            return callback.apply(thisArg, args);\n        }\n        finally {\n            currentContext = parent;\n        }\n    }\n    // Capture the current context and wrap a callback function so that it\n    // reestablishes the captured context when called.\n    static bind(callback) {\n        const context = currentContext;\n        return function () {\n            const saved = currentContext;\n            try {\n                currentContext = context;\n                return callback.apply(this, arguments);\n            }\n            finally {\n                currentContext = saved;\n            }\n        };\n    }\n    // Immediately run a callback function without any captured context.\n    static noContext(callback, \n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args, thisArg) {\n        if (currentContext) {\n            const saved = currentContext;\n            try {\n                currentContext = null;\n                // Function.prototype.apply allows the arguments array argument to be\n                // omitted or undefined, so args! is fine here.\n                return callback.apply(thisArg, args);\n            }\n            finally {\n                currentContext = saved;\n            }\n        }\n        else {\n            return callback.apply(thisArg, args);\n        }\n    }\n};\nfunction maybe(fn) {\n    try {\n        return fn();\n    }\n    catch (ignored) { }\n}\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable property of the globalThis object. This obfuscation does\n// nothing to prevent access to the Slot class, but at least it ensures the\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\n// of the @wry/context package (hopefully just one) will share the same Slot\n// implementation. Since the first copy of the @wry/context package to be\n// imported wins, this technique imposes a steep cost for any future breaking\n// changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\nconst host = \n// Prefer globalThis when available.\n// https://github.com/benjamn/wryware/issues/347\nmaybe(() => globalThis) ||\n    // Fall back to global, which works in Node.js and may be converted by some\n    // bundlers to the appropriate identifier (window, self, ...) depending on the\n    // bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\n    maybe(() => global) ||\n    // Otherwise, use a dummy host that's local to this module. We used to fall\n    // back to using the Array constructor as a namespace, but that was flagged in\n    // https://github.com/benjamn/wryware/issues/347, and can be avoided.\n    Object.create(null);\n// Whichever globalHost we're using, make TypeScript happy about the additional\n// globalKey property.\nconst globalHost = host;\nexport const Slot = globalHost[globalKey] ||\n    // Earlier versions of this package stored the globalKey property on the Array\n    // constructor, so we check there as well, to prevent Slot class duplication.\n    Array[globalKey] ||\n    (function (Slot) {\n        try {\n            Object.defineProperty(globalHost, globalKey, {\n                value: Slot,\n                enumerable: false,\n                writable: false,\n                // When it was possible for globalHost to be the Array constructor (a\n                // legacy Slot dedup strategy), it was important for the property to be\n                // configurable:true so it could be deleted. That does not seem to be as\n                // important when globalHost is the global object, but I don't want to\n                // cause similar problems again, and configurable:true seems safest.\n                // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\n                configurable: true\n            });\n        }\n        finally {\n            return Slot;\n        }\n    })(makeSlotClass());\n//# sourceMappingURL=slot.js.map","const { toString, hasOwnProperty } = Object.prototype;\nconst fnToStr = Function.prototype.toString;\nconst previousComparisons = new Map();\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a, b) {\n    try {\n        return check(a, b);\n    }\n    finally {\n        previousComparisons.clear();\n    }\n}\n// Allow default imports as well.\nexport default equal;\nfunction check(a, b) {\n    // If the two values are strictly equal, our job is easy.\n    if (a === b) {\n        return true;\n    }\n    // Object.prototype.toString returns a representation of the runtime type of\n    // the given value that is considerably more precise than typeof.\n    const aTag = toString.call(a);\n    const bTag = toString.call(b);\n    // If the runtime types of a and b are different, they could maybe be equal\n    // under some interpretation of equality, but for simplicity and performance\n    // we just return false instead.\n    if (aTag !== bTag) {\n        return false;\n    }\n    switch (aTag) {\n        case '[object Array]':\n            // Arrays are a lot like other objects, but we can cheaply compare their\n            // lengths as a short-cut before comparing their elements.\n            if (a.length !== b.length)\n                return false;\n        // Fall through to object case...\n        case '[object Object]': {\n            if (previouslyCompared(a, b))\n                return true;\n            const aKeys = definedKeys(a);\n            const bKeys = definedKeys(b);\n            // If `a` and `b` have a different number of enumerable keys, they\n            // must be different.\n            const keyCount = aKeys.length;\n            if (keyCount !== bKeys.length)\n                return false;\n            // Now make sure they have the same keys.\n            for (let k = 0; k < keyCount; ++k) {\n                if (!hasOwnProperty.call(b, aKeys[k])) {\n                    return false;\n                }\n            }\n            // Finally, check deep equality of all child properties.\n            for (let k = 0; k < keyCount; ++k) {\n                const key = aKeys[k];\n                if (!check(a[key], b[key])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        case '[object Error]':\n            return a.name === b.name && a.message === b.message;\n        case '[object Number]':\n            // Handle NaN, which is !== itself.\n            if (a !== a)\n                return b !== b;\n        // Fall through to shared +a === +b case...\n        case '[object Boolean]':\n        case '[object Date]':\n            return +a === +b;\n        case '[object RegExp]':\n        case '[object String]':\n            return a == `${b}`;\n        case '[object Map]':\n        case '[object Set]': {\n            if (a.size !== b.size)\n                return false;\n            if (previouslyCompared(a, b))\n                return true;\n            const aIterator = a.entries();\n            const isMap = aTag === '[object Map]';\n            while (true) {\n                const info = aIterator.next();\n                if (info.done)\n                    break;\n                // If a instanceof Set, aValue === aKey.\n                const [aKey, aValue] = info.value;\n                // So this works the same way for both Set and Map.\n                if (!b.has(aKey)) {\n                    return false;\n                }\n                // However, we care about deep equality of values only when dealing\n                // with Map structures.\n                if (isMap && !check(aValue, b.get(aKey))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        case '[object Uint16Array]':\n        case '[object Uint8Array]': // Buffer, in Node.js.\n        case '[object Uint32Array]':\n        case '[object Int32Array]':\n        case '[object Int8Array]':\n        case '[object Int16Array]':\n        case '[object ArrayBuffer]':\n            // DataView doesn't need these conversions, but the equality check is\n            // otherwise the same.\n            a = new Uint8Array(a);\n            b = new Uint8Array(b);\n        // Fall through...\n        case '[object DataView]': {\n            let len = a.byteLength;\n            if (len === b.byteLength) {\n                while (len-- && a[len] === b[len]) {\n                    // Keep looping as long as the bytes are equal.\n                }\n            }\n            return len === -1;\n        }\n        case '[object AsyncFunction]':\n        case '[object GeneratorFunction]':\n        case '[object AsyncGeneratorFunction]':\n        case '[object Function]': {\n            const aCode = fnToStr.call(a);\n            if (aCode !== fnToStr.call(b)) {\n                return false;\n            }\n            // We consider non-native functions equal if they have the same code\n            // (native functions require === because their code is censored).\n            // Note that this behavior is not entirely sound, since !== function\n            // objects with the same code can behave differently depending on\n            // their closure scope. However, any function can behave differently\n            // depending on the values of its input arguments (including this)\n            // and its calling context (including its closure scope), even\n            // though the function object is === to itself; and it is entirely\n            // possible for functions that are not === to behave exactly the\n            // same under all conceivable circumstances. Because none of these\n            // factors are statically decidable in JavaScript, JS function\n            // equality is not well-defined. This ambiguity allows us to\n            // consider the best possible heuristic among various imperfect\n            // options, and equating non-native functions that have the same\n            // code has enormous practical benefits, such as when comparing\n            // functions that are repeatedly passed as fresh function\n            // expressions within objects that are otherwise deeply equal. Since\n            // any function created from the same syntactic expression (in the\n            // same code location) will always stringify to the same code\n            // according to fnToStr.call, we can reasonably expect these\n            // repeatedly passed function expressions to have the same code, and\n            // thus behave \"the same\" (with all the caveats mentioned above),\n            // even though the runtime function objects are !== to one another.\n            return !endsWith(aCode, nativeCodeSuffix);\n        }\n    }\n    // Otherwise the values are not equal.\n    return false;\n}\nfunction definedKeys(obj) {\n    // Remember that the second argument to Array.prototype.filter will be\n    // used as `this` within the callback function.\n    return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey(key) {\n    return this[key] !== void 0;\n}\nconst nativeCodeSuffix = \"{ [native code] }\";\nfunction endsWith(full, suffix) {\n    const fromIndex = full.length - suffix.length;\n    return fromIndex >= 0 &&\n        full.indexOf(suffix, fromIndex) === fromIndex;\n}\nfunction previouslyCompared(a, b) {\n    // Though cyclic references can make an object graph appear infinite from the\n    // perspective of a depth-first traversal, the graph still contains a finite\n    // number of distinct object references. We use the previousComparisons cache\n    // to avoid comparing the same pair of object references more than once, which\n    // guarantees termination (even if we end up comparing every object in one\n    // graph to every object in the other graph, which is extremely unlikely),\n    // while still allowing weird isomorphic structures (like rings with different\n    // lengths) a chance to pass the equality test.\n    let bSet = previousComparisons.get(a);\n    if (bSet) {\n        // Return true here because we can be sure false will be returned somewhere\n        // else if the objects are not equivalent.\n        if (bSet.has(b))\n            return true;\n    }\n    else {\n        previousComparisons.set(a, bSet = new Set);\n    }\n    bSet.add(b);\n    return false;\n}\n//# sourceMappingURL=index.js.map","// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\nconst { hasOwnProperty } = Object.prototype;\nexport class Trie {\n    constructor(weakness = true, makeData = defaultMakeData) {\n        this.weakness = weakness;\n        this.makeData = makeData;\n    }\n    lookup(...array) {\n        return this.lookupArray(array);\n    }\n    lookupArray(array) {\n        let node = this;\n        forEach.call(array, key => node = node.getChildTrie(key));\n        return hasOwnProperty.call(node, \"data\")\n            ? node.data\n            : node.data = this.makeData(slice.call(array));\n    }\n    peek(...array) {\n        return this.peekArray(array);\n    }\n    peekArray(array) {\n        let node = this;\n        for (let i = 0, len = array.length; node && i < len; ++i) {\n            const map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n            node = map && map.get(array[i]);\n        }\n        return node && node.data;\n    }\n    getChildTrie(key) {\n        const map = this.weakness && isObjRef(key)\n            ? this.weak || (this.weak = new WeakMap())\n            : this.strong || (this.strong = new Map());\n        let child = map.get(key);\n        if (!child)\n            map.set(key, child = new Trie(this.weakness, this.makeData));\n        return child;\n    }\n}\nfunction isObjRef(value) {\n    switch (typeof value) {\n        case \"object\":\n            if (value === null)\n                break;\n        // Fall through to return true...\n        case \"function\":\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=index.js.map","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delay\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: 0,\n            delay,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","import { sync, cancelSync } from '../../../frameloop/index.mjs';\nimport { frameData } from '../../../frameloop/data.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),\n    };\n};\n\nexport { frameloopDriver };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        resolveFinishedPromise && resolveFinishedPromise();\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            currentTime = (timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay;\n        const isInDelayPhase = timeWithoutDelay < 0;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = currentTime >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" ||\n                (playState === \"running\" && done) ||\n                (speed < 0 && currentTime <= 0));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","import { cancelSync, sync } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => animation.cancel();\n    const safeCancel = () => {\n        sync.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelSync.update(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n}\n\nexport { createAcceleratedAnimation };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","const featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nexport { supports };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { sync } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        complex.test(value) && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","function isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\nexport { isAnimationControls };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isZero, getZeroUnit } from './transitions.mjs';\nimport { fillWildcardKeyframes } from './wildcards.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let origin = transition.from !== undefined ? transition.from : value.get();\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */\n        origin = getAnimatableNone(valueName, target);\n    }\n    else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    }\n    else if (!Array.isArray(target) &&\n        isZero(target) &&\n        typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    /**\n     * If the target has been defined as a series of keyframes\n     */\n    if (Array.isArray(target)) {\n        return fillWildcardKeyframes(origin, target);\n    }\n    else {\n        return [origin, target];\n    }\n}\n\nexport { getKeyframes };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction isZero(value) {\n    return (value === 0 ||\n        (typeof value === \"string\" &&\n            parseFloat(value) === 0 &&\n            value.indexOf(\" \") === -1));\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\"\n        ? 0\n        : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, getZeroUnit, isTransitionDefined, isZero };\n","function fillWildcardKeyframes(origin, [...keyframes]) {\n    /**\n     * Ensure an wildcard keyframes are hydrated by the origin.\n     */\n    for (let i = 0; i < keyframes.length; i++) {\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? origin : keyframes[i - 1];\n        }\n    }\n    return keyframes;\n}\n\nexport { fillWildcardKeyframes };\n","import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));\n}\n\nexport { PopChild };\n","import * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    let [forceRender] = useForceUpdate();\n    const forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach((key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        const onExit = () => {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { loadExternalIsValidProp } from '../../render/dom/utils/filter-props.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\n\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction MotionConfig({ children, isValidProp, ...config }) {\n    isValidProp && loadExternalIsValidProp(isValidProp);\n    /**\n     * Inherit props from any parent MotionConfig components\n     */\n    config = { ...useContext(MotionConfigContext), ...config };\n    /**\n     * Don't allow isStatic to change between renders as it affects how many hooks\n     * motion components fire.\n     */\n    config.isStatic = useConstant(() => config.isStatic);\n    /**\n     * Creating a new config context object will re-render every `motion` component\n     * every time it renders. So we only want to create a new one sparingly.\n     */\n    const context = useMemo(() => config, [JSON.stringify(config.transition), config.transformPagePoint, config.reducedMotion]);\n    return (React.createElement(MotionConfigContext.Provider, { value: context }, children));\n}\n\nexport { MotionConfig };\n","import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nexport { circIn, circInOut, circOut };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two arrays, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let toRun = [];\n    let toRunNextFrame = [];\n    /**\n     *\n     */\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            // If the buffer doesn't already contain this callback, add it\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                // If we're adding it to the currently running buffer, update its measured size\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            // Clear the next frame list\n            toRunNextFrame.length = 0;\n            // Execute this frame\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","const frameData = {\n    delta: 0,\n    timestamp: 0,\n    isProcessing: false,\n};\n\nexport { frameData };\n","import { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frameData);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? 1000 / 60\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    frameData.isProcessing = true;\n    stepsOrder.forEach(processStep);\n    frameData.isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        requestAnimationFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!frameData.isProcessing)\n        requestAnimationFrame(processFrame);\n};\n\nexport { cancelSync, flushSync, sync };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                sync.update(() => onDragStart(event, info));\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            sync.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { sync } from '../frameloop/index.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            sync.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            sync.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        sync.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    sync.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { sync } from '../frameloop/index.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                sync.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            sync.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            sync.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            sync.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { sync } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = isStatic ? undefined : useProjectionId();\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    useIsomorphicLayoutEffect(() => {\n        visualElement && visualElement.render();\n    });\n    useEffect(() => {\n        visualElement && visualElement.updateFeatures();\n    });\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    const useAnimateChangesEffect = window.HandoffAppearAnimations\n        ? useIsomorphicLayoutEffect\n        : useEffect;\n    useAnimateChangesEffect(() => {\n        if (visualElement && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nlet id = 1;\nfunction useProjectionId() {\n    return useConstant(() => {\n        if (globalProjectionState.hasEverUpdated) {\n            return id++;\n        }\n    });\n}\n\nexport { useProjectionId };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        const containsCSSVariables = latest.includes(\"var(\");\n        const cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, (match) => {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        let output = template(shadow);\n        if (containsCSSVariables) {\n            let i = 0;\n            output = output.replace(varToken, () => {\n                const cssVariable = cssVariables[i];\n                i++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nexport { correctBoxShadow };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update(this.props, this.prevProps);\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","import { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, projectionId, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst isCSSVariableToken = checkStringStartsWith(\"var(--\");\n\nexport { isCSSVariableName, isCSSVariableToken };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            try {\n                renderState.dimensions =\n                    typeof instance.getBBox ===\n                        \"function\"\n                        ? instance.getBBox()\n                        : instance.getBoundingClientRect();\n            }\n            catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                };\n            }\n            buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n            renderSVG(instance, renderState);\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = key === \"x\" || key === \"y\" ? \"attr\" + key.toUpperCase() : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.11.6\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.11.6 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","const clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nexport { clamp };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelSync.read(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    sync.read(checkElapsed, true);\n    return () => cancelSync.read(checkElapsed);\n}\n\nexport { delay };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { invariant } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { clamp } from './clamp.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        if (color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","function isRefObject(ref) {\n    return (typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","import { mix } from './mix.mjs';\nimport { invariant } from './errors.mjs';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nimport { hex } from '../value/types/color/hex.mjs';\nimport { rgba } from '../value/types/color/rgba.mjs';\nimport { hsla } from '../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nexport { mix };\n","const noop = (any) => any;\n\nexport { noop };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","import { mix } from '../mix.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mix(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { sync } from '../frameloop/index.mjs';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => sync.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","const warned = new Set();\nfunction warnOnce(condition, message, element) {\n    if (condition || warned.has(message))\n        return;\n    console.warn(message);\n    if (element)\n        console.warn(element);\n    warned.add(message);\n}\n\nexport { warnOnce };\n","import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"10.11.6\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                sync.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nconst colorToken = \"${c}\";\nconst numberToken = \"${n}\";\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nfunction analyseComplexValue(v) {\n    if (typeof v === \"number\")\n        v = `${v}`;\n    const values = [];\n    let numColors = 0;\n    let numNumbers = 0;\n    const colors = v.match(colorRegex);\n    if (colors) {\n        numColors = colors.length;\n        // Strip colors from input so they're not picked up by number regex.\n        // There's a better way to combine these regex searches, but its beyond my regex skills\n        v = v.replace(colorRegex, colorToken);\n        values.push(...colors.map(color.parse));\n    }\n    const numbers = v.match(floatRegex);\n    if (numbers) {\n        numNumbers = numbers.length;\n        v = v.replace(floatRegex, numberToken);\n        values.push(...numbers.map(number.parse));\n    }\n    return { values, numColors, numNumbers, tokenised: v };\n}\nfunction parse(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors\n                ? color.transform(v[i])\n                : sanitize(v[i]));\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parse(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = { test, parse, createTransformer, getAnimatableNone };\n\nexport { analyseComplexValue, complex };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  globalThis.process && globalThis.process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n","/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n","import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n","/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n","import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n","/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n","import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n","import { __extends } from \"tslib\";\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n} : _a;\nvar InvariantError = /** @class */ (function (_super) {\n    __extends(InvariantError, _super);\n    function InvariantError(message) {\n        if (message === void 0) { message = genericMessage; }\n        var _this = _super.call(this, typeof message === \"number\"\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\n            : message) || this;\n        _this.framesToPop = 1;\n        _this.name = genericMessage;\n        setPrototypeOf(_this, InvariantError.prototype);\n        return _this;\n    }\n    return InvariantError;\n}(Error));\nexport { InvariantError };\nexport function invariant(condition, message) {\n    if (!condition) {\n        throw new InvariantError(message);\n    }\n}\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\nfunction wrapConsoleMethod(name) {\n    return function () {\n        if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n            // Default to console.log if this host environment happens not to provide\n            // all the console.* methods we need.\n            var method = console[name] || console.log;\n            return method.apply(console, arguments);\n        }\n    };\n}\n(function (invariant) {\n    invariant.debug = wrapConsoleMethod(\"debug\");\n    invariant.log = wrapConsoleMethod(\"log\");\n    invariant.warn = wrapConsoleMethod(\"warn\");\n    invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\nexport function setVerbosity(level) {\n    var old = verbosityLevels[verbosityLevel];\n    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n    return old;\n}\nexport default invariant;\n//# sourceMappingURL=invariant.js.map","function maybe(thunk) {\n  try { return thunk() } catch (_) {}\n}\n\nvar safeGlobal = (\n  maybe(function() { return globalThis }) ||\n  maybe(function() { return window }) ||\n  maybe(function() { return self }) ||\n  maybe(function() { return global }) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function() { return maybe.constructor(\"return this\")() })\n);\n\nvar needToRemove = false;\n\nexport function install() {\n  if (safeGlobal &&\n      !maybe(function() { return process.env.NODE_ENV }) &&\n      !maybe(function() { return process })) {\n    Object.defineProperty(safeGlobal, \"process\", {\n      value: {\n        env: {\n          // This default needs to be \"production\" instead of \"development\", to\n          // avoid the problem https://github.com/graphql/graphql-js/pull/2894\n          // will eventually solve, once merged and released.\n          NODE_ENV: \"production\",\n        },\n      },\n      // Let anyone else change global.process as they see fit, but hide it from\n      // Object.keys(global) enumeration.\n      configurable: true,\n      enumerable: false,\n      writable: true,\n    });\n    needToRemove = true;\n  }\n}\n\n// Call install() at least once, when this module is imported.\ninstall();\n\nexport function remove() {\n  if (needToRemove) {\n    delete safeGlobal.process;\n    needToRemove = false;\n  }\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n// === Symbol Support ===\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species'); // === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(observer, subscriber) {\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.unsubscribe = function unsubscribe() {\n    if (this._state !== 'closed') {\n      closeSubscription(this);\n      cleanupSubscription(this);\n    }\n  };\n\n  _createClass(Subscription, [{\n    key: \"closed\",\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = /*#__PURE__*/function () {\n  function SubscriptionObserver(subscription) {\n    this._subscription = subscription;\n  }\n\n  var _proto2 = SubscriptionObserver.prototype;\n\n  _proto2.next = function next(value) {\n    onNotify(this._subscription, 'next', value);\n  };\n\n  _proto2.error = function error(value) {\n    onNotify(this._subscription, 'error', value);\n  };\n\n  _proto2.complete = function complete() {\n    onNotify(this._subscription, 'complete');\n  };\n\n  _createClass(SubscriptionObserver, [{\n    key: \"closed\",\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = /*#__PURE__*/function () {\n  function Observable(subscriber) {\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  var _proto3 = Observable.prototype;\n\n  _proto3.subscribe = function subscribe(observer) {\n    if (typeof observer !== 'object' || observer === null) {\n      observer = {\n        next: observer,\n        error: arguments[1],\n        complete: arguments[2]\n      };\n    }\n\n    return new Subscription(observer, this._subscriber);\n  };\n\n  _proto3.forEach = function forEach(fn) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof fn !== 'function') {\n        reject(new TypeError(fn + ' is not a function'));\n        return;\n      }\n\n      function done() {\n        subscription.unsubscribe();\n        resolve();\n      }\n\n      var subscription = _this.subscribe({\n        next: function (value) {\n          try {\n            fn(value, done);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  };\n\n  _proto3.map = function map(fn) {\n    var _this2 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this2.subscribe({\n        next: function (value) {\n          try {\n            value = fn(value);\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.filter = function filter(fn) {\n    var _this3 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this3.subscribe({\n        next: function (value) {\n          try {\n            if (!fn(value)) return;\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.reduce = function reduce(fn) {\n    var _this4 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    var hasSeed = arguments.length > 1;\n    var hasValue = false;\n    var seed = arguments[1];\n    var acc = seed;\n    return new C(function (observer) {\n      return _this4.subscribe({\n        next: function (value) {\n          var first = !hasValue;\n          hasValue = true;\n\n          if (!first || hasSeed) {\n            try {\n              acc = fn(acc, value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          } else {\n            acc = value;\n          }\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n          observer.next(acc);\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.concat = function concat() {\n    var _this5 = this;\n\n    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n      sources[_key] = arguments[_key];\n    }\n\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscription;\n      var index = 0;\n\n      function startNext(next) {\n        subscription = next.subscribe({\n          next: function (v) {\n            observer.next(v);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (index === sources.length) {\n              subscription = undefined;\n              observer.complete();\n            } else {\n              startNext(C.from(sources[index++]));\n            }\n          }\n        });\n      }\n\n      startNext(_this5);\n      return function () {\n        if (subscription) {\n          subscription.unsubscribe();\n          subscription = undefined;\n        }\n      };\n    });\n  };\n\n  _proto3.flatMap = function flatMap(fn) {\n    var _this6 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscriptions = [];\n\n      var outer = _this6.subscribe({\n        next: function (value) {\n          if (fn) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          }\n\n          var inner = C.from(value).subscribe({\n            next: function (value) {\n              observer.next(value);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              var i = subscriptions.indexOf(inner);\n              if (i >= 0) subscriptions.splice(i, 1);\n              completeIfDone();\n            }\n          });\n          subscriptions.push(inner);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          completeIfDone();\n        }\n      });\n\n      function completeIfDone() {\n        if (outer.closed && subscriptions.length === 0) observer.complete();\n      }\n\n      return function () {\n        subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n        outer.unsubscribe();\n      };\n    });\n  };\n\n  _proto3[SymbolObservable] = function () {\n    return this;\n  };\n\n  Observable.from = function from(x) {\n    var C = typeof this === 'function' ? this : Observable;\n    if (x == null) throw new TypeError(x + ' is not an object');\n    var method = getMethod(x, SymbolObservable);\n\n    if (method) {\n      var observable = method.call(x);\n      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n      if (isObservable(observable) && observable.constructor === C) return observable;\n      return new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n\n    if (hasSymbol('iterator')) {\n      method = getMethod(x, SymbolIterator);\n\n      if (method) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {\n              var item = _step.value;\n              observer.next(item);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n    }\n\n    if (Array.isArray(x)) {\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < x.length; ++i) {\n            observer.next(x[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n\n    throw new TypeError(x + ' is not observable');\n  };\n\n  Observable.of = function of() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    var C = typeof this === 'function' ? this : Observable;\n    return new C(function (observer) {\n      enqueue(function () {\n        if (observer.closed) return;\n\n        for (var i = 0; i < items.length; ++i) {\n          observer.next(items[i]);\n          if (observer.closed) return;\n        }\n\n        observer.complete();\n      });\n    });\n  };\n\n  _createClass(Observable, null, [{\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}\n\nexport { Observable };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"block-terms/index\": 0,\n\t\"block-terms/style-index\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkncmazfaustcore\"] = self[\"webpackChunkncmazfaustcore\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"block-terms/style-index\"], () => (__webpack_require__(\"./src/block-terms/index.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["useFragment","_documentNode","fragmentType","makeFragmentData","data","_fragment","isFragmentReady","queryNode","fragmentNode","deferredFields","__meta__","fragDef","definitions","fragName","name","value","fields","length","every","field","types","documents","NcmazFcTermCardFieldsFragmentDoc","NcmazFcTermsCardFieldsFragmentDoc","NcmazFcPostsEdegsFieldsFragmentDoc","NcmazFcPostCardFieldsFragmentDoc","NcmazFcImageFieldsFragmentDoc","NcmazFcPostMetaFieldsFragmentDoc","PostsWithVariablesQueryDocument","TermsWithVariablesQueryDocument","graphql","source","_source","AvatarRatingEnum","CategoryIdType","CommentNodeIdTypeEnum","CommentStatusEnum","CommentsConnectionOrderbyEnum","ContentNodeIdTypeEnum","ContentTypeEnum","ContentTypeIdTypeEnum","ContentTypesOfCategoryEnum","ContentTypesOfPostFormatEnum","ContentTypesOfTagEnum","GlobalStylesheetTypesEnum","MediaItemIdType","MediaItemSizeEnum","MediaItemStatusEnum","MenuItemNodeIdTypeEnum","MenuLocationEnum","MenuNodeIdTypeEnum","MimeTypeEnum","OrderEnum","PageIdType","PluginStatusEnum","PostFormatIdType","PostIdType","PostObjectFieldFormatEnum","PostObjectsConnectionDateColumnEnum","PostObjectsConnectionOrderbyEnum","PostStatusEnum","RelationEnum","TagIdType","TaxQueryField","TaxQueryOperator","TaxonomyEnum","TaxonomyIdTypeEnum","TermNodeIdTypeEnum","TermObjectsConnectionOrderbyEnum","UserNodeIdTypeEnum","UserRoleEnum","UsersConnectionOrderbyEnum","UsersConnectionSearchColumnEnum","blokcAttrs","uniqueId","type","default","initTerms","order","orderBy","blockVariation","numberOfTags","showTagCounts","taxonomy","v1","v2","deprecated","React","useEffect","PanelBody","ToggleControl","SelectControl","RangeControl","__","InspectorControls","useBlockProps","useTermGqlQuery","TermOrderControl","SectionSliderNewCategories","MIN_TAGS","MAX_TAGS","Edit","props","attributes","setAttributes","dataLists","error","loading","variables","console","log","inspectorControls","createElement","title","className","label","options","onChange","__nextHasNoMarginBottom","selectedTaxonomy","checked","min","max","required","Fragment","JSON","stringify","terms","edges","categoryCardType","registerBlockType","save","metadata","client","ApolloProvider","Suspense","Spinner","edit","fallback","example","icon","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeMiterlimit","strokeLinecap","strokeLinejoin","orderOptions","newOrderBy","newOrder","split","Badge","color","href","getColorClass","hasHover","CLASSES","NcImage","CardCategory1","size","count","ncTaxonomyMeta","alt","containerClassName","src","featuredImage","sourceUrl","sizes","CardCategory2","index","CardCategory3","CardCategory4","ArrowRightIcon","CardCategory5","useState","useWindowSize","useSwipeable","AnimatePresence","motion","MotionConfig","variants","PrevBtn","NextBtn","MySlider","itemPerRow","renderItem","arrowBtnClass","currentIndex","setCurrentIndex","direction","setDirection","numberOfItems","setNumberOfitem","windowWidth","changeItemId","newVal","handlers","onSwipedLeft","onSwipedRight","trackMouse","isRTL","document","querySelector","getAttribute","transition","x","stiffness","damping","opacity","duration","ul","initial","custom","map","item","indx","li","animate","key","style","onClick","args","renderLoadingPlaceholder","includes","ChevronRightIcon","ChevronLeftIcon","renderCard","topIndex","undefined","node","useQuery","termsWithVariablesQueryDocument","orderby","first","Number","taxonomies","ApolloClient","InMemoryCache","gql","HttpLink","from","RetryLink","cache","addTypename","typePolicies","link","httpLink","uri","ncmazcoreJsData","graphQLBasePath","enter","center","exit"],"sourceRoot":""}