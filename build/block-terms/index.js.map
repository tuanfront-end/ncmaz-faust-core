{"version":3,"file":"block-terms/index.js","mappings":"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CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,M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cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,Y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AC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,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,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CA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CA;AACA;AACA,CAAC,CAAC;;AAEF;AACO,MAAMsL,uBAAuB,GAAGtL,gDAAG,EAAC,aAAe;AAC1D;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACK,MAAMuL,qBAAqB,GAAGvL,gDAAG,EAAC,aAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACK,MAAMwL,qBAAqB,GAAGxL,gDAAG,EAAC,aAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACK,MAAMyL,sCAAsC,GAAGzL,gDAAG,EAAC,aAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;;AAEF;AACO,MAAM0L,uBAAuB,GAAG1L,gDAAG,EAAC,aAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACK,MAAM2L,kCAAkC,GAAG3L,gDAAG,EAAC,aAAe;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;;AAEF;AACO,MAAM4L,0BAA0B,GAAG5L,gDAAG,EAAC,aAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACK,MAAM6L,+BAA+B,GAAG7L,gDAAG,EAAC,aAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;;AAEF;AACO,MAAM8L,oCAAoC,GAAG9L,gDAAG,EAAC,aAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEK,MAAM+L,4BAA4B,GAAG/L,gDAAG,EAAC,aAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;;;;;;;;;;;;;;;;;;;ACvVgC;AAElC,MAAM2F,iBAAiB,GAAGA,CAAC;EAC1BxC,SAAS,GAAG;AACb,CAAC,KAAK;EACL,OACCD,iEAAA;IACCC,SAAS,EAAG,iIAAgIA,SAAU;EAAE,GAExJD,iEAAA;IAAMC,SAAS,EAAC;EAAgB,GAAC,IAAQ,CACrC,CAAC;AAER,CAAC;AAED,iEAAewC,iBAAiB;;;;;;;;;;;;;;ACdjB,SAASC,UAAUA,CAAC,GAAGoG,OAAO,EAAE;EAC9C,OAAOA,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AACzC;;;;;;;;;;;ACFA;;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC7BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEnDA;UACA;UACA;UACA;UACA","sources":["webpack://ncmaz-faust-core/./node_modules/@wordpress/icons/build-module/icon/index.js","webpack://ncmaz-faust-core/./node_modules/@wordpress/icons/build-module/library/file.js","webpack://ncmaz-faust-core/./src/__generated__/fragment-masking.ts","webpack://ncmaz-faust-core/./src/__generated__/gql.ts","webpack://ncmaz-faust-core/./src/__generated__/graphql.ts","webpack://ncmaz-faust-core/./src/__generated__/index.ts","webpack://ncmaz-faust-core/./src/block-terms/DemoTermsList.tsx","webpack://ncmaz-faust-core/./src/block-terms/attributes.ts","webpack://ncmaz-faust-core/./src/block-terms/deprecated.ts","webpack://ncmaz-faust-core/./src/block-terms/edit.tsx","webpack://ncmaz-faust-core/./src/block-terms/index.js","webpack://ncmaz-faust-core/./src/block-terms/order-control.tsx","webpack://ncmaz-faust-core/./src/block-terms/save.tsx","webpack://ncmaz-faust-core/./src/components/BlockEmptyPlaceholder.tsx","webpack://ncmaz-faust-core/./src/components/BlockLoadingPlaceholder.tsx","webpack://ncmaz-faust-core/./src/fragments/index.ts","webpack://ncmaz-faust-core/./src/frontend-components/BackgroundSection/BackgroundSection.tsx","webpack://ncmaz-faust-core/./src/utils/className.tsx","webpack://ncmaz-faust-core/./src/block-terms/style.scss","webpack://ncmaz-faust-core/external window \"React\"","webpack://ncmaz-faust-core/external window [\"wp\",\"blockEditor\"]","webpack://ncmaz-faust-core/external window [\"wp\",\"blocks\"]","webpack://ncmaz-faust-core/external window [\"wp\",\"components\"]","webpack://ncmaz-faust-core/external window [\"wp\",\"element\"]","webpack://ncmaz-faust-core/external window [\"wp\",\"i18n\"]","webpack://ncmaz-faust-core/external window [\"wp\",\"primitives\"]","webpack://ncmaz-faust-core/external window [\"wp\",\"serverSideRender\"]","webpack://ncmaz-faust-core/webpack/bootstrap","webpack://ncmaz-faust-core/webpack/runtime/chunk loaded","webpack://ncmaz-faust-core/webpack/runtime/compat get default export","webpack://ncmaz-faust-core/webpack/runtime/define property getters","webpack://ncmaz-faust-core/webpack/runtime/hasOwnProperty shorthand","webpack://ncmaz-faust-core/webpack/runtime/make namespace object","webpack://ncmaz-faust-core/webpack/runtime/jsonp chunk loading","webpack://ncmaz-faust-core/webpack/before-startup","webpack://ncmaz-faust-core/webpack/startup","webpack://ncmaz-faust-core/webpack/after-startup"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { cloneElement } from '@wordpress/element';\n/** @typedef {{icon: JSX.Element, size?: number} & import('@wordpress/primitives').SVGProps} IconProps */\n\n/**\n * Return an SVG icon.\n *\n * @param {IconProps} props icon is the SVG component to render\n *                          size is a number specifiying the icon size in pixels\n *                          Other props will be passed to wrapped SVG component\n *\n * @return {JSX.Element}  Icon component\n */\n\nfunction Icon({\n  icon,\n  size = 24,\n  ...props\n}) {\n  return cloneElement(icon, {\n    width: size,\n    height: size,\n    ...props\n  });\n}\n\nexport default Icon;\n//# sourceMappingURL=index.js.map","import { createElement } from \"@wordpress/element\";\n\n/**\n * WordPress dependencies\n */\nimport { Path, SVG } from '@wordpress/primitives';\nconst file = createElement(SVG, {\n  viewBox: \"0 0 24 24\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, createElement(Path, {\n  d: \"M19 6.2h-5.9l-.6-1.1c-.3-.7-1-1.1-1.8-1.1H5c-1.1 0-2 .9-2 2v11.8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8.2c0-1.1-.9-2-2-2zm.5 11.6c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h5.8c.2 0 .4.1.4.3l1 2H19c.3 0 .5.2.5.5v9.5z\"\n}));\nexport default file;\n//# sourceMappingURL=file.js.map","import { ResultOf, DocumentTypeDecoration, TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { FragmentDefinitionNode } from 'graphql';\nimport { Incremental } from './graphql';\n\n\nexport type FragmentType<TDocumentType extends DocumentTypeDecoration<any, any>> = TDocumentType extends DocumentTypeDecoration<\n  infer TType,\n  any\n>\n  ? [TType] extends [{ ' $fragmentName'?: infer TKey }]\n    ? TKey extends string\n      ? { ' $fragmentRefs'?: { [key in TKey]: TType } }\n      : never\n    : never\n  : never;\n\n// return non-nullable if `fragmentType` is non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>>\n): TType;\n// return nullable if `fragmentType` is nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | null | undefined\n): TType | null | undefined;\n// return array of non-nullable if `fragmentType` is array of non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>>\n): ReadonlyArray<TType>;\n// return array of nullable if `fragmentType` is array of nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>> | null | undefined\n): ReadonlyArray<TType> | null | undefined;\nexport function useFragment<TType>(\n  _documentNode: DocumentTypeDecoration<TType, any>,\n  fragmentType: FragmentType<DocumentTypeDecoration<TType, any>> | ReadonlyArray<FragmentType<DocumentTypeDecoration<TType, any>>> | null | undefined\n): TType | ReadonlyArray<TType> | null | undefined {\n  return fragmentType as any;\n}\n\n\nexport function makeFragmentData<\n  F extends DocumentTypeDecoration<any, any>,\n  FT extends ResultOf<F>\n>(data: FT, _fragment: F): FragmentType<F> {\n  return data as FragmentType<F>;\n}\nexport function isFragmentReady<TQuery, TFrag>(\n  queryNode: DocumentTypeDecoration<TQuery, any>,\n  fragmentNode: TypedDocumentNode<TFrag>,\n  data: FragmentType<TypedDocumentNode<Incremental<TFrag>, any>> | null | undefined\n): data is FragmentType<typeof fragmentNode> {\n  const deferredFields = (queryNode as { __meta__?: { deferredFields: Record<string, (keyof TFrag)[]> } }).__meta__\n    ?.deferredFields;\n\n  if (!deferredFields) return true;\n\n  const fragDef = fragmentNode.definitions[0] as FragmentDefinitionNode | undefined;\n  const fragName = fragDef?.name?.value;\n\n  const fields = (fragName && deferredFields[fragName]) || [];\n  return fields.length > 0 && fields.every(field => data && field in data);\n}\n","/* eslint-disable */\nimport * as types from './graphql';\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */\nconst documents = {\n    \"\\n\\tfragment NcmazFcTagShortFieldsFragment on Tag {\\n\\t\\t__typename\\n\\t\\tname\\n\\t\\turi\\n\\t\\tdatabaseId\\n\\t\\tcount\\n\\t}\\n\": types.NcmazFcTagShortFieldsFragmentFragmentDoc,\n    \"\\n\\tfragment NcmazFcTagFullFieldsFragment on Tag {\\n\\t\\t...NcmazFcTagShortFieldsFragment\\n\\t\\tdescription\\n\\t\\tcount\\n\\t}\\n\": types.NcmazFcTagFullFieldsFragmentFragmentDoc,\n    \"\\n\\tfragment NcmazFcCategoryFullFieldsFragment on Category {\\n\\t\\t__typename\\n\\t\\tdatabaseId\\n\\t\\tdescription\\n\\t\\tname\\n\\t\\turi\\n\\t\\tcount\\n\\t\\tncTaxonomyMeta {\\n\\t\\t\\tcolor\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcCategoryFullFieldsFragmentFragmentDoc,\n    \"\\n\\tfragment NcmazFcCategoryCardFieldsNotImage on Category {\\n\\t\\t__typename\\n\\t\\tname\\n\\t\\turi\\n\\t\\tcount\\n\\t\\tdatabaseId\\n\\t\\tncTaxonomyMeta {\\n\\t\\t\\tcolor\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcCategoryCardFieldsNotImageFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostsEdegsFields on RootQueryToPostConnection {\\n\\t\\tnodes {\\n\\t\\t\\t...NcmazFcPostCardFields\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcPostsEdegsFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostFullFields on Post {\\n\\t\\t__typename\\n\\t\\turi\\n\\t\\tmodified\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tstatus\\n\\t\\tcommentCount\\n\\t\\texcerpt\\n\\t\\tdatabaseId\\n\\t\\ttitle\\n\\t\\tcontent\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\tdescription\\n\\t\\t\\t\\t...NcmazFcUserShortForPostCardFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcCategoryCardFieldsNotImage\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttags(first: 20) {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcTagShortFieldsFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFullFields\\n\\t\\t}\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcPostFullFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostCardFields on Post {\\n\\t\\t...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcPostCardFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\\n\\t\\t__typename\\n\\t\\tdatabaseId\\n\\t\\ttitle\\n\\t\\turi\\n\\t\\tstatus\\n\\t\\tmodified\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tcommentCount\\n\\t\\texcerpt\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcUserShortForPostCardFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcCategoryCardFieldsNotImage\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFields\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcPostCardFieldsNotNcmazGalleryImgsFragmentDoc,\n    \"\\n\\tfragment NcmazFcImageFields on MediaItem {\\n\\t\\t__typename\\n\\t\\taltText\\n\\t\\tdatabaseId\\n\\t\\tsourceUrl\\n\\t}\\n\": types.NcmazFcImageFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcImageHasDetailFields on MediaItem {\\n\\t\\t__typename\\n\\t\\taltText\\n\\t\\tdatabaseId\\n\\t\\tsourceUrl\\n\\t\\tcaption\\n\\t\\tmediaDetails {\\n\\t\\t\\theight\\n\\t\\t\\twidth\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcImageHasDetailFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostMetaFields on NcPostMetaData {\\n\\t\\t__typename\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t\\tlikesCount\\n\\t}\\n\": types.NcmazFcPostMetaFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcPostMetaFullFields on NcPostMetaData {\\n\\t\\t__typename\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t\\tlikesCount\\n\\t\\tsavedsCount\\n\\t\\tshowRightSidebar\\n\\t\\ttemplate\\n\\t}\\n\": types.NcmazFcPostMetaFullFieldsFragmentDoc,\n    \"\\n\\tfragment NcmazFcUserShortForPostCardFragment on User {\\n\\t\\tdatabaseId\\n\\t\\turi\\n\\t\\tusername\\n\\t\\tname\\n\\t\\tncUserMeta {\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcUserShortForPostCardFragmentFragmentDoc,\n    \"\\n\\tfragment NcmazFcUserFullFields on User {\\n\\t\\tid\\n\\t\\tdatabaseId\\n\\t\\turi\\n\\t\\tusername\\n\\t\\tname\\n\\t\\tdescription\\n\\t\\tncUserMeta {\\n\\t\\t\\tbuymeacoffeUrl\\n\\t\\t\\tcolor\\n\\t\\t\\tfacebookUrl\\n\\t\\t\\tgithubUrl\\n\\t\\t\\tinstagramUrl\\n\\t\\t\\tlinkedinUrl\\n\\t\\t\\tmediumUrl\\n\\t\\t\\tncBio\\n\\t\\t\\tpinterestUrl\\n\\t\\t\\ttwitchUrl\\n\\t\\t\\ttwitterUrl\\n\\t\\t\\tvimeoUrl\\n\\t\\t\\twebsiteUrl\\n\\t\\t\\tyoutubeUrl\\n\\t\\t\\ttiktokUrl\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbackgroundImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\": types.NcmazFcUserFullFieldsFragmentDoc,\n};\n\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n */\nexport function gql(source: string): unknown;\n\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcTagShortFieldsFragment on Tag {\\n\\t\\t__typename\\n\\t\\tname\\n\\t\\turi\\n\\t\\tdatabaseId\\n\\t\\tcount\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcTagShortFieldsFragment on Tag {\\n\\t\\t__typename\\n\\t\\tname\\n\\t\\turi\\n\\t\\tdatabaseId\\n\\t\\tcount\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcTagFullFieldsFragment on Tag {\\n\\t\\t...NcmazFcTagShortFieldsFragment\\n\\t\\tdescription\\n\\t\\tcount\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcTagFullFieldsFragment on Tag {\\n\\t\\t...NcmazFcTagShortFieldsFragment\\n\\t\\tdescription\\n\\t\\tcount\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcCategoryFullFieldsFragment on Category {\\n\\t\\t__typename\\n\\t\\tdatabaseId\\n\\t\\tdescription\\n\\t\\tname\\n\\t\\turi\\n\\t\\tcount\\n\\t\\tncTaxonomyMeta {\\n\\t\\t\\tcolor\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcCategoryFullFieldsFragment on Category {\\n\\t\\t__typename\\n\\t\\tdatabaseId\\n\\t\\tdescription\\n\\t\\tname\\n\\t\\turi\\n\\t\\tcount\\n\\t\\tncTaxonomyMeta {\\n\\t\\t\\tcolor\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcCategoryCardFieldsNotImage on Category {\\n\\t\\t__typename\\n\\t\\tname\\n\\t\\turi\\n\\t\\tcount\\n\\t\\tdatabaseId\\n\\t\\tncTaxonomyMeta {\\n\\t\\t\\tcolor\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcCategoryCardFieldsNotImage on Category {\\n\\t\\t__typename\\n\\t\\tname\\n\\t\\turi\\n\\t\\tcount\\n\\t\\tdatabaseId\\n\\t\\tncTaxonomyMeta {\\n\\t\\t\\tcolor\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcPostsEdegsFields on RootQueryToPostConnection {\\n\\t\\tnodes {\\n\\t\\t\\t...NcmazFcPostCardFields\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostsEdegsFields on RootQueryToPostConnection {\\n\\t\\tnodes {\\n\\t\\t\\t...NcmazFcPostCardFields\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcPostFullFields on Post {\\n\\t\\t__typename\\n\\t\\turi\\n\\t\\tmodified\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tstatus\\n\\t\\tcommentCount\\n\\t\\texcerpt\\n\\t\\tdatabaseId\\n\\t\\ttitle\\n\\t\\tcontent\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\tdescription\\n\\t\\t\\t\\t...NcmazFcUserShortForPostCardFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcCategoryCardFieldsNotImage\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttags(first: 20) {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcTagShortFieldsFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFullFields\\n\\t\\t}\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostFullFields on Post {\\n\\t\\t__typename\\n\\t\\turi\\n\\t\\tmodified\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tstatus\\n\\t\\tcommentCount\\n\\t\\texcerpt\\n\\t\\tdatabaseId\\n\\t\\ttitle\\n\\t\\tcontent\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\tdescription\\n\\t\\t\\t\\t...NcmazFcUserShortForPostCardFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcCategoryCardFieldsNotImage\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttags(first: 20) {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcTagShortFieldsFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFullFields\\n\\t\\t}\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageHasDetailFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcPostCardFields on Post {\\n\\t\\t...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostCardFields on Post {\\n\\t\\t...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\\n\\t\\tncmazGalleryImgs {\\n\\t\\t\\timage1 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage2 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage3 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage4 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage5 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage6 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage7 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timage8 {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\\n\\t\\t__typename\\n\\t\\tdatabaseId\\n\\t\\ttitle\\n\\t\\turi\\n\\t\\tstatus\\n\\t\\tmodified\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tcommentCount\\n\\t\\texcerpt\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcUserShortForPostCardFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcCategoryCardFieldsNotImage\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFields\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\\n\\t\\t__typename\\n\\t\\tdatabaseId\\n\\t\\ttitle\\n\\t\\turi\\n\\t\\tstatus\\n\\t\\tmodified\\n\\t\\tdate\\n\\t\\tcommentStatus\\n\\t\\tcommentCount\\n\\t\\texcerpt\\n\\t\\tauthor {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcUserShortForPostCardFragment\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcategories {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\t...NcmazFcCategoryCardFieldsNotImage\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfeaturedImage {\\n\\t\\t\\tnode {\\n\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpostFormats {\\n\\t\\t\\tnodes {\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tslug\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tncmazVideoUrl {\\n\\t\\t\\tvideoUrl\\n\\t\\t}\\n\\t\\tncmazAudioUrl {\\n\\t\\t\\taudioUrl\\n\\t\\t}\\n\\t\\tncPostMetaData {\\n\\t\\t\\t...NcmazFcPostMetaFields\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcImageFields on MediaItem {\\n\\t\\t__typename\\n\\t\\taltText\\n\\t\\tdatabaseId\\n\\t\\tsourceUrl\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcImageFields on MediaItem {\\n\\t\\t__typename\\n\\t\\taltText\\n\\t\\tdatabaseId\\n\\t\\tsourceUrl\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcImageHasDetailFields on MediaItem {\\n\\t\\t__typename\\n\\t\\taltText\\n\\t\\tdatabaseId\\n\\t\\tsourceUrl\\n\\t\\tcaption\\n\\t\\tmediaDetails {\\n\\t\\t\\theight\\n\\t\\t\\twidth\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcImageHasDetailFields on MediaItem {\\n\\t\\t__typename\\n\\t\\taltText\\n\\t\\tdatabaseId\\n\\t\\tsourceUrl\\n\\t\\tcaption\\n\\t\\tmediaDetails {\\n\\t\\t\\theight\\n\\t\\t\\twidth\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcPostMetaFields on NcPostMetaData {\\n\\t\\t__typename\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t\\tlikesCount\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostMetaFields on NcPostMetaData {\\n\\t\\t__typename\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t\\tlikesCount\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcPostMetaFullFields on NcPostMetaData {\\n\\t\\t__typename\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t\\tlikesCount\\n\\t\\tsavedsCount\\n\\t\\tshowRightSidebar\\n\\t\\ttemplate\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcPostMetaFullFields on NcPostMetaData {\\n\\t\\t__typename\\n\\t\\tviewsCount\\n\\t\\treadingTime\\n\\t\\tlikesCount\\n\\t\\tsavedsCount\\n\\t\\tshowRightSidebar\\n\\t\\ttemplate\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcUserShortForPostCardFragment on User {\\n\\t\\tdatabaseId\\n\\t\\turi\\n\\t\\tusername\\n\\t\\tname\\n\\t\\tncUserMeta {\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcUserShortForPostCardFragment on User {\\n\\t\\tdatabaseId\\n\\t\\turi\\n\\t\\tusername\\n\\t\\tname\\n\\t\\tncUserMeta {\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n\\tfragment NcmazFcUserFullFields on User {\\n\\t\\tid\\n\\t\\tdatabaseId\\n\\t\\turi\\n\\t\\tusername\\n\\t\\tname\\n\\t\\tdescription\\n\\t\\tncUserMeta {\\n\\t\\t\\tbuymeacoffeUrl\\n\\t\\t\\tcolor\\n\\t\\t\\tfacebookUrl\\n\\t\\t\\tgithubUrl\\n\\t\\t\\tinstagramUrl\\n\\t\\t\\tlinkedinUrl\\n\\t\\t\\tmediumUrl\\n\\t\\t\\tncBio\\n\\t\\t\\tpinterestUrl\\n\\t\\t\\ttwitchUrl\\n\\t\\t\\ttwitterUrl\\n\\t\\t\\tvimeoUrl\\n\\t\\t\\twebsiteUrl\\n\\t\\t\\tyoutubeUrl\\n\\t\\t\\ttiktokUrl\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbackgroundImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"): (typeof documents)[\"\\n\\tfragment NcmazFcUserFullFields on User {\\n\\t\\tid\\n\\t\\tdatabaseId\\n\\t\\turi\\n\\t\\tusername\\n\\t\\tname\\n\\t\\tdescription\\n\\t\\tncUserMeta {\\n\\t\\t\\tbuymeacoffeUrl\\n\\t\\t\\tcolor\\n\\t\\t\\tfacebookUrl\\n\\t\\t\\tgithubUrl\\n\\t\\t\\tinstagramUrl\\n\\t\\t\\tlinkedinUrl\\n\\t\\t\\tmediumUrl\\n\\t\\t\\tncBio\\n\\t\\t\\tpinterestUrl\\n\\t\\t\\ttwitchUrl\\n\\t\\t\\ttwitterUrl\\n\\t\\t\\tvimeoUrl\\n\\t\\t\\twebsiteUrl\\n\\t\\t\\tyoutubeUrl\\n\\t\\t\\ttiktokUrl\\n\\t\\t\\tfeaturedImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbackgroundImage {\\n\\t\\t\\t\\tnode {\\n\\t\\t\\t\\t\\t...NcmazFcImageFields\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"];\n\nexport function gql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;","/* eslint-disable */\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  /** Generic Object Scalar Type */\n  BlockAttributesObject: { input: any; output: any; }\n};\n\n/** A Field Group managed by ACF */\nexport type AcfFieldGroup = {\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Fields associated with an ACF Field Group */\nexport type AcfFieldGroupFields = {\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */\nexport type Avatar = {\n  __typename?: 'Avatar';\n  /** URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */\n  default?: Maybe<Scalars['String']['output']>;\n  /** HTML attributes to insert in the IMG element. Is not sanitized. */\n  extraAttr?: Maybe<Scalars['String']['output']>;\n  /** Whether to always show the default image, never the Gravatar. */\n  forceDefault?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the avatar was successfully found. */\n  foundAvatar?: Maybe<Scalars['Boolean']['output']>;\n  /** Height of the avatar image. */\n  height?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */\n  rating?: Maybe<Scalars['String']['output']>;\n  /** Type of url scheme to use. Typically HTTP vs. HTTPS. */\n  scheme?: Maybe<Scalars['String']['output']>;\n  /** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */\n  size?: Maybe<Scalars['Int']['output']>;\n  /** URL for the gravatar image source. */\n  url?: Maybe<Scalars['String']['output']>;\n  /** Width of the avatar image. */\n  width?: Maybe<Scalars['Int']['output']>;\n};\n\n/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */\nexport enum AvatarRatingEnum {\n  /** Indicates a G level avatar rating level. */\n  G = 'G',\n  /** Indicates a PG level avatar rating level. */\n  Pg = 'PG',\n  /** Indicates an R level avatar rating level. */\n  R = 'R',\n  /** Indicates an X level avatar rating level. */\n  X = 'X'\n}\n\n/** Block that supports Anchor field */\nexport type BlockWithSupportsAnchor = {\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The category type */\nexport type Category = DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & WithAcfNcTaxonomyMeta & {\n  __typename?: 'Category';\n  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<CategoryToAncestorsCategoryConnection>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  categoryId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the category type and its children categories. */\n  children?: Maybe<CategoryToCategoryConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the Category type and the ContentNode type */\n  contentNodes?: Maybe<CategoryToContentNodeConnection>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Fields of the NcTaxonomyMeta ACF Field Group */\n  ncTaxonomyMeta?: Maybe<NcTaxonomyMeta>;\n  /** Connection between the category type and its parent category. */\n  parent?: Maybe<CategoryToParentCategoryConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Category type and the post type */\n  posts?: Maybe<CategoryToPostConnection>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Category type and the Taxonomy type */\n  taxonomy?: Maybe<CategoryToTaxonomyConnectionEdge>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The category type */\nexport type CategoryAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The category type */\nexport type CategoryChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CategoryToCategoryConnectionWhereArgs>;\n};\n\n\n/** The category type */\nexport type CategoryContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CategoryToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The category type */\nexport type CategoryEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The category type */\nexport type CategoryEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The category type */\nexport type CategoryPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CategoryToPostConnectionWhereArgs>;\n};\n\n/** Connection to category Nodes */\nexport type CategoryConnection = {\n  /** A list of edges (relational context) between RootQuery and connected category Nodes */\n  edges: Array<CategoryConnectionEdge>;\n  /** A list of connected category Nodes */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected category */\nexport type CategoryConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected category Node */\n  node: Category;\n};\n\n/** Page Info on the connected CategoryConnectionEdge */\nexport type CategoryConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum CategoryIdType {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the Category type and the category type */\nexport type CategoryToAncestorsCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'CategoryToAncestorsCategoryConnection';\n  /** Edges for the CategoryToAncestorsCategoryConnection connection */\n  edges: Array<CategoryToAncestorsCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToAncestorsCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToAncestorsCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'CategoryToAncestorsCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot; */\nexport type CategoryToAncestorsCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CategoryToAncestorsCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the Category type and the category type */\nexport type CategoryToCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'CategoryToCategoryConnection';\n  /** Edges for the CategoryToCategoryConnection connection */\n  edges: Array<CategoryToCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'CategoryToCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;CategoryToCategoryConnection&quot; */\nexport type CategoryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CategoryToCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CategoryToCategoryConnection connection */\nexport type CategoryToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Category type and the ContentNode type */\nexport type CategoryToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'CategoryToContentNodeConnection';\n  /** Edges for the CategoryToContentNodeConnection connection */\n  edges: Array<CategoryToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'CategoryToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;CategoryToContentNodeConnection&quot; */\nexport type CategoryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CategoryToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CategoryToContentNodeConnection connection */\nexport type CategoryToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfCategoryEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Category type and the category type */\nexport type CategoryToParentCategoryConnectionEdge = CategoryConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CategoryToParentCategoryConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Category;\n};\n\n/** Connection between the Category type and the post type */\nexport type CategoryToPostConnection = Connection & PostConnection & {\n  __typename?: 'CategoryToPostConnection';\n  /** Edges for the CategoryToPostConnection connection */\n  edges: Array<CategoryToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: CategoryToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CategoryToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'CategoryToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;CategoryToPostConnection&quot; */\nexport type CategoryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'CategoryToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CategoryToPostConnection connection */\nexport type CategoryToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Category type and the Taxonomy type */\nexport type CategoryToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {\n  __typename?: 'CategoryToTaxonomyConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Taxonomy;\n};\n\n/** A Comment object */\nexport type Comment = DatabaseIdentifier & Node & {\n  __typename?: 'Comment';\n  /** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */\n  agent?: Maybe<Scalars['String']['output']>;\n  /**\n   * The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.\n   * @deprecated Deprecated in favor of the `status` field\n   */\n  approved?: Maybe<Scalars['Boolean']['output']>;\n  /** The author of the comment */\n  author?: Maybe<CommentToCommenterConnectionEdge>;\n  /** IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */\n  authorIp?: Maybe<Scalars['String']['output']>;\n  /**\n   * ID for the comment, unique among comments.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  commentId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Comment type and the ContentNode type */\n  commentedOn?: Maybe<CommentToContentNodeConnectionEdge>;\n  /** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the comment object */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */\n  karma?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Comment type and the Comment type */\n  parent?: Maybe<CommentToParentCommentConnectionEdge>;\n  /** The database id of the parent comment node or null if it is the root comment */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent comment node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Comment type and the Comment type */\n  replies?: Maybe<CommentToCommentConnection>;\n  /** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */\n  status?: Maybe<CommentStatusEnum>;\n  /** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A Comment object */\nexport type CommentContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** A Comment object */\nexport type CommentParentArgs = {\n  where?: InputMaybe<CommentToParentCommentConnectionWhereArgs>;\n};\n\n\n/** A Comment object */\nexport type CommentRepliesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<CommentToCommentConnectionWhereArgs>;\n};\n\n/** A Comment Author object */\nexport type CommentAuthor = Commenter & DatabaseIdentifier & Node & {\n  __typename?: 'CommentAuthor';\n  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */\n  avatar?: Maybe<Avatar>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The email for the comment author */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the comment author object */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The name for the comment author. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url the comment author. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A Comment Author object */\nexport type CommentAuthorAvatarArgs = {\n  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;\n  rating?: InputMaybe<AvatarRatingEnum>;\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to Comment Nodes */\nexport type CommentConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Comment Nodes */\n  edges: Array<CommentConnectionEdge>;\n  /** A list of connected Comment Nodes */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: CommentConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Comment */\nexport type CommentConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Comment Node */\n  node: Comment;\n};\n\n/** Page Info on the connected CommentConnectionEdge */\nexport type CommentConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single comment node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum CommentNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID'\n}\n\n/** The status of the comment object. */\nexport enum CommentStatusEnum {\n  /** Comments with the Approved status */\n  Approve = 'APPROVE',\n  /** Comments with the Unapproved status */\n  Hold = 'HOLD',\n  /** Comments with the Spam status */\n  Spam = 'SPAM',\n  /** Comments with the Trash status */\n  Trash = 'TRASH'\n}\n\n/** Connection between the Comment type and the Comment type */\nexport type CommentToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'CommentToCommentConnection';\n  /** Edges for the CommentToCommentConnection connection */\n  edges: Array<CommentToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: CommentToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type CommentToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'CommentToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;CommentToCommentConnection&quot; */\nexport type CommentToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'CommentToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the CommentToCommentConnection connection */\nexport type CommentToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the Comment type and the Commenter type */\nexport type CommentToCommenterConnectionEdge = CommenterConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CommentToCommenterConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Commenter;\n};\n\n/** Connection between the Comment type and the ContentNode type */\nexport type CommentToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CommentToContentNodeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentNode;\n};\n\n/** Connection between the Comment type and the Comment type */\nexport type CommentToParentCommentConnectionEdge = CommentConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'CommentToParentCommentConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Comment;\n};\n\n/** Arguments for filtering the CommentToParentCommentConnection connection */\nexport type CommentToParentCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The author of a comment */\nexport type Commenter = {\n  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */\n  avatar?: Maybe<Avatar>;\n  /** Identifies the primary key from the database. */\n  databaseId: Scalars['Int']['output'];\n  /** The email address of the author of a comment. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the comment author. */\n  id: Scalars['ID']['output'];\n  /** Whether the author information is considered restricted. (not fully public) */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The name of the author of a comment. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url of the author of a comment. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** Edge between a Node and a connected Commenter */\nexport type CommenterConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Commenter Node */\n  node: Commenter;\n};\n\n/** Options for ordering the connection */\nexport enum CommentsConnectionOrderbyEnum {\n  /** Order by browser user agent of the commenter. */\n  CommentAgent = 'COMMENT_AGENT',\n  /** Order by approval status of the comment. */\n  CommentApproved = 'COMMENT_APPROVED',\n  /** Order by name of the comment author. */\n  CommentAuthor = 'COMMENT_AUTHOR',\n  /** Order by e-mail of the comment author. */\n  CommentAuthorEmail = 'COMMENT_AUTHOR_EMAIL',\n  /** Order by IP address of the comment author. */\n  CommentAuthorIp = 'COMMENT_AUTHOR_IP',\n  /** Order by URL address of the comment author. */\n  CommentAuthorUrl = 'COMMENT_AUTHOR_URL',\n  /** Order by the comment contents. */\n  CommentContent = 'COMMENT_CONTENT',\n  /** Order by date/time timestamp of the comment. */\n  CommentDate = 'COMMENT_DATE',\n  /** Order by GMT timezone date/time timestamp of the comment. */\n  CommentDateGmt = 'COMMENT_DATE_GMT',\n  /** Order by the globally unique identifier for the comment object */\n  CommentId = 'COMMENT_ID',\n  /** Order by the array list of comment IDs listed in the where clause. */\n  CommentIn = 'COMMENT_IN',\n  /** Order by the comment karma score. */\n  CommentKarma = 'COMMENT_KARMA',\n  /** Order by the comment parent ID. */\n  CommentParent = 'COMMENT_PARENT',\n  /** Order by the post object ID. */\n  CommentPostId = 'COMMENT_POST_ID',\n  /** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */\n  CommentType = 'COMMENT_TYPE',\n  /** Order by the user ID. */\n  UserId = 'USER_ID'\n}\n\n/** GraphQL representation of WordPress Conditional Tags. */\nexport type ConditionalTags = {\n  __typename?: 'ConditionalTags';\n  /**\n   * Determines whether the query is for an existing archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isArchive?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing attachment page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isAttachment?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing author archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing category archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isCategory?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing date archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isDate?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing day archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isDay?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for the front page of the site.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isFrontPage?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for the blog homepage.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isHome?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing month archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isMonth?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether this site has more than one author.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isMultiAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing single page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPage?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether currently in a page template.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPageTemplate?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing post type archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPostTypeArchive?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for a post or page preview.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for the Privacy Policy page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isPrivacyPolicy?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for a search.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSearch?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing single post.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSingle?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing single post of any post type (post, attachment, page, custom post types).\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSingular?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether a post is sticky.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isSticky?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing tag archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isTag?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing custom taxonomy archive page.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isTax?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * Determines whether the query is for an existing year archive.\n   * @deprecated Deprecated in favor of using Next.js pages\n   */\n  isYear?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A plural connection from one Node Type in the Graph to another Node Type, with support for relational data via &quot;edges&quot;. */\nexport type Connection = {\n  /** A list of edges (relational context) between connected nodes */\n  edges: Array<Edge>;\n  /** A list of connected nodes */\n  nodes: Array<Node>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageInfo;\n};\n\n/** Nodes used to manage content */\nexport type ContentNode = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The ID of the node in the database. */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Nodes used to manage content */\nexport type ContentNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Nodes used to manage content */\nexport type ContentNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to ContentNode Nodes */\nexport type ContentNodeConnection = {\n  /** A list of edges (relational context) between ContentType and connected ContentNode Nodes */\n  edges: Array<ContentNodeConnectionEdge>;\n  /** A list of connected ContentNode Nodes */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentNodeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected ContentNode */\nexport type ContentNodeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected ContentNode Node */\n  node: ContentNode;\n};\n\n/** Page Info on the connected ContentNodeConnectionEdge */\nexport type ContentNodeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum ContentNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Connection between the ContentNode type and the ContentType type */\nexport type ContentNodeToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'ContentNodeToContentTypeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentType;\n};\n\n/** Connection between the ContentNode type and the User type */\nexport type ContentNodeToEditLastConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {\n  __typename?: 'ContentNodeToEditLastConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: User;\n};\n\n/** Connection between the ContentNode type and the User type */\nexport type ContentNodeToEditLockConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {\n  __typename?: 'ContentNodeToEditLockConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The timestamp for when the node was last edited */\n  lockTimestamp?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: User;\n};\n\n/** Connection between the ContentNode type and the EnqueuedScript type */\nexport type ContentNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'ContentNodeToEnqueuedScriptConnection';\n  /** Edges for the ContentNodeToEnqueuedScriptConnection connection */\n  edges: Array<ContentNodeToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'ContentNodeToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;ContentNodeToEnqueuedScriptConnection&quot; */\nexport type ContentNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'ContentNodeToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the ContentNode type and the EnqueuedStylesheet type */\nexport type ContentNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'ContentNodeToEnqueuedStylesheetConnection';\n  /** Edges for the ContentNodeToEnqueuedStylesheetConnection connection */\n  edges: Array<ContentNodeToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;ContentNodeToEnqueuedStylesheetConnection&quot; */\nexport type ContentNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to a node of content */\nexport type ContentTemplate = {\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** An Post Type object */\nexport type ContentType = Node & UniformResourceIdentifiable & {\n  __typename?: 'ContentType';\n  /** Whether this content type should can be exported. */\n  canExport?: Maybe<Scalars['Boolean']['output']>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentType type and the Taxonomy type */\n  connectedTaxonomies?: Maybe<ContentTypeToTaxonomyConnection>;\n  /** Connection between the ContentType type and the ContentNode type */\n  contentNodes?: Maybe<ContentTypeToContentNodeConnection>;\n  /** Whether content of this type should be deleted when the author of it is deleted from the system. */\n  deleteWithUser?: Maybe<Scalars['Boolean']['output']>;\n  /** Description of the content type. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Whether to exclude nodes of this content type from front end search results. */\n  excludeFromSearch?: Maybe<Scalars['Boolean']['output']>;\n  /** The plural name of the content type within the GraphQL Schema. */\n  graphqlPluralName?: Maybe<Scalars['String']['output']>;\n  /** The singular name of the content type within the GraphQL Schema. */\n  graphqlSingleName?: Maybe<Scalars['String']['output']>;\n  /** Whether this content type should have archives. Content archives are generated by type and by date. */\n  hasArchive?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the content type is hierarchical, for example pages. */\n  hierarchical?: Maybe<Scalars['Boolean']['output']>;\n  /** The globally unique identifier of the post-type object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether this page is set to the static front page. */\n  isFrontPage: Scalars['Boolean']['output'];\n  /** Whether this page is set to the blog posts page. */\n  isPostsPage: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** Display name of the content type. */\n  label?: Maybe<Scalars['String']['output']>;\n  /** Details about the content type labels. */\n  labels?: Maybe<PostTypeLabelDetails>;\n  /** The name of the icon file to display as a menu icon. */\n  menuIcon?: Maybe<Scalars['String']['output']>;\n  /** The position of this post type in the menu. Only applies if show_in_menu is true. */\n  menuPosition?: Maybe<Scalars['Int']['output']>;\n  /** The internal name of the post type. This should not be used for display purposes. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */\n  public?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether queries can be performed on the front end for the content type as part of parse_request(). */\n  publiclyQueryable?: Maybe<Scalars['Boolean']['output']>;\n  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */\n  restBase?: Maybe<Scalars['String']['output']>;\n  /** The REST Controller class assigned to handling this content type. */\n  restControllerClass?: Maybe<Scalars['String']['output']>;\n  /** Makes this content type available via the admin bar. */\n  showInAdminBar?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to add the content type to the GraphQL Schema. */\n  showInGraphql?: Maybe<Scalars['Boolean']['output']>;\n  /** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */\n  showInMenu?: Maybe<Scalars['Boolean']['output']>;\n  /** Makes this content type available for selection in navigation menus. */\n  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */\n  showInRest?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to generate and allow a UI for managing this content type in the admin. */\n  showUi?: Maybe<Scalars['Boolean']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** An Post Type object */\nexport type ContentTypeConnectedTaxonomiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Post Type object */\nexport type ContentTypeContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<ContentTypeToContentNodeConnectionWhereArgs>;\n};\n\n/** Connection to ContentType Nodes */\nexport type ContentTypeConnection = {\n  /** A list of edges (relational context) between RootQuery and connected ContentType Nodes */\n  edges: Array<ContentTypeConnectionEdge>;\n  /** A list of connected ContentType Nodes */\n  nodes: Array<ContentType>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentTypeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected ContentType */\nexport type ContentTypeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected ContentType Node */\n  node: ContentType;\n};\n\n/** Page Info on the connected ContentTypeConnectionEdge */\nexport type ContentTypeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Allowed Content Types */\nexport enum ContentTypeEnum {\n  /** The Type of Content object */\n  Attachment = 'ATTACHMENT',\n  /** The Type of Content object */\n  GraphqlDocument = 'GRAPHQL_DOCUMENT',\n  /** The Type of Content object */\n  Page = 'PAGE',\n  /** The Type of Content object */\n  Post = 'POST',\n  /** The Type of Content object */\n  UserReactionPost = 'USER_REACTION_POST'\n}\n\n/** The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum ContentTypeIdTypeEnum {\n  /** The globally unique ID */\n  Id = 'ID',\n  /** The name of the content type. */\n  Name = 'NAME'\n}\n\n/** Connection between the ContentType type and the ContentNode type */\nexport type ContentTypeToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'ContentTypeToContentNodeConnection';\n  /** Edges for the ContentTypeToContentNodeConnection connection */\n  edges: Array<ContentTypeToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentTypeToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentTypeToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'ContentTypeToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;ContentTypeToContentNodeConnection&quot; */\nexport type ContentTypeToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'ContentTypeToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the ContentTypeToContentNodeConnection connection */\nexport type ContentTypeToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the ContentType type and the Taxonomy type */\nexport type ContentTypeToTaxonomyConnection = Connection & TaxonomyConnection & {\n  __typename?: 'ContentTypeToTaxonomyConnection';\n  /** Edges for the ContentTypeToTaxonomyConnection connection */\n  edges: Array<ContentTypeToTaxonomyConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Taxonomy>;\n  /** Information about pagination in a connection. */\n  pageInfo: ContentTypeToTaxonomyConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type ContentTypeToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {\n  __typename?: 'ContentTypeToTaxonomyConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Taxonomy;\n};\n\n/** Page Info on the &quot;ContentTypeToTaxonomyConnection&quot; */\nexport type ContentTypeToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {\n  __typename?: 'ContentTypeToTaxonomyConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Allowed Content Types of the Category taxonomy. */\nexport enum ContentTypesOfCategoryEnum {\n  /** The Type of Content object */\n  Post = 'POST'\n}\n\n/** Allowed Content Types of the PostFormat taxonomy. */\nexport enum ContentTypesOfPostFormatEnum {\n  /** The Type of Content object */\n  Post = 'POST'\n}\n\n/** Allowed Content Types of the Tag taxonomy. */\nexport enum ContentTypesOfTagEnum {\n  /** The Type of Content object */\n  Post = 'POST'\n}\n\n/** A block used for editing the site */\nexport type CoreArchives = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreArchives';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreArchives Block Type */\n  attributes?: Maybe<CoreArchivesAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreArchives Block Type */\nexport type CoreArchivesAttributes = {\n  __typename?: 'CoreArchivesAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreArchives&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreArchives&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayAsDropdown&quot; field on the &quot;CoreArchives&quot; block */\n  displayAsDropdown?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreArchives&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreArchives&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreArchives&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showLabel&quot; field on the &quot;CoreArchives&quot; block */\n  showLabel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showPostCounts&quot; field on the &quot;CoreArchives&quot; block */\n  showPostCounts?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreArchives&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreArchives&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreAudio = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreAudio';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreAudio Block Type */\n  attributes?: Maybe<CoreAudioAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreAudio Block Type */\nexport type CoreAudioAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreAudioAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreAudio&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;autoplay&quot; field on the &quot;CoreAudio&quot; block */\n  autoplay?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreAudio&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreAudio&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreAudio&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreAudio&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;loop&quot; field on the &quot;CoreAudio&quot; block */\n  loop?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;preload&quot; field on the &quot;CoreAudio&quot; block */\n  preload?: Maybe<Scalars['String']['output']>;\n  /** The &quot;src&quot; field on the &quot;CoreAudio&quot; block */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreAudio&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreAvatar = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreAvatar';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreAvatar Block Type */\n  attributes?: Maybe<CoreAvatarAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreAvatar Block Type */\nexport type CoreAvatarAttributes = {\n  __typename?: 'CoreAvatarAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreAvatar&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreAvatar&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreAvatar&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreAvatar&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreAvatar&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreAvatar&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;size&quot; field on the &quot;CoreAvatar&quot; block */\n  size?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreAvatar&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;userId&quot; field on the &quot;CoreAvatar&quot; block */\n  userId?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreBlock = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreBlock';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreBlock Block Type */\n  attributes?: Maybe<CoreBlockAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreBlock Block Type */\nexport type CoreBlockAttributes = {\n  __typename?: 'CoreBlockAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreBlock&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;ref&quot; field on the &quot;CoreBlock&quot; block */\n  ref?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreButton = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreButton';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreButton Block Type */\n  attributes?: Maybe<CoreButtonAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreButton Block Type */\nexport type CoreButtonAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreButtonAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreButton&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreButton&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreButton&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreButton&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreButton&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreButton&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreButton&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkClassName&quot; field on the &quot;CoreButton&quot; block */\n  linkClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreButton&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreButton&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreButton&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreButton&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreButton&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;text&quot; field on the &quot;CoreButton&quot; block */\n  text?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreButton&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreButton&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreButton&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreButton&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreButton&quot; block */\n  width?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreButtons = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreButtons';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreButtons Block Type */\n  attributes?: Maybe<CoreButtonsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreButtons Block Type */\nexport type CoreButtonsAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreButtonsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreButtons&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreButtons&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreButtons&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreButtons&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreButtons&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreButtons&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreButtons&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreButtons&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCalendar = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCalendar';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCalendar Block Type */\n  attributes?: Maybe<CoreCalendarAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCalendar Block Type */\nexport type CoreCalendarAttributes = {\n  __typename?: 'CoreCalendarAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCalendar&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCalendar&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCalendar&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCalendar&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCalendar&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCalendar&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;month&quot; field on the &quot;CoreCalendar&quot; block */\n  month?: Maybe<Scalars['Int']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCalendar&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCalendar&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;year&quot; field on the &quot;CoreCalendar&quot; block */\n  year?: Maybe<Scalars['Int']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCategories = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCategories';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCategories Block Type */\n  attributes?: Maybe<CoreCategoriesAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCategories Block Type */\nexport type CoreCategoriesAttributes = {\n  __typename?: 'CoreCategoriesAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCategories&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCategories&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayAsDropdown&quot; field on the &quot;CoreCategories&quot; block */\n  displayAsDropdown?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCategories&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCategories&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCategories&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showEmpty&quot; field on the &quot;CoreCategories&quot; block */\n  showEmpty?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showHierarchy&quot; field on the &quot;CoreCategories&quot; block */\n  showHierarchy?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showOnlyTopLevel&quot; field on the &quot;CoreCategories&quot; block */\n  showOnlyTopLevel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showPostCounts&quot; field on the &quot;CoreCategories&quot; block */\n  showPostCounts?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCategories&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCode = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCode';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCode Block Type */\n  attributes?: Maybe<CoreCodeAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCode Block Type */\nexport type CoreCodeAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreCodeAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCode&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCode&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreCode&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCode&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreCode&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreCode&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCode&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCode&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCode&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCode&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCode&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCode&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreColumn = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreColumn';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreColumn Block Type */\n  attributes?: Maybe<CoreColumnAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreColumn Block Type */\nexport type CoreColumnAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreColumnAttributes';\n  /** The &quot;allowedBlocks&quot; field on the &quot;CoreColumn&quot; block */\n  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreColumn&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreColumn&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreColumn&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreColumn&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreColumn&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreColumn&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreColumn&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreColumn&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreColumn&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreColumn&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreColumn&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;verticalAlignment&quot; field on the &quot;CoreColumn&quot; block */\n  verticalAlignment?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreColumn&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreColumns = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreColumns';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreColumns Block Type */\n  attributes?: Maybe<CoreColumnsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreColumns Block Type */\nexport type CoreColumnsAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreColumnsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreColumns&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreColumns&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreColumns&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreColumns&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreColumns&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreColumns&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreColumns&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreColumns&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isStackedOnMobile&quot; field on the &quot;CoreColumns&quot; block */\n  isStackedOnMobile?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreColumns&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreColumns&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreColumns&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreColumns&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;verticalAlignment&quot; field on the &quot;CoreColumns&quot; block */\n  verticalAlignment?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentAuthorName = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentAuthorName';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentAuthorName Block Type */\n  attributes?: Maybe<CoreCommentAuthorNameAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentAuthorName Block Type */\nexport type CoreCommentAuthorNameAttributes = {\n  __typename?: 'CoreCommentAuthorNameAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentAuthorName&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentContent = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentContent';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentContent Block Type */\n  attributes?: Maybe<CoreCommentContentAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentContent Block Type */\nexport type CoreCommentContentAttributes = {\n  __typename?: 'CoreCommentContentAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentContent&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentContent&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentContent&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentContent&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentContent&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentContent&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentContent&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentContent&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentContent&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentDate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentDate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentDate Block Type */\n  attributes?: Maybe<CoreCommentDateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentDate Block Type */\nexport type CoreCommentDateAttributes = {\n  __typename?: 'CoreCommentDateAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentDate&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentDate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentDate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentDate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;format&quot; field on the &quot;CoreCommentDate&quot; block */\n  format?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentDate&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreCommentDate&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentDate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentDate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentDate&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentEditLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentEditLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentEditLink Block Type */\n  attributes?: Maybe<CoreCommentEditLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentEditLink Block Type */\nexport type CoreCommentEditLinkAttributes = {\n  __typename?: 'CoreCommentEditLinkAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentEditLink&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentReplyLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentReplyLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentReplyLink Block Type */\n  attributes?: Maybe<CoreCommentReplyLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentReplyLink Block Type */\nexport type CoreCommentReplyLinkAttributes = {\n  __typename?: 'CoreCommentReplyLinkAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentReplyLink&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentTemplate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentTemplate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentTemplate Block Type */\n  attributes?: Maybe<CoreCommentTemplateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentTemplate Block Type */\nexport type CoreCommentTemplateAttributes = {\n  __typename?: 'CoreCommentTemplateAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentTemplate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreComments = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreComments';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreComments Block Type */\n  attributes?: Maybe<CoreCommentsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreComments Block Type */\nexport type CoreCommentsAttributes = {\n  __typename?: 'CoreCommentsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreComments&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreComments&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreComments&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreComments&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreComments&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreComments&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;legacy&quot; field on the &quot;CoreComments&quot; block */\n  legacy?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreComments&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreComments&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreComments&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreComments&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPagination = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPagination';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPagination Block Type */\n  attributes?: Maybe<CoreCommentsPaginationAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPagination Block Type */\nexport type CoreCommentsPaginationAttributes = {\n  __typename?: 'CoreCommentsPaginationAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;paginationArrow&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  paginationArrow?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentsPagination&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPaginationNext = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPaginationNext';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPaginationNext Block Type */\n  attributes?: Maybe<CoreCommentsPaginationNextAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPaginationNext Block Type */\nexport type CoreCommentsPaginationNextAttributes = {\n  __typename?: 'CoreCommentsPaginationNextAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPaginationNumbers = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPaginationNumbers';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPaginationNumbers Block Type */\n  attributes?: Maybe<CoreCommentsPaginationNumbersAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPaginationNumbers Block Type */\nexport type CoreCommentsPaginationNumbersAttributes = {\n  __typename?: 'CoreCommentsPaginationNumbersAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsPaginationPrevious = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsPaginationPrevious';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsPaginationPrevious Block Type */\n  attributes?: Maybe<CoreCommentsPaginationPreviousAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsPaginationPrevious Block Type */\nexport type CoreCommentsPaginationPreviousAttributes = {\n  __typename?: 'CoreCommentsPaginationPreviousAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCommentsTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCommentsTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCommentsTitle Block Type */\n  attributes?: Maybe<CoreCommentsTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCommentsTitle Block Type */\nexport type CoreCommentsTitleAttributes = {\n  __typename?: 'CoreCommentsTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showCommentsCount&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  showCommentsCount?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showPostTitle&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  showPostTitle?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCommentsTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreCover = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreCover';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreCover Block Type */\n  attributes?: Maybe<CoreCoverAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreCover Block Type */\nexport type CoreCoverAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreCoverAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreCover&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowedBlocks&quot; field on the &quot;CoreCover&quot; block */\n  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;alt&quot; field on the &quot;CoreCover&quot; block */\n  alt?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundType&quot; field on the &quot;CoreCover&quot; block */\n  backgroundType?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreCover&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreCover&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;contentPosition&quot; field on the &quot;CoreCover&quot; block */\n  contentPosition?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customGradient&quot; field on the &quot;CoreCover&quot; block */\n  customGradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayColor&quot; field on the &quot;CoreCover&quot; block */\n  customOverlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;dimRatio&quot; field on the &quot;CoreCover&quot; block */\n  dimRatio?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;focalPoint&quot; field on the &quot;CoreCover&quot; block */\n  focalPoint?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreCover&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreCover&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreCover&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasParallax&quot; field on the &quot;CoreCover&quot; block */\n  hasParallax?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreCover&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;isDark&quot; field on the &quot;CoreCover&quot; block */\n  isDark?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;isRepeated&quot; field on the &quot;CoreCover&quot; block */\n  isRepeated?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreCover&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreCover&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;minHeight&quot; field on the &quot;CoreCover&quot; block */\n  minHeight?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;minHeightUnit&quot; field on the &quot;CoreCover&quot; block */\n  minHeightUnit?: Maybe<Scalars['String']['output']>;\n  /** The &quot;overlayColor&quot; field on the &quot;CoreCover&quot; block */\n  overlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreCover&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreCover&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreCover&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreCover&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n  /** The &quot;useFeaturedImage&quot; field on the &quot;CoreCover&quot; block */\n  useFeaturedImage?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreDetails = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreDetails';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreDetails Block Type */\n  attributes?: Maybe<CoreDetailsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreDetails Block Type */\nexport type CoreDetailsAttributes = {\n  __typename?: 'CoreDetailsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreDetails&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreDetails&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreDetails&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreDetails&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreDetails&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreDetails&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreDetails&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreDetails&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showContent&quot; field on the &quot;CoreDetails&quot; block */\n  showContent?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreDetails&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;summary&quot; field on the &quot;CoreDetails&quot; block */\n  summary?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreDetails&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreEmbed = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreEmbed';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreEmbed Block Type */\n  attributes?: Maybe<CoreEmbedAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreEmbed Block Type */\nexport type CoreEmbedAttributes = {\n  __typename?: 'CoreEmbedAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreEmbed&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowResponsive&quot; field on the &quot;CoreEmbed&quot; block */\n  allowResponsive?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreEmbed&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreEmbed&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreEmbed&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;previewable&quot; field on the &quot;CoreEmbed&quot; block */\n  previewable?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;providerNameSlug&quot; field on the &quot;CoreEmbed&quot; block */\n  providerNameSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;responsive&quot; field on the &quot;CoreEmbed&quot; block */\n  responsive?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreEmbed&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreEmbed&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreEmbed&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreFile = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreFile';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreFile Block Type */\n  attributes?: Maybe<CoreFileAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreFile Block Type */\nexport type CoreFileAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreFileAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreFile&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreFile&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreFile&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayPreview&quot; field on the &quot;CoreFile&quot; block */\n  displayPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;downloadButtonText&quot; field on the &quot;CoreFile&quot; block */\n  downloadButtonText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fileId&quot; field on the &quot;CoreFile&quot; block */\n  fileId?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fileName&quot; field on the &quot;CoreFile&quot; block */\n  fileName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreFile&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;href&quot; field on the &quot;CoreFile&quot; block */\n  href?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreFile&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreFile&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;previewHeight&quot; field on the &quot;CoreFile&quot; block */\n  previewHeight?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;showDownloadButton&quot; field on the &quot;CoreFile&quot; block */\n  showDownloadButton?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreFile&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textLinkHref&quot; field on the &quot;CoreFile&quot; block */\n  textLinkHref?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textLinkTarget&quot; field on the &quot;CoreFile&quot; block */\n  textLinkTarget?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreFootnotes = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreFootnotes';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreFootnotes Block Type */\n  attributes?: Maybe<CoreFootnotesAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreFootnotes Block Type */\nexport type CoreFootnotesAttributes = {\n  __typename?: 'CoreFootnotesAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreFootnotes&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreFootnotes&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreFreeform = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreFreeform';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreFreeform Block Type */\n  attributes?: Maybe<CoreFreeformAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreFreeform Block Type */\nexport type CoreFreeformAttributes = {\n  __typename?: 'CoreFreeformAttributes';\n  /** The &quot;content&quot; field on the &quot;CoreFreeform&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreFreeform&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreGallery = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreGallery';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreGallery Block Type */\n  attributes?: Maybe<CoreGalleryAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreGallery Block Type */\nexport type CoreGalleryAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreGalleryAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreGallery&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowResize&quot; field on the &quot;CoreGallery&quot; block */\n  allowResize?: Maybe<Scalars['Boolean']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreGallery&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreGallery&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreGallery&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreGallery&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;fixedHeight&quot; field on the &quot;CoreGallery&quot; block */\n  fixedHeight?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreGallery&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;ids&quot; field on the &quot;CoreGallery&quot; block */\n  ids?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;imageCrop&quot; field on the &quot;CoreGallery&quot; block */\n  imageCrop?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;images&quot; field on the &quot;CoreGallery&quot; block */\n  images?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreGallery&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreGallery&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTo&quot; field on the &quot;CoreGallery&quot; block */\n  linkTo?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreGallery&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;shortCodeTransforms&quot; field on the &quot;CoreGallery&quot; block */\n  shortCodeTransforms?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;sizeSlug&quot; field on the &quot;CoreGallery&quot; block */\n  sizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreGallery&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreGroup = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreGroup';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreGroup Block Type */\n  attributes?: Maybe<CoreGroupAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreGroup Block Type */\nexport type CoreGroupAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreGroupAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreGroup&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowedBlocks&quot; field on the &quot;CoreGroup&quot; block */\n  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreGroup&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreGroup&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreGroup&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreGroup&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreGroup&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreGroup&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreGroup&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreGroup&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreGroup&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreGroup&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreGroup&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreHeading = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreHeading';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreHeading Block Type */\n  attributes?: Maybe<CoreHeadingAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreHeading Block Type */\nexport type CoreHeadingAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreHeadingAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreHeading&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreHeading&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreHeading&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreHeading&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreHeading&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreHeading&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreHeading&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreHeading&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreHeading&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreHeading&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreHeading&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreHeading&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreHeading&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreHeading&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreHomeLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreHomeLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreHomeLink Block Type */\n  attributes?: Maybe<CoreHomeLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreHomeLink Block Type */\nexport type CoreHomeLinkAttributes = {\n  __typename?: 'CoreHomeLinkAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreHomeLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreHomeLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreHomeLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreHomeLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreHomeLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreHomeLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreHtml = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreHtml';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreHtml Block Type */\n  attributes?: Maybe<CoreHtmlAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreHtml Block Type */\nexport type CoreHtmlAttributes = {\n  __typename?: 'CoreHtmlAttributes';\n  /** The &quot;content&quot; field on the &quot;CoreHtml&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreHtml&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreImage = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreImage';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreImage Block Type */\n  attributes?: Maybe<CoreImageAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreImage Block Type */\nexport type CoreImageAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreImageAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreImage&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;alt&quot; field on the &quot;CoreImage&quot; block */\n  alt?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;aspectRatio&quot; field on the &quot;CoreImage&quot; block */\n  aspectRatio?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreImage&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreImage&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreImage&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreImage&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;height&quot; field on the &quot;CoreImage&quot; block */\n  height?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;href&quot; field on the &quot;CoreImage&quot; block */\n  href?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreImage&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;linkClass&quot; field on the &quot;CoreImage&quot; block */\n  linkClass?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkDestination&quot; field on the &quot;CoreImage&quot; block */\n  linkDestination?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreImage&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreImage&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreImage&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;scale&quot; field on the &quot;CoreImage&quot; block */\n  scale?: Maybe<Scalars['String']['output']>;\n  /** The &quot;sizeSlug&quot; field on the &quot;CoreImage&quot; block */\n  sizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;src&quot; field on the &quot;CoreImage&quot; block */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreImage&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreImage&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreImage&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreImage&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLatestComments = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLatestComments';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLatestComments Block Type */\n  attributes?: Maybe<CoreLatestCommentsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLatestComments Block Type */\nexport type CoreLatestCommentsAttributes = {\n  __typename?: 'CoreLatestCommentsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreLatestComments&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreLatestComments&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;commentsToShow&quot; field on the &quot;CoreLatestComments&quot; block */\n  commentsToShow?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;displayAvatar&quot; field on the &quot;CoreLatestComments&quot; block */\n  displayAvatar?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayDate&quot; field on the &quot;CoreLatestComments&quot; block */\n  displayDate?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayExcerpt&quot; field on the &quot;CoreLatestComments&quot; block */\n  displayExcerpt?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreLatestComments&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreLatestComments&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLatestComments&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreLatestComments&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLatestPosts = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLatestPosts';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLatestPosts Block Type */\n  attributes?: Maybe<CoreLatestPostsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLatestPosts Block Type */\nexport type CoreLatestPostsAttributes = {\n  __typename?: 'CoreLatestPostsAttributes';\n  /** The &quot;addLinkToFeaturedImage&quot; field on the &quot;CoreLatestPosts&quot; block */\n  addLinkToFeaturedImage?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;align&quot; field on the &quot;CoreLatestPosts&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;categories&quot; field on the &quot;CoreLatestPosts&quot; block */\n  categories?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreLatestPosts&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreLatestPosts&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;displayAuthor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayFeaturedImage&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayFeaturedImage?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayPostContent&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayPostContent?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayPostContentRadio&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayPostContentRadio?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayPostDate&quot; field on the &quot;CoreLatestPosts&quot; block */\n  displayPostDate?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;excerptLength&quot; field on the &quot;CoreLatestPosts&quot; block */\n  excerptLength?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;featuredImageAlign&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;featuredImageSizeHeight&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageSizeHeight?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;featuredImageSizeSlug&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageSizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;featuredImageSizeWidth&quot; field on the &quot;CoreLatestPosts&quot; block */\n  featuredImageSizeWidth?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreLatestPosts&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreLatestPosts&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreLatestPosts&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLatestPosts&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;order&quot; field on the &quot;CoreLatestPosts&quot; block */\n  order?: Maybe<Scalars['String']['output']>;\n  /** The &quot;orderBy&quot; field on the &quot;CoreLatestPosts&quot; block */\n  orderBy?: Maybe<Scalars['String']['output']>;\n  /** The &quot;postLayout&quot; field on the &quot;CoreLatestPosts&quot; block */\n  postLayout?: Maybe<Scalars['String']['output']>;\n  /** The &quot;postsToShow&quot; field on the &quot;CoreLatestPosts&quot; block */\n  postsToShow?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;selectedAuthor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  selectedAuthor?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreLatestPosts&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreLatestPosts&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLegacyWidget = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLegacyWidget';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLegacyWidget Block Type */\n  attributes?: Maybe<CoreLegacyWidgetAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLegacyWidget Block Type */\nexport type CoreLegacyWidgetAttributes = {\n  __typename?: 'CoreLegacyWidgetAttributes';\n  /** The &quot;id&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  id?: Maybe<Scalars['String']['output']>;\n  /** The &quot;idBase&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  idBase?: Maybe<Scalars['String']['output']>;\n  /** The &quot;instance&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  instance?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLegacyWidget&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreList = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreList';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreList Block Type */\n  attributes?: Maybe<CoreListAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreList Block Type */\nexport type CoreListAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreListAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreList&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreList&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreList&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreList&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreList&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreList&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreList&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;ordered&quot; field on the &quot;CoreList&quot; block */\n  ordered?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreList&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;reversed&quot; field on the &quot;CoreList&quot; block */\n  reversed?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;start&quot; field on the &quot;CoreList&quot; block */\n  start?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreList&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreList&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreList&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;values&quot; field on the &quot;CoreList&quot; block */\n  values?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreListItem = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreListItem';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreListItem Block Type */\n  attributes?: Maybe<CoreListItemAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreListItem Block Type */\nexport type CoreListItemAttributes = {\n  __typename?: 'CoreListItemAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreListItem&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreListItem&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreListItem&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreListItem&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreListItem&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreListItem&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreListItem&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreLoginout = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreLoginout';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreLoginout Block Type */\n  attributes?: Maybe<CoreLoginoutAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreLoginout Block Type */\nexport type CoreLoginoutAttributes = {\n  __typename?: 'CoreLoginoutAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreLoginout&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayLoginAsForm&quot; field on the &quot;CoreLoginout&quot; block */\n  displayLoginAsForm?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreLoginout&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreLoginout&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreLoginout&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;redirectToCurrent&quot; field on the &quot;CoreLoginout&quot; block */\n  redirectToCurrent?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreLoginout&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreMediaText = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreMediaText';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreMediaText Block Type */\n  attributes?: Maybe<CoreMediaTextAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreMediaText Block Type */\nexport type CoreMediaTextAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreMediaTextAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreMediaText&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;allowedBlocks&quot; field on the &quot;CoreMediaText&quot; block */\n  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreMediaText&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreMediaText&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;focalPoint&quot; field on the &quot;CoreMediaText&quot; block */\n  focalPoint?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreMediaText&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreMediaText&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreMediaText&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;href&quot; field on the &quot;CoreMediaText&quot; block */\n  href?: Maybe<Scalars['String']['output']>;\n  /** The &quot;imageFill&quot; field on the &quot;CoreMediaText&quot; block */\n  imageFill?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;isStackedOnMobile&quot; field on the &quot;CoreMediaText&quot; block */\n  isStackedOnMobile?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkClass&quot; field on the &quot;CoreMediaText&quot; block */\n  linkClass?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkDestination&quot; field on the &quot;CoreMediaText&quot; block */\n  linkDestination?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreMediaText&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreMediaText&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;mediaAlt&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaAlt?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaId&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaId?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;mediaLink&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaLink?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaPosition&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaPosition?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaSizeSlug&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaSizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaType&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaType?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaUrl&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaUrl?: Maybe<Scalars['String']['output']>;\n  /** The &quot;mediaWidth&quot; field on the &quot;CoreMediaText&quot; block */\n  mediaWidth?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreMediaText&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreMediaText&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreMediaText&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;verticalAlignment&quot; field on the &quot;CoreMediaText&quot; block */\n  verticalAlignment?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreMissing = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreMissing';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreMissing Block Type */\n  attributes?: Maybe<CoreMissingAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreMissing Block Type */\nexport type CoreMissingAttributes = {\n  __typename?: 'CoreMissingAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreMissing&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;originalContent&quot; field on the &quot;CoreMissing&quot; block */\n  originalContent?: Maybe<Scalars['String']['output']>;\n  /** The &quot;originalName&quot; field on the &quot;CoreMissing&quot; block */\n  originalName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;originalUndelimitedContent&quot; field on the &quot;CoreMissing&quot; block */\n  originalUndelimitedContent?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreMore = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreMore';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreMore Block Type */\n  attributes?: Maybe<CoreMoreAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreMore Block Type */\nexport type CoreMoreAttributes = {\n  __typename?: 'CoreMoreAttributes';\n  /** The &quot;customText&quot; field on the &quot;CoreMore&quot; block */\n  customText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreMore&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;noTeaser&quot; field on the &quot;CoreMore&quot; block */\n  noTeaser?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNavigation = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNavigation';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNavigation Block Type */\n  attributes?: Maybe<CoreNavigationAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNavigation Block Type */\nexport type CoreNavigationAttributes = {\n  __typename?: 'CoreNavigationAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreNavigation&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreNavigation&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customOverlayBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customOverlayTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  customTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreNavigation&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreNavigation&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasIcon&quot; field on the &quot;CoreNavigation&quot; block */\n  hasIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;icon&quot; field on the &quot;CoreNavigation&quot; block */\n  icon?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreNavigation&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreNavigation&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;maxNestingLevel&quot; field on the &quot;CoreNavigation&quot; block */\n  maxNestingLevel?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;openSubmenusOnClick&quot; field on the &quot;CoreNavigation&quot; block */\n  openSubmenusOnClick?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;overlayBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  overlayBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;overlayMenu&quot; field on the &quot;CoreNavigation&quot; block */\n  overlayMenu?: Maybe<Scalars['String']['output']>;\n  /** The &quot;overlayTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  overlayTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;ref&quot; field on the &quot;CoreNavigation&quot; block */\n  ref?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;rgbBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */\n  rgbBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;rgbTextColor&quot; field on the &quot;CoreNavigation&quot; block */\n  rgbTextColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;showSubmenuIcon&quot; field on the &quot;CoreNavigation&quot; block */\n  showSubmenuIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreNavigation&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreNavigation&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;__unstableLocation&quot; field on the &quot;CoreNavigation&quot; block */\n  unstableLocation?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNavigationLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNavigationLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNavigationLink Block Type */\n  attributes?: Maybe<CoreNavigationLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNavigationLink Block Type */\nexport type CoreNavigationLinkAttributes = {\n  __typename?: 'CoreNavigationLinkAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreNavigationLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;description&quot; field on the &quot;CoreNavigationLink&quot; block */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreNavigationLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreNavigationLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreNavigationLink&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;isTopLevelLink&quot; field on the &quot;CoreNavigationLink&quot; block */\n  isTopLevelLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;kind&quot; field on the &quot;CoreNavigationLink&quot; block */\n  kind?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreNavigationLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreNavigationLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationLink&quot; block */\n  opensInNewTab?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreNavigationLink&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreNavigationLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreNavigationLink&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreNavigationLink&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreNavigationLink&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNavigationSubmenu = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNavigationSubmenu';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNavigationSubmenu Block Type */\n  attributes?: Maybe<CoreNavigationSubmenuAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNavigationSubmenu Block Type */\nexport type CoreNavigationSubmenuAttributes = {\n  __typename?: 'CoreNavigationSubmenuAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;description&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;isTopLevelItem&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  isTopLevelItem?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;kind&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  kind?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  opensInNewTab?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreNavigationSubmenu&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreNextpage = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreNextpage';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreNextpage Block Type */\n  attributes?: Maybe<CoreNextpageAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreNextpage Block Type */\nexport type CoreNextpageAttributes = {\n  __typename?: 'CoreNextpageAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreNextpage&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePageList = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePageList';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePageList Block Type */\n  attributes?: Maybe<CorePageListAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePageList Block Type */\nexport type CorePageListAttributes = {\n  __typename?: 'CorePageListAttributes';\n  /** The &quot;className&quot; field on the &quot;CorePageList&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePageList&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePageList&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isNested&quot; field on the &quot;CorePageList&quot; block */\n  isNested?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePageList&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;parentPageID&quot; field on the &quot;CorePageList&quot; block */\n  parentPageID?: Maybe<Scalars['Int']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePageList&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePageListItem = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePageListItem';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePageListItem Block Type */\n  attributes?: Maybe<CorePageListItemAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePageListItem Block Type */\nexport type CorePageListItemAttributes = {\n  __typename?: 'CorePageListItemAttributes';\n  /** The &quot;className&quot; field on the &quot;CorePageListItem&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasChildren&quot; field on the &quot;CorePageListItem&quot; block */\n  hasChildren?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;id&quot; field on the &quot;CorePageListItem&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;label&quot; field on the &quot;CorePageListItem&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;link&quot; field on the &quot;CorePageListItem&quot; block */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePageListItem&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CorePageListItem&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreParagraph = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreParagraph';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreParagraph Block Type */\n  attributes?: Maybe<CoreParagraphAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreParagraph Block Type */\nexport type CoreParagraphAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreParagraphAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreParagraph&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreParagraph&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreParagraph&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreParagraph&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreParagraph&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;direction&quot; field on the &quot;CoreParagraph&quot; block */\n  direction?: Maybe<Scalars['String']['output']>;\n  /** The &quot;dropCap&quot; field on the &quot;CoreParagraph&quot; block */\n  dropCap?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreParagraph&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreParagraph&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreParagraph&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreParagraph&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreParagraph&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreParagraph&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreParagraph&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePattern = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePattern';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePattern Block Type */\n  attributes?: Maybe<CorePatternAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePattern Block Type */\nexport type CorePatternAttributes = {\n  __typename?: 'CorePatternAttributes';\n  /** The &quot;className&quot; field on the &quot;CorePattern&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePattern&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;slug&quot; field on the &quot;CorePattern&quot; block */\n  slug?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostAuthor = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostAuthor';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostAuthor Block Type */\n  attributes?: Maybe<CorePostAuthorAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostAuthor Block Type */\nexport type CorePostAuthorAttributes = {\n  __typename?: 'CorePostAuthorAttributes';\n  /** The &quot;avatarSize&quot; field on the &quot;CorePostAuthor&quot; block */\n  avatarSize?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthor&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;byline&quot; field on the &quot;CorePostAuthor&quot; block */\n  byline?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostAuthor&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthor&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthor&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostAuthor&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostAuthor&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostAuthor&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostAuthor&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showAvatar&quot; field on the &quot;CorePostAuthor&quot; block */\n  showAvatar?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showBio&quot; field on the &quot;CorePostAuthor&quot; block */\n  showBio?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostAuthor&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthor&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostAuthor&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostAuthorBiography = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostAuthorBiography';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostAuthorBiography Block Type */\n  attributes?: Maybe<CorePostAuthorBiographyAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostAuthorBiography Block Type */\nexport type CorePostAuthorBiographyAttributes = {\n  __typename?: 'CorePostAuthorBiographyAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostAuthorBiography&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostAuthorName = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostAuthorName';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostAuthorName Block Type */\n  attributes?: Maybe<CorePostAuthorNameAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostAuthorName Block Type */\nexport type CorePostAuthorNameAttributes = {\n  __typename?: 'CorePostAuthorNameAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorName&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostAuthorName&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthorName&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthorName&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostAuthorName&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostAuthorName&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostAuthorName&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostAuthorName&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostAuthorName&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthorName&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostAuthorName&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostComments = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostComments';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostComments Block Type */\n  attributes?: Maybe<CorePostCommentsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostComments Block Type */\nexport type CorePostCommentsAttributes = {\n  __typename?: 'CorePostCommentsAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostComments&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostComments&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostComments&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostComments&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostComments&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostComments&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostComments&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostComments&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostComments&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostCommentsForm = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostCommentsForm';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostCommentsForm Block Type */\n  attributes?: Maybe<CorePostCommentsFormAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostCommentsForm Block Type */\nexport type CorePostCommentsFormAttributes = {\n  __typename?: 'CorePostCommentsFormAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostCommentsForm&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostContent = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostContent';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostContent Block Type */\n  attributes?: Maybe<CorePostContentAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostContent Block Type */\nexport type CorePostContentAttributes = {\n  __typename?: 'CorePostContentAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostContent&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostContent&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostContent&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostContent&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CorePostContent&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostContent&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostContent&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostDate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostDate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostDate Block Type */\n  attributes?: Maybe<CorePostDateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostDate Block Type */\nexport type CorePostDateAttributes = {\n  __typename?: 'CorePostDateAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostDate&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostDate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;displayType&quot; field on the &quot;CorePostDate&quot; block */\n  displayType?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostDate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostDate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;format&quot; field on the &quot;CorePostDate&quot; block */\n  format?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostDate&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostDate&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostDate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostDate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostDate&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostDate&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostExcerpt = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostExcerpt';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostExcerpt Block Type */\n  attributes?: Maybe<CorePostExcerptAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostExcerpt Block Type */\nexport type CorePostExcerptAttributes = {\n  __typename?: 'CorePostExcerptAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostExcerpt&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostExcerpt&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;excerptLength&quot; field on the &quot;CorePostExcerpt&quot; block */\n  excerptLength?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostExcerpt&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostExcerpt&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostExcerpt&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostExcerpt&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;moreText&quot; field on the &quot;CorePostExcerpt&quot; block */\n  moreText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;showMoreOnNewLine&quot; field on the &quot;CorePostExcerpt&quot; block */\n  showMoreOnNewLine?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostExcerpt&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostExcerpt&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostExcerpt&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostFeaturedImage = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostFeaturedImage';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostFeaturedImage Block Type */\n  attributes?: Maybe<CorePostFeaturedImageAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostFeaturedImage Block Type */\nexport type CorePostFeaturedImageAttributes = {\n  __typename?: 'CorePostFeaturedImageAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;aspectRatio&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  aspectRatio?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customGradient&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  customGradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customOverlayColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  customOverlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;dimRatio&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  dimRatio?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;height&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  height?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;overlayColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  overlayColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;scale&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  scale?: Maybe<Scalars['String']['output']>;\n  /** The &quot;sizeSlug&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  sizeSlug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CorePostFeaturedImage&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostNavigationLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostNavigationLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostNavigationLink Block Type */\n  attributes?: Maybe<CorePostNavigationLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostNavigationLink Block Type */\nexport type CorePostNavigationLinkAttributes = {\n  __typename?: 'CorePostNavigationLinkAttributes';\n  /** The &quot;arrow&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  arrow?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkLabel&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  linkLabel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showTitle&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  showTitle?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CorePostNavigationLink&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostTemplate = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostTemplate';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostTemplate Block Type */\n  attributes?: Maybe<CorePostTemplateAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostTemplate Block Type */\nexport type CorePostTemplateAttributes = {\n  __typename?: 'CorePostTemplateAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostTemplate&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTemplate&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostTemplate&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostTemplate&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostTemplate&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostTemplate&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CorePostTemplate&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostTemplate&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostTemplate&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostTemplate&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostTerms = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostTerms';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostTerms Block Type */\n  attributes?: Maybe<CorePostTermsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostTerms Block Type */\nexport type CorePostTermsAttributes = {\n  __typename?: 'CorePostTermsAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTerms&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostTerms&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostTerms&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostTerms&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostTerms&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostTerms&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;prefix&quot; field on the &quot;CorePostTerms&quot; block */\n  prefix?: Maybe<Scalars['String']['output']>;\n  /** The &quot;separator&quot; field on the &quot;CorePostTerms&quot; block */\n  separator?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostTerms&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;suffix&quot; field on the &quot;CorePostTerms&quot; block */\n  suffix?: Maybe<Scalars['String']['output']>;\n  /** The &quot;term&quot; field on the &quot;CorePostTerms&quot; block */\n  term?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostTerms&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostTerms&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePostTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePostTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePostTitle Block Type */\n  attributes?: Maybe<CorePostTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePostTitle Block Type */\nexport type CorePostTitleAttributes = {\n  __typename?: 'CorePostTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePostTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePostTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePostTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePostTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePostTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CorePostTitle&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;level&quot; field on the &quot;CorePostTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CorePostTitle&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePostTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CorePostTitle&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePostTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePostTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePostTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePreformatted = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePreformatted';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePreformatted Block Type */\n  attributes?: Maybe<CorePreformattedAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePreformatted Block Type */\nexport type CorePreformattedAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CorePreformattedAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePreformatted&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePreformatted&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CorePreformatted&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePreformatted&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePreformatted&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePreformatted&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePreformatted&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePreformatted&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePreformatted&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CorePullquote = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CorePullquote';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CorePullquote Block Type */\n  attributes?: Maybe<CorePullquoteAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CorePullquote Block Type */\nexport type CorePullquoteAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CorePullquoteAttributes';\n  /** The &quot;align&quot; field on the &quot;CorePullquote&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CorePullquote&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CorePullquote&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;citation&quot; field on the &quot;CorePullquote&quot; block */\n  citation?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CorePullquote&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CorePullquote&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CorePullquote&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CorePullquote&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CorePullquote&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CorePullquote&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CorePullquote&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CorePullquote&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;value&quot; field on the &quot;CorePullquote&quot; block */\n  value?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQuery = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQuery';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQuery Block Type */\n  attributes?: Maybe<CoreQueryAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQuery Block Type */\nexport type CoreQueryAttributes = {\n  __typename?: 'CoreQueryAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQuery&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQuery&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreQuery&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQuery&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;namespace&quot; field on the &quot;CoreQuery&quot; block */\n  namespace?: Maybe<Scalars['String']['output']>;\n  /** The &quot;query&quot; field on the &quot;CoreQuery&quot; block */\n  query?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;queryId&quot; field on the &quot;CoreQuery&quot; block */\n  queryId?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreQuery&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryNoResults = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryNoResults';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryNoResults Block Type */\n  attributes?: Maybe<CoreQueryNoResultsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryNoResults Block Type */\nexport type CoreQueryNoResultsAttributes = {\n  __typename?: 'CoreQueryNoResultsAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQueryNoResults&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPagination = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPagination';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPagination Block Type */\n  attributes?: Maybe<CoreQueryPaginationAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPagination Block Type */\nexport type CoreQueryPaginationAttributes = {\n  __typename?: 'CoreQueryPaginationAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQueryPagination&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPagination&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPagination&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPagination&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPagination&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPagination&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreQueryPagination&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPagination&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;paginationArrow&quot; field on the &quot;CoreQueryPagination&quot; block */\n  paginationArrow?: Maybe<Scalars['String']['output']>;\n  /** The &quot;showLabel&quot; field on the &quot;CoreQueryPagination&quot; block */\n  showLabel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPagination&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQueryPagination&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPaginationNext = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPaginationNext';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPaginationNext Block Type */\n  attributes?: Maybe<CoreQueryPaginationNextAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPaginationNext Block Type */\nexport type CoreQueryPaginationNextAttributes = {\n  __typename?: 'CoreQueryPaginationNextAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationNext&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPaginationNumbers = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPaginationNumbers';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPaginationNumbers Block Type */\n  attributes?: Maybe<CoreQueryPaginationNumbersAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPaginationNumbers Block Type */\nexport type CoreQueryPaginationNumbersAttributes = {\n  __typename?: 'CoreQueryPaginationNumbersAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryPaginationPrevious = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryPaginationPrevious';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryPaginationPrevious Block Type */\n  attributes?: Maybe<CoreQueryPaginationPreviousAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryPaginationPrevious Block Type */\nexport type CoreQueryPaginationPreviousAttributes = {\n  __typename?: 'CoreQueryPaginationPreviousAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQueryTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQueryTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQueryTitle Block Type */\n  attributes?: Maybe<CoreQueryTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQueryTitle Block Type */\nexport type CoreQueryTitleAttributes = {\n  __typename?: 'CoreQueryTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQueryTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQueryTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQueryTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQueryTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreQueryTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQueryTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showPrefix&quot; field on the &quot;CoreQueryTitle&quot; block */\n  showPrefix?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showSearchTerm&quot; field on the &quot;CoreQueryTitle&quot; block */\n  showSearchTerm?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQueryTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreQueryTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQueryTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;type&quot; field on the &quot;CoreQueryTitle&quot; block */\n  type?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreQuote = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreQuote';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreQuote Block Type */\n  attributes?: Maybe<CoreQuoteAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreQuote Block Type */\nexport type CoreQuoteAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreQuoteAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreQuote&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreQuote&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;citation&quot; field on the &quot;CoreQuote&quot; block */\n  citation?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreQuote&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreQuote&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreQuote&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreQuote&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreQuote&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreQuote&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreQuote&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreQuote&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;value&quot; field on the &quot;CoreQuote&quot; block */\n  value?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreReadMore = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreReadMore';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreReadMore Block Type */\n  attributes?: Maybe<CoreReadMoreAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreReadMore Block Type */\nexport type CoreReadMoreAttributes = {\n  __typename?: 'CoreReadMoreAttributes';\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreReadMore&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreReadMore&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreReadMore&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreReadMore&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreReadMore&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreReadMore&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreReadMore&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreReadMore&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreReadMore&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreReadMore&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreReadMore&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreRss = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreRss';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreRss Block Type */\n  attributes?: Maybe<CoreRssAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreRss Block Type */\nexport type CoreRssAttributes = {\n  __typename?: 'CoreRssAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreRss&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;blockLayout&quot; field on the &quot;CoreRss&quot; block */\n  blockLayout?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreRss&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreRss&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;displayAuthor&quot; field on the &quot;CoreRss&quot; block */\n  displayAuthor?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayDate&quot; field on the &quot;CoreRss&quot; block */\n  displayDate?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;displayExcerpt&quot; field on the &quot;CoreRss&quot; block */\n  displayExcerpt?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;excerptLength&quot; field on the &quot;CoreRss&quot; block */\n  excerptLength?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;feedURL&quot; field on the &quot;CoreRss&quot; block */\n  feedURL?: Maybe<Scalars['String']['output']>;\n  /** The &quot;itemsToShow&quot; field on the &quot;CoreRss&quot; block */\n  itemsToShow?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreRss&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSearch = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSearch';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSearch Block Type */\n  attributes?: Maybe<CoreSearchAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSearch Block Type */\nexport type CoreSearchAttributes = {\n  __typename?: 'CoreSearchAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSearch&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSearch&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreSearch&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;buttonBehavior&quot; field on the &quot;CoreSearch&quot; block */\n  buttonBehavior?: Maybe<Scalars['String']['output']>;\n  /** The &quot;buttonPosition&quot; field on the &quot;CoreSearch&quot; block */\n  buttonPosition?: Maybe<Scalars['String']['output']>;\n  /** The &quot;buttonText&quot; field on the &quot;CoreSearch&quot; block */\n  buttonText?: Maybe<Scalars['String']['output']>;\n  /** The &quot;buttonUseIcon&quot; field on the &quot;CoreSearch&quot; block */\n  buttonUseIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSearch&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreSearch&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreSearch&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSearch&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isSearchFieldHidden&quot; field on the &quot;CoreSearch&quot; block */\n  isSearchFieldHidden?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreSearch&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSearch&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;placeholder&quot; field on the &quot;CoreSearch&quot; block */\n  placeholder?: Maybe<Scalars['String']['output']>;\n  /** The &quot;query&quot; field on the &quot;CoreSearch&quot; block */\n  query?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showLabel&quot; field on the &quot;CoreSearch&quot; block */\n  showLabel?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSearch&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreSearch&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreSearch&quot; block */\n  width?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;widthUnit&quot; field on the &quot;CoreSearch&quot; block */\n  widthUnit?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSeparator = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSeparator';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSeparator Block Type */\n  attributes?: Maybe<CoreSeparatorAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSeparator Block Type */\nexport type CoreSeparatorAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreSeparatorAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSeparator&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSeparator&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSeparator&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;cssClassName&quot; field on the &quot;CoreSeparator&quot; block */\n  cssClassName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSeparator&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSeparator&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;opacity&quot; field on the &quot;CoreSeparator&quot; block */\n  opacity?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSeparator&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreShortcode = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreShortcode';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreShortcode Block Type */\n  attributes?: Maybe<CoreShortcodeAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreShortcode Block Type */\nexport type CoreShortcodeAttributes = {\n  __typename?: 'CoreShortcodeAttributes';\n  /** The &quot;lock&quot; field on the &quot;CoreShortcode&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;text&quot; field on the &quot;CoreShortcode&quot; block */\n  text?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSiteLogo = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSiteLogo';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSiteLogo Block Type */\n  attributes?: Maybe<CoreSiteLogoAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSiteLogo Block Type */\nexport type CoreSiteLogoAttributes = {\n  __typename?: 'CoreSiteLogoAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSiteLogo&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSiteLogo&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreSiteLogo&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreSiteLogo&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSiteLogo&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;shouldSyncIcon&quot; field on the &quot;CoreSiteLogo&quot; block */\n  shouldSyncIcon?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSiteLogo&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreSiteLogo&quot; block */\n  width?: Maybe<Scalars['Float']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSiteTagline = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSiteTagline';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSiteTagline Block Type */\n  attributes?: Maybe<CoreSiteTaglineAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSiteTagline Block Type */\nexport type CoreSiteTaglineAttributes = {\n  __typename?: 'CoreSiteTaglineAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSiteTagline&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSiteTagline&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSiteTagline&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreSiteTagline&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreSiteTagline&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSiteTagline&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSiteTagline&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSiteTagline&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreSiteTagline&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreSiteTagline&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSiteTitle = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSiteTitle';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSiteTitle Block Type */\n  attributes?: Maybe<CoreSiteTitleAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSiteTitle Block Type */\nexport type CoreSiteTitleAttributes = {\n  __typename?: 'CoreSiteTitleAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSiteTitle&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSiteTitle&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSiteTitle&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreSiteTitle&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreSiteTitle&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSiteTitle&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;isLink&quot; field on the &quot;CoreSiteTitle&quot; block */\n  isLink?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;level&quot; field on the &quot;CoreSiteTitle&quot; block */\n  level?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;linkTarget&quot; field on the &quot;CoreSiteTitle&quot; block */\n  linkTarget?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSiteTitle&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSiteTitle&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreSiteTitle&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreSiteTitle&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSocialLink = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSocialLink';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSocialLink Block Type */\n  attributes?: Maybe<CoreSocialLinkAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSocialLink Block Type */\nexport type CoreSocialLinkAttributes = {\n  __typename?: 'CoreSocialLinkAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreSocialLink&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;label&quot; field on the &quot;CoreSocialLink&quot; block */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSocialLink&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;rel&quot; field on the &quot;CoreSocialLink&quot; block */\n  rel?: Maybe<Scalars['String']['output']>;\n  /** The &quot;service&quot; field on the &quot;CoreSocialLink&quot; block */\n  service?: Maybe<Scalars['String']['output']>;\n  /** The &quot;url&quot; field on the &quot;CoreSocialLink&quot; block */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSocialLinks = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSocialLinks';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSocialLinks Block Type */\n  attributes?: Maybe<CoreSocialLinksAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSocialLinks Block Type */\nexport type CoreSocialLinksAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreSocialLinksAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreSocialLinks&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSocialLinks&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customIconBackgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  customIconBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;customIconColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  customIconColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreSocialLinks&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconBackgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconBackgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconBackgroundColorValue&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconBackgroundColorValue?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconColor&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;iconColorValue&quot; field on the &quot;CoreSocialLinks&quot; block */\n  iconColorValue?: Maybe<Scalars['String']['output']>;\n  /** The &quot;layout&quot; field on the &quot;CoreSocialLinks&quot; block */\n  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSocialLinks&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;openInNewTab&quot; field on the &quot;CoreSocialLinks&quot; block */\n  openInNewTab?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;showLabels&quot; field on the &quot;CoreSocialLinks&quot; block */\n  showLabels?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;size&quot; field on the &quot;CoreSocialLinks&quot; block */\n  size?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSocialLinks&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreSpacer = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreSpacer';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreSpacer Block Type */\n  attributes?: Maybe<CoreSpacerAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreSpacer Block Type */\nexport type CoreSpacerAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreSpacerAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreSpacer&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;height&quot; field on the &quot;CoreSpacer&quot; block */\n  height?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreSpacer&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreSpacer&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreSpacer&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTable = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTable';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTable Block Type */\n  attributes?: Maybe<CoreTableAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTable Block Type */\nexport type CoreTableAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreTableAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTable&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreTable&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;body&quot; field on the &quot;CoreTable&quot; block */\n  body?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreTable&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreTable&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTable&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreTable&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreTable&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;foot&quot; field on the &quot;CoreTable&quot; block */\n  foot?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreTable&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasFixedLayout&quot; field on the &quot;CoreTable&quot; block */\n  hasFixedLayout?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;head&quot; field on the &quot;CoreTable&quot; block */\n  head?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTable&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreTable&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreTable&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTagCloud = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTagCloud';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTagCloud Block Type */\n  attributes?: Maybe<CoreTagCloudAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTagCloud Block Type */\nexport type CoreTagCloudAttributes = {\n  __typename?: 'CoreTagCloudAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTagCloud&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTagCloud&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreTagCloud&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;largestFontSize&quot; field on the &quot;CoreTagCloud&quot; block */\n  largestFontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTagCloud&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;numberOfTags&quot; field on the &quot;CoreTagCloud&quot; block */\n  numberOfTags?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;showTagCounts&quot; field on the &quot;CoreTagCloud&quot; block */\n  showTagCounts?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;smallestFontSize&quot; field on the &quot;CoreTagCloud&quot; block */\n  smallestFontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreTagCloud&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;taxonomy&quot; field on the &quot;CoreTagCloud&quot; block */\n  taxonomy?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTemplatePart = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTemplatePart';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTemplatePart Block Type */\n  attributes?: Maybe<CoreTemplatePartAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTemplatePart Block Type */\nexport type CoreTemplatePartAttributes = {\n  __typename?: 'CoreTemplatePartAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTemplatePart&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;area&quot; field on the &quot;CoreTemplatePart&quot; block */\n  area?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTemplatePart&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTemplatePart&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;slug&quot; field on the &quot;CoreTemplatePart&quot; block */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The &quot;tagName&quot; field on the &quot;CoreTemplatePart&quot; block */\n  tagName?: Maybe<Scalars['String']['output']>;\n  /** The &quot;theme&quot; field on the &quot;CoreTemplatePart&quot; block */\n  theme?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTermDescription = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTermDescription';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTermDescription Block Type */\n  attributes?: Maybe<CoreTermDescriptionAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTermDescription Block Type */\nexport type CoreTermDescriptionAttributes = {\n  __typename?: 'CoreTermDescriptionAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreTermDescription&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreTermDescription&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreTermDescription&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreTermDescription&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreTermDescription&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTermDescription&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreTermDescription&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreTermDescription&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreTermDescription&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreTextColumns = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreTextColumns';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreTextColumns Block Type */\n  attributes?: Maybe<CoreTextColumnsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreTextColumns Block Type */\nexport type CoreTextColumnsAttributes = {\n  __typename?: 'CoreTextColumnsAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreTextColumns&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;columns&quot; field on the &quot;CoreTextColumns&quot; block */\n  columns?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreTextColumns&quot; block */\n  content?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreTextColumns&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;width&quot; field on the &quot;CoreTextColumns&quot; block */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreVerse = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreVerse';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreVerse Block Type */\n  attributes?: Maybe<CoreVerseAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreVerse Block Type */\nexport type CoreVerseAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreVerseAttributes';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;backgroundColor&quot; field on the &quot;CoreVerse&quot; block */\n  backgroundColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;borderColor&quot; field on the &quot;CoreVerse&quot; block */\n  borderColor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreVerse&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;content&quot; field on the &quot;CoreVerse&quot; block */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontFamily&quot; field on the &quot;CoreVerse&quot; block */\n  fontFamily?: Maybe<Scalars['String']['output']>;\n  /** The &quot;fontSize&quot; field on the &quot;CoreVerse&quot; block */\n  fontSize?: Maybe<Scalars['String']['output']>;\n  /** The &quot;gradient&quot; field on the &quot;CoreVerse&quot; block */\n  gradient?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreVerse&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreVerse&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;textAlign&quot; field on the &quot;CoreVerse&quot; block */\n  textAlign?: Maybe<Scalars['String']['output']>;\n  /** The &quot;textColor&quot; field on the &quot;CoreVerse&quot; block */\n  textColor?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreVideo = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreVideo';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreVideo Block Type */\n  attributes?: Maybe<CoreVideoAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreVideo Block Type */\nexport type CoreVideoAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'CoreVideoAttributes';\n  /** The &quot;align&quot; field on the &quot;CoreVideo&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;autoplay&quot; field on the &quot;CoreVideo&quot; block */\n  autoplay?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;caption&quot; field on the &quot;CoreVideo&quot; block */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;CoreVideo&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;controls&quot; field on the &quot;CoreVideo&quot; block */\n  controls?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;id&quot; field on the &quot;CoreVideo&quot; block */\n  id?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreVideo&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;loop&quot; field on the &quot;CoreVideo&quot; block */\n  loop?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;muted&quot; field on the &quot;CoreVideo&quot; block */\n  muted?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;playsInline&quot; field on the &quot;CoreVideo&quot; block */\n  playsInline?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;poster&quot; field on the &quot;CoreVideo&quot; block */\n  poster?: Maybe<Scalars['String']['output']>;\n  /** The &quot;preload&quot; field on the &quot;CoreVideo&quot; block */\n  preload?: Maybe<Scalars['String']['output']>;\n  /** The &quot;src&quot; field on the &quot;CoreVideo&quot; block */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The &quot;style&quot; field on the &quot;CoreVideo&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;tracks&quot; field on the &quot;CoreVideo&quot; block */\n  tracks?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type CoreWidgetGroup = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'CoreWidgetGroup';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the CoreWidgetGroup Block Type */\n  attributes?: Maybe<CoreWidgetGroupAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the CoreWidgetGroup Block Type */\nexport type CoreWidgetGroupAttributes = {\n  __typename?: 'CoreWidgetGroupAttributes';\n  /** The &quot;className&quot; field on the &quot;CoreWidgetGroup&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;CoreWidgetGroup&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;title&quot; field on the &quot;CoreWidgetGroup&quot; block */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the createCategory mutation. */\nexport type CreateCategoryInput = {\n  /** The slug that the category will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the category object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the category object to mutate */\n  name: Scalars['String']['input'];\n  /** The ID of the category that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createCategory mutation. */\nexport type CreateCategoryPayload = {\n  __typename?: 'CreateCategoryPayload';\n  /** The created category */\n  category?: Maybe<Category>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the createComment mutation. */\nexport type CreateCommentInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n  /** Type of comment. */\n  type?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createComment mutation. */\nexport type CreateCommentPayload = {\n  __typename?: 'CreateCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The comment that was created */\n  comment?: Maybe<Comment>;\n  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Input for the createGraphqlDocument mutation. */\nexport type CreateGraphqlDocumentInput = {\n  /** Alias names for saved GraphQL query documents */\n  alias?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** Description for the saved GraphQL document */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Allow, deny or default access grant for specific query */\n  grant?: InputMaybe<Scalars['String']['input']>;\n  /** HTTP Cache-Control max-age directive for a saved GraphQL document */\n  maxAgeHeader?: InputMaybe<Scalars['Int']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createGraphqlDocument mutation. */\nexport type CreateGraphqlDocumentPayload = {\n  __typename?: 'CreateGraphqlDocumentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  graphqlDocument?: Maybe<GraphqlDocument>;\n};\n\n/** Input for the createMediaItem mutation. */\nexport type CreateMediaItemInput = {\n  /** Alternative text to display when mediaItem is not displayed */\n  altText?: InputMaybe<Scalars['String']['input']>;\n  /** The userId to assign as the author of the mediaItem */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** The caption for the mediaItem */\n  caption?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the mediaItem */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the mediaItem */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The date (in GMT zone) of the mediaItem */\n  dateGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Description of the mediaItem */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The file name of the mediaItem */\n  filePath?: InputMaybe<Scalars['String']['input']>;\n  /** The file type of the mediaItem */\n  fileType?: InputMaybe<MimeTypeEnum>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The ping status for the mediaItem */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the mediaItem */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the mediaItem */\n  status?: InputMaybe<MediaItemStatusEnum>;\n  /** The title of the mediaItem */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createMediaItem mutation. */\nexport type CreateMediaItemPayload = {\n  __typename?: 'CreateMediaItemPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The MediaItem object mutation type. */\n  mediaItem?: Maybe<MediaItem>;\n};\n\n/** Input for the createPage mutation. */\nexport type CreatePageInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createPage mutation. */\nexport type CreatePagePayload = {\n  __typename?: 'CreatePagePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  page?: Maybe<Page>;\n};\n\n/** Input for the createPostFormat mutation. */\nexport type CreatePostFormatInput = {\n  /** The slug that the post_format will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_format object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the post_format object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createPostFormat mutation. */\nexport type CreatePostFormatPayload = {\n  __typename?: 'CreatePostFormatPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_format */\n  postFormat?: Maybe<PostFormat>;\n};\n\n/** Input for the createPost mutation. */\nexport type CreatePostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** Set connections between the post and categories */\n  categories?: InputMaybe<PostCategoriesInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  ncTags?: InputMaybe<Scalars['String']['input']>;\n  ncmazAudioUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazFeaturedImgAlt?: InputMaybe<Scalars['String']['input']>;\n  ncmazFeaturedImgUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg1Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg1Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg2Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg2Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg3Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg3Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg4Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg4Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg5Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg5Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg6Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg6Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg7Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg7Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg8Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg8Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazVideoUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The ping status for the object */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** URLs that have been pinged. */\n  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Set connections between the post and postFormats */\n  postFormats?: InputMaybe<PostPostFormatsInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Set connections between the post and tags */\n  tags?: InputMaybe<PostTagsInput>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** URLs queued to be pinged. */\n  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** The payload for the createPost mutation. */\nexport type CreatePostPayload = {\n  __typename?: 'CreatePostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  post?: Maybe<Post>;\n};\n\n/** Input for the createTag mutation. */\nexport type CreateTagInput = {\n  /** The slug that the post_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the post_tag object to mutate */\n  name: Scalars['String']['input'];\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createTag mutation. */\nexport type CreateTagPayload = {\n  __typename?: 'CreateTagPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_tag */\n  tag?: Maybe<Tag>;\n};\n\n/** Input for the createUser mutation. */\nexport type CreateUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** An array of roles to be assigned to the user. */\n  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** A string that contains the user's username for logging in. */\n  username: Scalars['String']['input'];\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createUser mutation. */\nexport type CreateUserPayload = {\n  __typename?: 'CreateUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** Input for the createUserReactionPost mutation. */\nexport type CreateUserReactionPostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the createUserReactionPost mutation. */\nexport type CreateUserReactionPostPayload = {\n  __typename?: 'CreateUserReactionPostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  userReactionPost?: Maybe<UserReactionPost>;\n};\n\n/** Object that can be identified with a Database ID */\nexport type DatabaseIdentifier = {\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n};\n\n/** Date values */\nexport type DateInput = {\n  /** Day of the month (from 1 to 31) */\n  day?: InputMaybe<Scalars['Int']['input']>;\n  /** Month number (from 1 to 12) */\n  month?: InputMaybe<Scalars['Int']['input']>;\n  /** 4 digit year (e.g. 2017) */\n  year?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Filter the connection based on input */\nexport type DateQueryInput = {\n  /** Nodes should be returned after this date */\n  after?: InputMaybe<DateInput>;\n  /** Nodes should be returned before this date */\n  before?: InputMaybe<DateInput>;\n  /** Column to query against */\n  column?: InputMaybe<PostObjectsConnectionDateColumnEnum>;\n  /** For after/before, whether exact value should be matched or not */\n  compare?: InputMaybe<Scalars['String']['input']>;\n  /** Day of the month (from 1 to 31) */\n  day?: InputMaybe<Scalars['Int']['input']>;\n  /** Hour (from 0 to 23) */\n  hour?: InputMaybe<Scalars['Int']['input']>;\n  /** For after/before, whether exact value should be matched or not */\n  inclusive?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Minute (from 0 to 59) */\n  minute?: InputMaybe<Scalars['Int']['input']>;\n  /** Month number (from 1 to 12) */\n  month?: InputMaybe<Scalars['Int']['input']>;\n  /** OR or AND, how the sub-arrays should be compared */\n  relation?: InputMaybe<RelationEnum>;\n  /** Second (0 to 59) */\n  second?: InputMaybe<Scalars['Int']['input']>;\n  /** Week of the year (from 0 to 53) */\n  week?: InputMaybe<Scalars['Int']['input']>;\n  /** 4 digit year (e.g. 2017) */\n  year?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The template assigned to the node */\nexport type DefaultTemplate = ContentTemplate & {\n  __typename?: 'DefaultTemplate';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the deleteCategory mutation. */\nexport type DeleteCategoryInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteCategory mutation. */\nexport type DeleteCategoryPayload = {\n  __typename?: 'DeleteCategoryPayload';\n  /** The deteted term object */\n  category?: Maybe<Category>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Input for the deleteComment mutation. */\nexport type DeleteCommentInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the comment should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The deleted comment ID */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteComment mutation. */\nexport type DeleteCommentPayload = {\n  __typename?: 'DeleteCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The deleted comment object */\n  comment?: Maybe<Comment>;\n  /** The deleted comment ID */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Input for the deleteGraphqlDocument mutation. */\nexport type DeleteGraphqlDocumentInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the graphqlDocument to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the deleteGraphqlDocument mutation. */\nexport type DeleteGraphqlDocumentPayload = {\n  __typename?: 'DeleteGraphqlDocumentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The object before it was deleted */\n  graphqlDocument?: Maybe<GraphqlDocument>;\n};\n\n/** Input for the deleteMediaItem mutation. */\nexport type DeleteMediaItemInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the mediaItem should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the mediaItem to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteMediaItem mutation. */\nexport type DeleteMediaItemPayload = {\n  __typename?: 'DeleteMediaItemPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted mediaItem */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The mediaItem before it was deleted */\n  mediaItem?: Maybe<MediaItem>;\n};\n\n/** Input for the deletePage mutation. */\nexport type DeletePageInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the page to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the deletePage mutation. */\nexport type DeletePagePayload = {\n  __typename?: 'DeletePagePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The object before it was deleted */\n  page?: Maybe<Page>;\n};\n\n/** Input for the deletePostFormat mutation. */\nexport type DeletePostFormatInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deletePostFormat mutation. */\nexport type DeletePostFormatPayload = {\n  __typename?: 'DeletePostFormatPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The deteted term object */\n  postFormat?: Maybe<PostFormat>;\n};\n\n/** Input for the deletePost mutation. */\nexport type DeletePostInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the post to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the deletePost mutation. */\nexport type DeletePostPayload = {\n  __typename?: 'DeletePostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The object before it was deleted */\n  post?: Maybe<Post>;\n};\n\n/** Input for the deleteTag mutation. */\nexport type DeleteTagInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag to delete */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the deleteTag mutation. */\nexport type DeleteTagPayload = {\n  __typename?: 'DeleteTagPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The deteted term object */\n  tag?: Maybe<Tag>;\n};\n\n/** Input for the deleteUser mutation. */\nexport type DeleteUserInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user you want to delete */\n  id: Scalars['ID']['input'];\n  /** Reassign posts and links to new User ID. */\n  reassignId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The payload for the deleteUser mutation. */\nexport type DeleteUserPayload = {\n  __typename?: 'DeleteUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the user that you just deleted */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The deleted user object */\n  user?: Maybe<User>;\n};\n\n/** Input for the deleteUserReactionPost mutation. */\nexport type DeleteUserReactionPostInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the object should be force deleted instead of being moved to the trash */\n  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the userReactionPost to delete */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the deleteUserReactionPost mutation. */\nexport type DeleteUserReactionPostPayload = {\n  __typename?: 'DeleteUserReactionPostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted object */\n  deletedId?: Maybe<Scalars['ID']['output']>;\n  /** The object before it was deleted */\n  userReactionPost?: Maybe<UserReactionPost>;\n};\n\n/** The discussion setting type */\nexport type DiscussionSettings = {\n  __typename?: 'DiscussionSettings';\n  /** Allow people to submit comments on new posts. */\n  defaultCommentStatus?: Maybe<Scalars['String']['output']>;\n  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */\n  defaultPingStatus?: Maybe<Scalars['String']['output']>;\n};\n\n/** Relational context between connected nodes */\nexport type Edge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected node */\n  node: Node;\n};\n\n/** Blocks that can be edited to create content and layouts */\nexport type EditorBlock = {\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the Block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Asset enqueued by the CMS */\nexport type EnqueuedAsset = {\n  /** @todo */\n  args?: Maybe<Scalars['Boolean']['output']>;\n  /** Dependencies needed to use this asset */\n  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;\n  /** Extra information needed for the script */\n  extra?: Maybe<Scalars['String']['output']>;\n  /** The handle of the enqueued asset */\n  handle?: Maybe<Scalars['String']['output']>;\n  /** The ID of the enqueued asset */\n  id: Scalars['ID']['output'];\n  /** The source of the asset */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The version of the enqueued asset */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Script enqueued by the CMS */\nexport type EnqueuedScript = EnqueuedAsset & Node & {\n  __typename?: 'EnqueuedScript';\n  /** @todo */\n  args?: Maybe<Scalars['Boolean']['output']>;\n  /** Dependencies needed to use this asset */\n  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;\n  /** Extra information needed for the script */\n  extra?: Maybe<Scalars['String']['output']>;\n  /** The handle of the enqueued asset */\n  handle?: Maybe<Scalars['String']['output']>;\n  /** The ID of the enqueued asset */\n  id: Scalars['ID']['output'];\n  /** The source of the asset */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The version of the enqueued asset */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to EnqueuedScript Nodes */\nexport type EnqueuedScriptConnection = {\n  /** A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes */\n  edges: Array<EnqueuedScriptConnectionEdge>;\n  /** A list of connected EnqueuedScript Nodes */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: EnqueuedScriptConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected EnqueuedScript */\nexport type EnqueuedScriptConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected EnqueuedScript Node */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the connected EnqueuedScriptConnectionEdge */\nexport type EnqueuedScriptConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Stylesheet enqueued by the CMS */\nexport type EnqueuedStylesheet = EnqueuedAsset & Node & {\n  __typename?: 'EnqueuedStylesheet';\n  /** @todo */\n  args?: Maybe<Scalars['Boolean']['output']>;\n  /** Dependencies needed to use this asset */\n  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;\n  /** Extra information needed for the script */\n  extra?: Maybe<Scalars['String']['output']>;\n  /** The handle of the enqueued asset */\n  handle?: Maybe<Scalars['String']['output']>;\n  /** The ID of the enqueued asset */\n  id: Scalars['ID']['output'];\n  /** The source of the asset */\n  src?: Maybe<Scalars['String']['output']>;\n  /** The version of the enqueued asset */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to EnqueuedStylesheet Nodes */\nexport type EnqueuedStylesheetConnection = {\n  /** A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes */\n  edges: Array<EnqueuedStylesheetConnectionEdge>;\n  /** A list of connected EnqueuedStylesheet Nodes */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: EnqueuedStylesheetConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected EnqueuedStylesheet */\nexport type EnqueuedStylesheetConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected EnqueuedStylesheet Node */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the connected EnqueuedStylesheetConnectionEdge */\nexport type EnqueuedStylesheetConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The general setting type */\nexport type GeneralSettings = {\n  __typename?: 'GeneralSettings';\n  /** A date format for all date strings. */\n  dateFormat?: Maybe<Scalars['String']['output']>;\n  /** Site tagline. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** This address is used for admin purposes, like new user notification. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** WordPress locale code. */\n  language?: Maybe<Scalars['String']['output']>;\n  /** A day number of the week that the week should start on. */\n  startOfWeek?: Maybe<Scalars['Int']['output']>;\n  /** A time format for all time strings. */\n  timeFormat?: Maybe<Scalars['String']['output']>;\n  /** A city in the same timezone as you. */\n  timezone?: Maybe<Scalars['String']['output']>;\n  /** Site title. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** Site URL. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the generateAuthorizationCode mutation. */\nexport type GenerateAuthorizationCodeInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Email for WordPress user */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** Password for WordPress user */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Username for WordPress user */\n  username?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the generateAuthorizationCode mutation. */\nexport type GenerateAuthorizationCodePayload = {\n  __typename?: 'GenerateAuthorizationCodePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Authorization code used for requesting refresh/access tokens */\n  code?: Maybe<Scalars['String']['output']>;\n  /** Error encountered during user authentication, if any */\n  error?: Maybe<Scalars['String']['output']>;\n};\n\n/** Types of styles to load */\nexport enum GlobalStylesheetTypesEnum {\n  BaseLayoutStyles = 'BASE_LAYOUT_STYLES',\n  Presets = 'PRESETS',\n  Styles = 'STYLES',\n  Variables = 'VARIABLES'\n}\n\n/** The graphqlDocument type */\nexport type GraphqlDocument = ContentNode & DatabaseIdentifier & Node & NodeWithContentEditor & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable & {\n  __typename?: 'GraphqlDocument';\n  /** Alias names for saved GraphQL query documents */\n  alias?: Maybe<Array<Scalars['String']['output']>>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The content of the post. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** Description for the saved GraphQL document */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** Allow, deny or default access grant for specific query */\n  grant?: Maybe<Scalars['String']['output']>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  graphqlDocumentId: Scalars['Int']['output'];\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the graphql_document object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** HTTP Cache-Control max-age directive for a saved GraphQL document */\n  maxAgeHeader?: Maybe<Scalars['Int']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /**\n   * Connection between the GraphqlDocument type and the graphqlDocument type\n   * @deprecated The &quot;GraphqlDocument&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future.\n   */\n  preview?: Maybe<GraphqlDocumentToPreviewConnectionEdge>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to the node */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The graphqlDocument type */\nexport type GraphqlDocumentContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The graphqlDocument type */\nexport type GraphqlDocumentEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The graphqlDocument type */\nexport type GraphqlDocumentEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The graphqlDocument type */\nexport type GraphqlDocumentTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Connection to graphqlDocument Nodes */\nexport type GraphqlDocumentConnection = {\n  /** A list of edges (relational context) between RootQuery and connected graphqlDocument Nodes */\n  edges: Array<GraphqlDocumentConnectionEdge>;\n  /** A list of connected graphqlDocument Nodes */\n  nodes: Array<GraphqlDocument>;\n  /** Information about pagination in a connection. */\n  pageInfo: GraphqlDocumentConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected graphqlDocument */\nexport type GraphqlDocumentConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected graphqlDocument Node */\n  node: GraphqlDocument;\n};\n\n/** Page Info on the connected GraphqlDocumentConnectionEdge */\nexport type GraphqlDocumentConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum GraphqlDocumentIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  Slug = 'SLUG',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Connection between the GraphqlDocument type and the graphqlDocument type */\nexport type GraphqlDocumentToPreviewConnectionEdge = Edge & GraphqlDocumentConnectionEdge & OneToOneConnection & {\n  __typename?: 'GraphqlDocumentToPreviewConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /**\n   * The node of the connection, without the edges\n   * @deprecated The &quot;GraphqlDocument&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future.\n   */\n  node: GraphqlDocument;\n};\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNode = {\n  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;\n  /** Connection between the HierarchicalContentNode type and the ContentNode type */\n  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** The parent of the node. The parent object can be of various types */\n  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Content node with hierarchical (parent/child) relationships */\nexport type HierarchicalContentNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection between the HierarchicalContentNode type and the ContentNode type */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnection = Connection & ContentNodeConnection & {\n  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnection';\n  /** Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection */\n  edges: Array<HierarchicalContentNodeToContentNodeAncestorsConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot; */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */\nexport type HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the HierarchicalContentNode type and the ContentNode type */\nexport type HierarchicalContentNodeToContentNodeChildrenConnection = Connection & ContentNodeConnection & {\n  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnection';\n  /** Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection */\n  edges: Array<HierarchicalContentNodeToContentNodeChildrenConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type HierarchicalContentNodeToContentNodeChildrenConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot; */\nexport type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */\nexport type HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the HierarchicalContentNode type and the ContentNode type */\nexport type HierarchicalContentNodeToParentContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'HierarchicalContentNodeToParentContentNodeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentNode;\n};\n\n/** Node with hierarchical (parent/child) relationships */\nexport type HierarchicalNode = {\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Term node with hierarchical (parent/child) relationships */\nexport type HierarchicalTermNode = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Term node with hierarchical (parent/child) relationships */\nexport type HierarchicalTermNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Term node with hierarchical (parent/child) relationships */\nexport type HierarchicalTermNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A block used for editing the site */\nexport type MailpoetSubscriptionFormBlock = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'MailpoetSubscriptionFormBlock';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the MailpoetSubscriptionFormBlock Block Type */\n  attributes?: Maybe<MailpoetSubscriptionFormBlockAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the MailpoetSubscriptionFormBlock Block Type */\nexport type MailpoetSubscriptionFormBlockAttributes = {\n  __typename?: 'MailpoetSubscriptionFormBlockAttributes';\n  /** The &quot;className&quot; field on the &quot;MailpoetSubscriptionFormBlock&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;MailpoetSubscriptionFormBlock&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type MailpoetSubscriptionFormBlockRender = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'MailpoetSubscriptionFormBlockRender';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the MailpoetSubscriptionFormBlockRender Block Type */\n  attributes?: Maybe<MailpoetSubscriptionFormBlockRenderAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the MailpoetSubscriptionFormBlockRender Block Type */\nexport type MailpoetSubscriptionFormBlockRenderAttributes = {\n  __typename?: 'MailpoetSubscriptionFormBlockRenderAttributes';\n  /** The &quot;className&quot; field on the &quot;MailpoetSubscriptionFormBlockRender&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;formId&quot; field on the &quot;MailpoetSubscriptionFormBlockRender&quot; block */\n  formId?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;lock&quot; field on the &quot;MailpoetSubscriptionFormBlockRender&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** File details for a Media Item */\nexport type MediaDetails = {\n  __typename?: 'MediaDetails';\n  /** The filename of the mediaItem */\n  file?: Maybe<Scalars['String']['output']>;\n  /** The height of the mediaItem */\n  height?: Maybe<Scalars['Int']['output']>;\n  /** Meta information associated with the mediaItem */\n  meta?: Maybe<MediaItemMeta>;\n  /** The available sizes of the mediaItem */\n  sizes?: Maybe<Array<Maybe<MediaSize>>>;\n  /** The width of the mediaItem */\n  width?: Maybe<Scalars['Int']['output']>;\n};\n\n\n/** File details for a Media Item */\nexport type MediaDetailsSizesArgs = {\n  exclude?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;\n  include?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;\n};\n\n/** The mediaItem type */\nexport type MediaItem = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable & {\n  __typename?: 'MediaItem';\n  /** Alternative text to display when resource is not displayed */\n  altText?: Maybe<Scalars['String']['output']>;\n  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** The caption for the resource */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** Connection between the HierarchicalContentNode type and the ContentNode type */\n  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** Connection between the MediaItem type and the Comment type */\n  comments?: Maybe<MediaItemToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** Description of the image (stored as post_content) */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The filesize in bytes of the resource */\n  fileSize?: Maybe<Scalars['Int']['output']>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the attachment object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** Details about the mediaItem */\n  mediaDetails?: Maybe<MediaDetails>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  mediaItemId: Scalars['Int']['output'];\n  /** Url of the mediaItem */\n  mediaItemUrl?: Maybe<Scalars['String']['output']>;\n  /** Type of resource */\n  mediaType?: Maybe<Scalars['String']['output']>;\n  /** The mime type of the mediaItem */\n  mimeType?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** The parent of the node. The parent object can be of various types */\n  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The sizes attribute value for an image. */\n  sizes?: Maybe<Scalars['String']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** Url of the mediaItem */\n  sourceUrl?: Maybe<Scalars['String']['output']>;\n  /** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */\n  srcSet?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemCaptionArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<MediaItemToCommentConnectionWhereArgs>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemDescriptionArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemFileSizeArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemSizesArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemSourceUrlArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemSrcSetArgs = {\n  size?: InputMaybe<MediaItemSizeEnum>;\n};\n\n\n/** The mediaItem type */\nexport type MediaItemTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Connection to mediaItem Nodes */\nexport type MediaItemConnection = {\n  /** A list of edges (relational context) between RootQuery and connected mediaItem Nodes */\n  edges: Array<MediaItemConnectionEdge>;\n  /** A list of connected mediaItem Nodes */\n  nodes: Array<MediaItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MediaItemConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected mediaItem */\nexport type MediaItemConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected mediaItem Node */\n  node: MediaItem;\n};\n\n/** Page Info on the connected MediaItemConnectionEdge */\nexport type MediaItemConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum MediaItemIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  Slug = 'SLUG',\n  /** Identify a media item by its source url */\n  SourceUrl = 'SOURCE_URL',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Meta connected to a MediaItem */\nexport type MediaItemMeta = {\n  __typename?: 'MediaItemMeta';\n  /** Aperture measurement of the media item. */\n  aperture?: Maybe<Scalars['Float']['output']>;\n  /** Information about the camera used to create the media item. */\n  camera?: Maybe<Scalars['String']['output']>;\n  /** The text string description associated with the media item. */\n  caption?: Maybe<Scalars['String']['output']>;\n  /** Copyright information associated with the media item. */\n  copyright?: Maybe<Scalars['String']['output']>;\n  /** The date/time when the media was created. */\n  createdTimestamp?: Maybe<Scalars['Int']['output']>;\n  /** The original creator of the media item. */\n  credit?: Maybe<Scalars['String']['output']>;\n  /** The focal length value of the media item. */\n  focalLength?: Maybe<Scalars['Float']['output']>;\n  /** The ISO (International Organization for Standardization) value of the media item. */\n  iso?: Maybe<Scalars['Int']['output']>;\n  /** List of keywords used to describe or identfy the media item. */\n  keywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The vertical or horizontal aspect of the media item. */\n  orientation?: Maybe<Scalars['String']['output']>;\n  /** The shutter speed information of the media item. */\n  shutterSpeed?: Maybe<Scalars['Float']['output']>;\n  /** A useful title for the media item. */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n/** The size of the media item object. */\nexport enum MediaItemSizeEnum {\n  /** MediaItem with the large size */\n  Large = 'LARGE',\n  /** MediaItem with the mailpoet_newsletter_max size */\n  MailpoetNewsletterMax = 'MAILPOET_NEWSLETTER_MAX',\n  /** MediaItem with the medium size */\n  Medium = 'MEDIUM',\n  /** MediaItem with the medium_large size */\n  MediumLarge = 'MEDIUM_LARGE',\n  /** MediaItem with the thumbnail size */\n  Thumbnail = 'THUMBNAIL',\n  /** MediaItem with the 1536x1536 size */\n  '1536X1536' = '_1536X1536',\n  /** MediaItem with the 2048x2048 size */\n  '2048X2048' = '_2048X2048'\n}\n\n/** The status of the media item object. */\nexport enum MediaItemStatusEnum {\n  /** Objects with the auto-draft status */\n  AutoDraft = 'AUTO_DRAFT',\n  /** Objects with the inherit status */\n  Inherit = 'INHERIT',\n  /** Objects with the private status */\n  Private = 'PRIVATE',\n  /** Objects with the trash status */\n  Trash = 'TRASH'\n}\n\n/** Connection between the MediaItem type and the Comment type */\nexport type MediaItemToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'MediaItemToCommentConnection';\n  /** Edges for the MediaItemToCommentConnection connection */\n  edges: Array<MediaItemToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: MediaItemToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type MediaItemToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'MediaItemToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;MediaItemToCommentConnection&quot; */\nexport type MediaItemToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'MediaItemToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the MediaItemToCommentConnection connection */\nexport type MediaItemToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Details of an available size for a media item */\nexport type MediaSize = {\n  __typename?: 'MediaSize';\n  /** The filename of the referenced size */\n  file?: Maybe<Scalars['String']['output']>;\n  /** The filesize of the resource */\n  fileSize?: Maybe<Scalars['Int']['output']>;\n  /** The height of the referenced size */\n  height?: Maybe<Scalars['String']['output']>;\n  /** The mime type of the referenced size */\n  mimeType?: Maybe<Scalars['String']['output']>;\n  /** The referenced size name */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url of the referenced size */\n  sourceUrl?: Maybe<Scalars['String']['output']>;\n  /** The width of the referenced size */\n  width?: Maybe<Scalars['String']['output']>;\n};\n\n/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */\nexport type Menu = DatabaseIdentifier & Node & {\n  __typename?: 'Menu';\n  /** The number of items in the menu */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The globally unique identifier of the nav menu object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The locations a menu is assigned to */\n  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;\n  /**\n   * WP ID of the nav menu.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  menuId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Menu type and the MenuItem type */\n  menuItems?: Maybe<MenuToMenuItemConnection>;\n  /** Display name of the menu. Equivalent to WP_Term-&gt;name. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */\n  slug?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */\nexport type MenuMenuItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<MenuToMenuItemConnectionWhereArgs>;\n};\n\n/** Connection to Menu Nodes */\nexport type MenuConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Menu Nodes */\n  edges: Array<MenuConnectionEdge>;\n  /** A list of connected Menu Nodes */\n  nodes: Array<Menu>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Menu */\nexport type MenuConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Menu Node */\n  node: Menu;\n};\n\n/** Page Info on the connected MenuConnectionEdge */\nexport type MenuConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */\nexport type MenuItem = DatabaseIdentifier & Node & WithAcfNcmazfaustMenu & {\n  __typename?: 'MenuItem';\n  /** Connection between the MenuItem type and the MenuItem type */\n  childItems?: Maybe<MenuItemToMenuItemConnection>;\n  /** Connection from MenuItem to it&#039;s connected node */\n  connectedNode?: Maybe<MenuItemToMenuItemLinkableConnectionEdge>;\n  /**\n   * The object connected to this menu item.\n   * @deprecated Deprecated in favor of the connectedNode field\n   */\n  connectedObject?: Maybe<MenuItemObjectUnion>;\n  /** Class attribute for the menu item link */\n  cssClasses?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Description of the menu item. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the nav menu item object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Label or title of the menu item. */\n  label?: Maybe<Scalars['String']['output']>;\n  /** Link relationship (XFN) of the menu item. */\n  linkRelationship?: Maybe<Scalars['String']['output']>;\n  /** The locations the menu item&#039;s Menu is assigned to */\n  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;\n  /** The Menu a MenuItem is part of */\n  menu?: Maybe<MenuItemToMenuConnectionEdge>;\n  /**\n   * WP ID of the menu item.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  menuItemId?: Maybe<Scalars['Int']['output']>;\n  /** Fields of the NcmazfaustMenu ACF Field Group */\n  ncmazfaustMenu?: Maybe<NcmazfaustMenu>;\n  /** Menu item order */\n  order?: Maybe<Scalars['Int']['output']>;\n  /** The database id of the parent menu item or null if it is the root */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent nav menu item object. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Path for the resource. Relative path for internal resources. Absolute path for external resources. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** Target attribute for the menu item link. */\n  target?: Maybe<Scalars['String']['output']>;\n  /** Title attribute for the menu item link */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The uri of the resource the menu item links to */\n  uri?: Maybe<Scalars['String']['output']>;\n  /** URL or destination of the menu item. */\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */\nexport type MenuItemChildItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<MenuItemToMenuItemConnectionWhereArgs>;\n};\n\n/** Connection to MenuItem Nodes */\nexport type MenuItemConnection = {\n  /** A list of edges (relational context) between RootQuery and connected MenuItem Nodes */\n  edges: Array<MenuItemConnectionEdge>;\n  /** A list of connected MenuItem Nodes */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuItemConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected MenuItem */\nexport type MenuItemConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected MenuItem Node */\n  node: MenuItem;\n};\n\n/** Page Info on the connected MenuItemConnectionEdge */\nexport type MenuItemConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Nodes that can be linked to as Menu Items */\nexport type MenuItemLinkable = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n/** Edge between a Node and a connected MenuItemLinkable */\nexport type MenuItemLinkableConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected MenuItemLinkable Node */\n  node: MenuItemLinkable;\n};\n\n/** The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum MenuItemNodeIdTypeEnum {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID'\n}\n\n/** Deprecated in favor of MenuItemLinkeable Interface */\nexport type MenuItemObjectUnion = Category | Page | Post | PostFormat | Tag | UserReactionPost;\n\n/** Connection between the MenuItem type and the Menu type */\nexport type MenuItemToMenuConnectionEdge = Edge & MenuConnectionEdge & OneToOneConnection & {\n  __typename?: 'MenuItemToMenuConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Menu;\n};\n\n/** Connection between the MenuItem type and the MenuItem type */\nexport type MenuItemToMenuItemConnection = Connection & MenuItemConnection & {\n  __typename?: 'MenuItemToMenuItemConnection';\n  /** Edges for the MenuItemToMenuItemConnection connection */\n  edges: Array<MenuItemToMenuItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuItemToMenuItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type MenuItemToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {\n  __typename?: 'MenuItemToMenuItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MenuItem;\n};\n\n/** Page Info on the &quot;MenuItemToMenuItemConnection&quot; */\nexport type MenuItemToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'MenuItemToMenuItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the MenuItemToMenuItemConnection connection */\nexport type MenuItemToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the MenuItem type and the MenuItemLinkable type */\nexport type MenuItemToMenuItemLinkableConnectionEdge = Edge & MenuItemLinkableConnectionEdge & OneToOneConnection & {\n  __typename?: 'MenuItemToMenuItemLinkableConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MenuItemLinkable;\n};\n\n/** Registered menu locations */\nexport enum MenuLocationEnum {\n  /** Put the menu in the footer location */\n  Footer = 'FOOTER',\n  /** Put the menu in the primary location */\n  Primary = 'PRIMARY'\n}\n\n/** The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum MenuNodeIdTypeEnum {\n  /** Identify a menu node by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a menu node by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a menu node by the slug of menu location to which it is assigned */\n  Location = 'LOCATION',\n  /** Identify a menu node by its name */\n  Name = 'NAME',\n  /** Identify a menu node by its slug */\n  Slug = 'SLUG'\n}\n\n/** Connection between the Menu type and the MenuItem type */\nexport type MenuToMenuItemConnection = Connection & MenuItemConnection & {\n  __typename?: 'MenuToMenuItemConnection';\n  /** Edges for the MenuToMenuItemConnection connection */\n  edges: Array<MenuToMenuItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: MenuToMenuItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type MenuToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {\n  __typename?: 'MenuToMenuItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MenuItem;\n};\n\n/** Page Info on the &quot;MenuToMenuItemConnection&quot; */\nexport type MenuToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'MenuToMenuItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the MenuToMenuItemConnection connection */\nexport type MenuToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The MimeType of the object */\nexport enum MimeTypeEnum {\n  /** application/java mime type. */\n  ApplicationJava = 'APPLICATION_JAVA',\n  /** application/msword mime type. */\n  ApplicationMsword = 'APPLICATION_MSWORD',\n  /** application/octet-stream mime type. */\n  ApplicationOctetStream = 'APPLICATION_OCTET_STREAM',\n  /** application/onenote mime type. */\n  ApplicationOnenote = 'APPLICATION_ONENOTE',\n  /** application/oxps mime type. */\n  ApplicationOxps = 'APPLICATION_OXPS',\n  /** application/pdf mime type. */\n  ApplicationPdf = 'APPLICATION_PDF',\n  /** application/rar mime type. */\n  ApplicationRar = 'APPLICATION_RAR',\n  /** application/rtf mime type. */\n  ApplicationRtf = 'APPLICATION_RTF',\n  /** application/ttaf+xml mime type. */\n  ApplicationTtafXml = 'APPLICATION_TTAF_XML',\n  /** application/vnd.apple.keynote mime type. */\n  ApplicationVndAppleKeynote = 'APPLICATION_VND_APPLE_KEYNOTE',\n  /** application/vnd.apple.numbers mime type. */\n  ApplicationVndAppleNumbers = 'APPLICATION_VND_APPLE_NUMBERS',\n  /** application/vnd.apple.pages mime type. */\n  ApplicationVndApplePages = 'APPLICATION_VND_APPLE_PAGES',\n  /** application/vnd.ms-access mime type. */\n  ApplicationVndMsAccess = 'APPLICATION_VND_MS_ACCESS',\n  /** application/vnd.ms-excel mime type. */\n  ApplicationVndMsExcel = 'APPLICATION_VND_MS_EXCEL',\n  /** application/vnd.ms-excel.addin.macroEnabled.12 mime type. */\n  ApplicationVndMsExcelAddinMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',\n  /** application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type. */\n  ApplicationVndMsExcelSheetBinaryMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',\n  /** application/vnd.ms-excel.sheet.macroEnabled.12 mime type. */\n  ApplicationVndMsExcelSheetMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',\n  /** application/vnd.ms-excel.template.macroEnabled.12 mime type. */\n  ApplicationVndMsExcelTemplateMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint mime type. */\n  ApplicationVndMsPowerpoint = 'APPLICATION_VND_MS_POWERPOINT',\n  /** application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type. */\n  ApplicationVndMsPowerpointAddinMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type. */\n  ApplicationVndMsPowerpointPresentationMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type. */\n  ApplicationVndMsPowerpointSlideshowMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type. */\n  ApplicationVndMsPowerpointSlideMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',\n  /** application/vnd.ms-powerpoint.template.macroEnabled.12 mime type. */\n  ApplicationVndMsPowerpointTemplateMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',\n  /** application/vnd.ms-project mime type. */\n  ApplicationVndMsProject = 'APPLICATION_VND_MS_PROJECT',\n  /** application/vnd.ms-word.document.macroEnabled.12 mime type. */\n  ApplicationVndMsWordDocumentMacroenabled_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',\n  /** application/vnd.ms-word.template.macroEnabled.12 mime type. */\n  ApplicationVndMsWordTemplateMacroenabled_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',\n  /** application/vnd.ms-write mime type. */\n  ApplicationVndMsWrite = 'APPLICATION_VND_MS_WRITE',\n  /** application/vnd.ms-xpsdocument mime type. */\n  ApplicationVndMsXpsdocument = 'APPLICATION_VND_MS_XPSDOCUMENT',\n  /** application/vnd.oasis.opendocument.chart mime type. */\n  ApplicationVndOasisOpendocumentChart = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',\n  /** application/vnd.oasis.opendocument.database mime type. */\n  ApplicationVndOasisOpendocumentDatabase = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',\n  /** application/vnd.oasis.opendocument.formula mime type. */\n  ApplicationVndOasisOpendocumentFormula = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',\n  /** application/vnd.oasis.opendocument.graphics mime type. */\n  ApplicationVndOasisOpendocumentGraphics = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',\n  /** application/vnd.oasis.opendocument.presentation mime type. */\n  ApplicationVndOasisOpendocumentPresentation = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',\n  /** application/vnd.oasis.opendocument.spreadsheet mime type. */\n  ApplicationVndOasisOpendocumentSpreadsheet = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',\n  /** application/vnd.oasis.opendocument.text mime type. */\n  ApplicationVndOasisOpendocumentText = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',\n  /** application/vnd.openxmlformats-officedocument.presentationml.presentation mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',\n  /** application/vnd.openxmlformats-officedocument.presentationml.slide mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',\n  /** application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',\n  /** application/vnd.openxmlformats-officedocument.presentationml.template mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',\n  /** application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',\n  /** application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',\n  /** application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',\n  /** application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type. */\n  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',\n  /** application/wordperfect mime type. */\n  ApplicationWordperfect = 'APPLICATION_WORDPERFECT',\n  /** application/x-7z-compressed mime type. */\n  ApplicationX_7ZCompressed = 'APPLICATION_X_7Z_COMPRESSED',\n  /** application/x-gzip mime type. */\n  ApplicationXGzip = 'APPLICATION_X_GZIP',\n  /** application/x-tar mime type. */\n  ApplicationXTar = 'APPLICATION_X_TAR',\n  /** application/zip mime type. */\n  ApplicationZip = 'APPLICATION_ZIP',\n  /** audio/aac mime type. */\n  AudioAac = 'AUDIO_AAC',\n  /** audio/flac mime type. */\n  AudioFlac = 'AUDIO_FLAC',\n  /** audio/midi mime type. */\n  AudioMidi = 'AUDIO_MIDI',\n  /** audio/mpeg mime type. */\n  AudioMpeg = 'AUDIO_MPEG',\n  /** audio/ogg mime type. */\n  AudioOgg = 'AUDIO_OGG',\n  /** audio/wav mime type. */\n  AudioWav = 'AUDIO_WAV',\n  /** audio/x-matroska mime type. */\n  AudioXMatroska = 'AUDIO_X_MATROSKA',\n  /** audio/x-ms-wax mime type. */\n  AudioXMsWax = 'AUDIO_X_MS_WAX',\n  /** audio/x-ms-wma mime type. */\n  AudioXMsWma = 'AUDIO_X_MS_WMA',\n  /** audio/x-realaudio mime type. */\n  AudioXRealaudio = 'AUDIO_X_REALAUDIO',\n  /** image/bmp mime type. */\n  ImageBmp = 'IMAGE_BMP',\n  /** image/gif mime type. */\n  ImageGif = 'IMAGE_GIF',\n  /** image/heic mime type. */\n  ImageHeic = 'IMAGE_HEIC',\n  /** image/jpeg mime type. */\n  ImageJpeg = 'IMAGE_JPEG',\n  /** image/png mime type. */\n  ImagePng = 'IMAGE_PNG',\n  /** image/tiff mime type. */\n  ImageTiff = 'IMAGE_TIFF',\n  /** image/webp mime type. */\n  ImageWebp = 'IMAGE_WEBP',\n  /** image/x-icon mime type. */\n  ImageXIcon = 'IMAGE_X_ICON',\n  /** text/calendar mime type. */\n  TextCalendar = 'TEXT_CALENDAR',\n  /** text/css mime type. */\n  TextCss = 'TEXT_CSS',\n  /** text/csv mime type. */\n  TextCsv = 'TEXT_CSV',\n  /** text/plain mime type. */\n  TextPlain = 'TEXT_PLAIN',\n  /** text/richtext mime type. */\n  TextRichtext = 'TEXT_RICHTEXT',\n  /** text/tab-separated-values mime type. */\n  TextTabSeparatedValues = 'TEXT_TAB_SEPARATED_VALUES',\n  /** text/vtt mime type. */\n  TextVtt = 'TEXT_VTT',\n  /** video/3gpp mime type. */\n  Video_3Gpp = 'VIDEO_3GPP',\n  /** video/3gpp2 mime type. */\n  Video_3Gpp2 = 'VIDEO_3GPP2',\n  /** video/avi mime type. */\n  VideoAvi = 'VIDEO_AVI',\n  /** video/divx mime type. */\n  VideoDivx = 'VIDEO_DIVX',\n  /** video/mp4 mime type. */\n  VideoMp4 = 'VIDEO_MP4',\n  /** video/mpeg mime type. */\n  VideoMpeg = 'VIDEO_MPEG',\n  /** video/ogg mime type. */\n  VideoOgg = 'VIDEO_OGG',\n  /** video/quicktime mime type. */\n  VideoQuicktime = 'VIDEO_QUICKTIME',\n  /** video/webm mime type. */\n  VideoWebm = 'VIDEO_WEBM',\n  /** video/x-flv mime type. */\n  VideoXFlv = 'VIDEO_X_FLV',\n  /** video/x-matroska mime type. */\n  VideoXMatroska = 'VIDEO_X_MATROSKA',\n  /** video/x-ms-asf mime type. */\n  VideoXMsAsf = 'VIDEO_X_MS_ASF',\n  /** video/x-ms-wm mime type. */\n  VideoXMsWm = 'VIDEO_X_MS_WM',\n  /** video/x-ms-wmv mime type. */\n  VideoXMsWmv = 'VIDEO_X_MS_WMV',\n  /** video/x-ms-wmx mime type. */\n  VideoXMsWmx = 'VIDEO_X_MS_WMX'\n}\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcPostMetaData = AcfFieldGroup & AcfFieldGroupFields & NcPostMetaData_Fields & {\n  __typename?: 'NcPostMetaData';\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  likesCount?: Maybe<Scalars['Float']['output']>;\n  /** Reading time in minutes. */\n  readingTime?: Maybe<Scalars['Float']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  savedsCount?: Maybe<Scalars['Float']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  showRightSidebar?: Maybe<Scalars['Boolean']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  template?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  viewsCount?: Maybe<Scalars['Float']['output']>;\n};\n\n/** Interface representing fields of the ACF &quot;NcPostMetaData&quot; Field Group */\nexport type NcPostMetaData_Fields = {\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  likesCount?: Maybe<Scalars['Float']['output']>;\n  /** Reading time in minutes. */\n  readingTime?: Maybe<Scalars['Float']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  savedsCount?: Maybe<Scalars['Float']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  showRightSidebar?: Maybe<Scalars['Boolean']['output']>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  template?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Field added to the schema as part of the &quot;NcPostMetaData&quot; Field Group */\n  viewsCount?: Maybe<Scalars['Float']['output']>;\n};\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcTaxonomyMeta = AcfFieldGroup & AcfFieldGroupFields & NcTaxonomyMeta_Fields & {\n  __typename?: 'NcTaxonomyMeta';\n  /** Field added to the schema as part of the &quot;NcTaxonomyMeta&quot; Field Group */\n  color?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Field added to the schema as part of the &quot;NcTaxonomyMeta&quot; Field Group */\n  featuredImage?: Maybe<NcTaxonomyMetaFeaturedImageToMediaItemConnectionEdge>;\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the NcTaxonomyMeta type and the MediaItem type */\nexport type NcTaxonomyMetaFeaturedImageToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcTaxonomyMetaFeaturedImageToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Interface representing fields of the ACF &quot;NcTaxonomyMeta&quot; Field Group */\nexport type NcTaxonomyMeta_Fields = {\n  /** Field added to the schema as part of the &quot;NcTaxonomyMeta&quot; Field Group */\n  color?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Field added to the schema as part of the &quot;NcTaxonomyMeta&quot; Field Group */\n  featuredImage?: Maybe<NcTaxonomyMetaFeaturedImageToMediaItemConnectionEdge>;\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcUserMeta = AcfFieldGroup & AcfFieldGroupFields & NcUserMeta_Fields & {\n  __typename?: 'NcUserMeta';\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  backgroundImage?: Maybe<NcUserMetaBackgroundImageToMediaItemConnectionEdge>;\n  /** You should have an account here or something similar -  https://www.buymeacoffee.com */\n  buymeacoffeUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  color?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  facebookUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  featuredImage?: Maybe<NcUserMetaFeaturedImageToMediaItemConnectionEdge>;\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  githubUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  instagramUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  linkedinUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  mediumUrl?: Maybe<Scalars['String']['output']>;\n  /** Job/Career of the user. Example: Web Developer, Designer, etc. */\n  ncBio?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  pinterestUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  tiktokUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  twitchUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  twitterUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  vimeoUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  websiteUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  youtubeUrl?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the NcUserMeta type and the MediaItem type */\nexport type NcUserMetaBackgroundImageToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcUserMetaBackgroundImageToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcUserMeta type and the MediaItem type */\nexport type NcUserMetaFeaturedImageToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcUserMetaFeaturedImageToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Interface representing fields of the ACF &quot;NcUserMeta&quot; Field Group */\nexport type NcUserMeta_Fields = {\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  backgroundImage?: Maybe<NcUserMetaBackgroundImageToMediaItemConnectionEdge>;\n  /** You should have an account here or something similar -  https://www.buymeacoffee.com */\n  buymeacoffeUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  color?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  facebookUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  featuredImage?: Maybe<NcUserMetaFeaturedImageToMediaItemConnectionEdge>;\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  githubUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  instagramUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  linkedinUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  mediumUrl?: Maybe<Scalars['String']['output']>;\n  /** Job/Career of the user. Example: Web Developer, Designer, etc. */\n  ncBio?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  pinterestUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  tiktokUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  twitchUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  twitterUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  vimeoUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  websiteUrl?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcUserMeta&quot; Field Group */\n  youtubeUrl?: Maybe<Scalars['String']['output']>;\n};\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcmazAudioUrl = AcfFieldGroup & AcfFieldGroupFields & NcmazAudioUrl_Fields & {\n  __typename?: 'NcmazAudioUrl';\n  /** Field added to the schema as part of the &quot;NcmazAudioUrl&quot; Field Group */\n  audioUrl?: Maybe<Scalars['String']['output']>;\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Interface representing fields of the ACF &quot;NcmazAudioUrl&quot; Field Group */\nexport type NcmazAudioUrl_Fields = {\n  /** Field added to the schema as part of the &quot;NcmazAudioUrl&quot; Field Group */\n  audioUrl?: Maybe<Scalars['String']['output']>;\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the ncmazFaustAddSubscriberToMailpoet mutation. */\nexport type NcmazFaustAddSubscriberToMailpoetInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** listId */\n  listId?: InputMaybe<Scalars['String']['input']>;\n  /** Email of user */\n  user_email?: InputMaybe<Scalars['String']['input']>;\n  /** Email of user */\n  user_first_name?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the ncmazFaustAddSubscriberToMailpoet mutation. */\nexport type NcmazFaustAddSubscriberToMailpoetPayload = {\n  __typename?: 'NcmazFaustAddSubscriberToMailpoetPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Error of this mutation */\n  errors?: Maybe<Scalars['String']['output']>;\n  /** Is Added success! */\n  success?: Maybe<Scalars['Boolean']['output']>;\n  /** Email of user */\n  user_email?: Maybe<Scalars['String']['output']>;\n  /** Email of user */\n  user_first_name?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type NcmazFaustBlockCta = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'NcmazFaustBlockCta';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the NcmazFaustBlockCta Block Type */\n  attributes?: Maybe<NcmazFaustBlockCtaAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the NcmazFaustBlockCta Block Type */\nexport type NcmazFaustBlockCtaAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'NcmazFaustBlockCtaAttributes';\n  /** The &quot;align&quot; field on the &quot;NcmazFaustBlockCta&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;NcmazFaustBlockCta&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;NcmazFaustBlockCta&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;NcmazFaustBlockCta&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type NcmazFaustBlockGroup = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'NcmazFaustBlockGroup';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the NcmazFaustBlockGroup Block Type */\n  attributes?: Maybe<NcmazFaustBlockGroupAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the NcmazFaustBlockGroup Block Type */\nexport type NcmazFaustBlockGroupAttributes = {\n  __typename?: 'NcmazFaustBlockGroupAttributes';\n  /** The &quot;align&quot; field on the &quot;NcmazFaustBlockGroup&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;NcmazFaustBlockGroup&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasBackground&quot; field on the &quot;NcmazFaustBlockGroup&quot; block */\n  hasBackground?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;NcmazFaustBlockGroup&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;NcmazFaustBlockGroup&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;variation&quot; field on the &quot;NcmazFaustBlockGroup&quot; block */\n  variation?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type NcmazFaustBlockHeading = BlockWithSupportsAnchor & EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'NcmazFaustBlockHeading';\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the NcmazFaustBlockHeading Block Type */\n  attributes?: Maybe<NcmazFaustBlockHeadingAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the NcmazFaustBlockHeading Block Type */\nexport type NcmazFaustBlockHeadingAttributes = BlockWithSupportsAnchor & {\n  __typename?: 'NcmazFaustBlockHeadingAttributes';\n  /** The &quot;align&quot; field on the &quot;NcmazFaustBlockHeading&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The anchor field for the block. */\n  anchor?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;NcmazFaustBlockHeading&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;lock&quot; field on the &quot;NcmazFaustBlockHeading&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;style&quot; field on the &quot;NcmazFaustBlockHeading&quot; block */\n  style?: Maybe<Scalars['BlockAttributesObject']['output']>;\n};\n\n/** A block used for editing the site */\nexport type NcmazFaustBlockMagazine = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'NcmazFaustBlockMagazine';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the NcmazFaustBlockMagazine Block Type */\n  attributes?: Maybe<NcmazFaustBlockMagazineAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the NcmazFaustBlockMagazine Block Type */\nexport type NcmazFaustBlockMagazineAttributes = {\n  __typename?: 'NcmazFaustBlockMagazineAttributes';\n  /** The &quot;align&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;blockVariation&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  blockVariation?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasBackground&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  hasBackground?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;queries&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  queries?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;showLoadMore&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  showLoadMore?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;uniqueId&quot; field on the &quot;NcmazFaustBlockMagazine&quot; block */\n  uniqueId?: Maybe<Scalars['String']['output']>;\n};\n\n/** A block used for editing the site */\nexport type NcmazFaustBlockTerms = EditorBlock & PageEditorBlock & PostEditorBlock & {\n  __typename?: 'NcmazFaustBlockTerms';\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** Attributes of the NcmazFaustBlockTerms Block Type */\n  attributes?: Maybe<NcmazFaustBlockTermsAttributes>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** Attributes of the NcmazFaustBlockTerms Block Type */\nexport type NcmazFaustBlockTermsAttributes = {\n  __typename?: 'NcmazFaustBlockTermsAttributes';\n  /** The &quot;align&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  align?: Maybe<Scalars['String']['output']>;\n  /** The &quot;blockVariation&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  blockVariation?: Maybe<Scalars['String']['output']>;\n  /** The &quot;className&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  className?: Maybe<Scalars['String']['output']>;\n  /** The &quot;hasBackground&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  hasBackground?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;lock&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;\n  /** The &quot;numberOfTags&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  numberOfTags?: Maybe<Scalars['Float']['output']>;\n  /** The &quot;order&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  order?: Maybe<Scalars['String']['output']>;\n  /** The &quot;orderBy&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  orderBy?: Maybe<Scalars['String']['output']>;\n  /** The &quot;showTagCounts&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  showTagCounts?: Maybe<Scalars['Boolean']['output']>;\n  /** The &quot;taxonomy&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  taxonomy?: Maybe<Scalars['String']['output']>;\n  /** The &quot;uniqueId&quot; field on the &quot;NcmazFaustBlockTerms&quot; block */\n  uniqueId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the ncmazFaustUpdateUserReactionPostCount mutation. */\nexport type NcmazFaustUpdateUserReactionPostCountInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** 1 is add, and 0 is remove */\n  number?: InputMaybe<NcmazFcUserReactionPostNumberUpdateEnum>;\n  /** Post database id of user */\n  post_id?: InputMaybe<Scalars['Int']['input']>;\n  /** Save, likes, view, or something else, */\n  reaction?: InputMaybe<NcmazFcUserReactionPostActionEnum>;\n  /** User database id of user */\n  user_id?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The payload for the ncmazFaustUpdateUserReactionPostCount mutation. */\nexport type NcmazFaustUpdateUserReactionPostCountPayload = {\n  __typename?: 'NcmazFaustUpdateUserReactionPostCountPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Error of this mutation */\n  errors?: Maybe<Scalars['String']['output']>;\n  /** New count after update */\n  new_count?: Maybe<Scalars['Int']['output']>;\n  /** 1 is add, and 0 is remove */\n  number?: Maybe<NcmazFcUserReactionPostNumberUpdateEnum>;\n  /** Post database id of user */\n  post_id?: Maybe<Scalars['Int']['output']>;\n  /** Save, likes, view, or something else, */\n  reaction?: Maybe<NcmazFcUserReactionPostActionEnum>;\n  /** Added or Removed or Error */\n  result?: Maybe<NcmazFcUserReactionPostUpdateResuiltEnum>;\n  /** User database id of user */\n  user_id?: Maybe<Scalars['Int']['output']>;\n};\n\n/** Reaction of user, like save, likes, view, or something else */\nexport enum NcmazFcUserReactionPostActionEnum {\n  Like = 'LIKE',\n  Save = 'SAVE',\n  View = 'VIEW'\n}\n\n/** 1 = add, 0 = remove */\nexport enum NcmazFcUserReactionPostNumberUpdateEnum {\n  /** Add. Will add 1 to the count */\n  Add_1 = 'ADD_1',\n  /** Remove. Will remove 1 from the count */\n  Remove_1 = 'REMOVE_1'\n}\n\n/** Added, Removed, or Error */\nexport enum NcmazFcUserReactionPostUpdateResuiltEnum {\n  /** Success! Added! */\n  Added = 'ADDED',\n  /** Error!, something went wrong! */\n  Error = 'ERROR',\n  /** Success! Removed! */\n  Removed = 'REMOVED'\n}\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcmazGalleryImgs = AcfFieldGroup & AcfFieldGroupFields & NcmazGalleryImgs_Fields & {\n  __typename?: 'NcmazGalleryImgs';\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image1?: Maybe<NcmazGalleryImgsImage1ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image2?: Maybe<NcmazGalleryImgsImage2ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image3?: Maybe<NcmazGalleryImgsImage3ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image4?: Maybe<NcmazGalleryImgsImage4ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image5?: Maybe<NcmazGalleryImgsImage5ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image6?: Maybe<NcmazGalleryImgsImage6ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image7?: Maybe<NcmazGalleryImgsImage7ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image8?: Maybe<NcmazGalleryImgsImage8ToMediaItemConnectionEdge>;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage1ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage1ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage2ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage2ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage3ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage3ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage4ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage4ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage5ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage5ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage6ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage6ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage7ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage7ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Connection between the NcmazGalleryImgs type and the MediaItem type */\nexport type NcmazGalleryImgsImage8ToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NcmazGalleryImgsImage8ToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** Interface representing fields of the ACF &quot;NcmazGalleryImgs&quot; Field Group */\nexport type NcmazGalleryImgs_Fields = {\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image1?: Maybe<NcmazGalleryImgsImage1ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image2?: Maybe<NcmazGalleryImgsImage2ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image3?: Maybe<NcmazGalleryImgsImage3ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image4?: Maybe<NcmazGalleryImgsImage4ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image5?: Maybe<NcmazGalleryImgsImage5ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image6?: Maybe<NcmazGalleryImgsImage6ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image7?: Maybe<NcmazGalleryImgsImage7ToMediaItemConnectionEdge>;\n  /** Field added to the schema as part of the &quot;NcmazGalleryImgs&quot; Field Group */\n  image8?: Maybe<NcmazGalleryImgsImage8ToMediaItemConnectionEdge>;\n};\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcmazVideoUrl = AcfFieldGroup & AcfFieldGroupFields & NcmazVideoUrl_Fields & {\n  __typename?: 'NcmazVideoUrl';\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcmazVideoUrl&quot; Field Group */\n  videoUrl?: Maybe<Scalars['String']['output']>;\n};\n\n/** Interface representing fields of the ACF &quot;NcmazVideoUrl&quot; Field Group */\nexport type NcmazVideoUrl_Fields = {\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Field added to the schema as part of the &quot;NcmazVideoUrl&quot; Field Group */\n  videoUrl?: Maybe<Scalars['String']['output']>;\n};\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcmazfaustMenu = AcfFieldGroup & AcfFieldGroupFields & NcmazfaustMenu_Fields & {\n  __typename?: 'NcmazfaustMenu';\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Option to display menu as mega menu. Mega menu will contain many menu columns inside and a few featured articles. Each level 1 submenu of this menu will represent a menu column, and the level 1 menus of that menu will be in that column. Up to 6 columns. */\n  isMegaMenu?: Maybe<Scalars['Boolean']['output']>;\n  /** Field added to the schema as part of the &quot;NcmazfaustMenu&quot; Field Group */\n  numberOfMenuColumns?: Maybe<Scalars['Float']['output']>;\n  /** Select posts which will be show in the right side of the mega menu.The number of posts displayed will depend on the number of existing menu columns inside the mega menu. No menu column =&gt; Display up to 5 posts. One menu column =&gt; Display up to 4 postsTwo menu columns =&gt; Display up to 3 postsThree or four menu columns =&gt; Display up to 2 postsFive menu columns =&gt; Display up to 1 postSix menu columns =&gt; Will not display any posts */\n  posts?: Maybe<NcmazfaustMenuPostsToContentNodeConnection>;\n};\n\n\n/** Added by WPGraphQL for ACF Redux */\nexport type NcmazfaustMenuPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection between the NcmazfaustMenu type and the ContentNode type */\nexport type NcmazfaustMenuPostsToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'NcmazfaustMenuPostsToContentNodeConnection';\n  /** Edges for the NcmazfaustMenuPostsToContentNodeConnection connection */\n  edges: Array<NcmazfaustMenuPostsToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: NcmazfaustMenuPostsToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type NcmazfaustMenuPostsToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'NcmazfaustMenuPostsToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;NcmazfaustMenuPostsToContentNodeConnection&quot; */\nexport type NcmazfaustMenuPostsToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'NcmazfaustMenuPostsToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Interface representing fields of the ACF &quot;NcmazfaustMenu&quot; Field Group */\nexport type NcmazfaustMenu_Fields = {\n  /**\n   * The name of the field group\n   * @deprecated Use __typename instead\n   */\n  fieldGroupName?: Maybe<Scalars['String']['output']>;\n  /** Option to display menu as mega menu. Mega menu will contain many menu columns inside and a few featured articles. Each level 1 submenu of this menu will represent a menu column, and the level 1 menus of that menu will be in that column. Up to 6 columns. */\n  isMegaMenu?: Maybe<Scalars['Boolean']['output']>;\n  /** Field added to the schema as part of the &quot;NcmazfaustMenu&quot; Field Group */\n  numberOfMenuColumns?: Maybe<Scalars['Float']['output']>;\n  /** Select posts which will be show in the right side of the mega menu.The number of posts displayed will depend on the number of existing menu columns inside the mega menu. No menu column =&gt; Display up to 5 posts. One menu column =&gt; Display up to 4 postsTwo menu columns =&gt; Display up to 3 postsThree or four menu columns =&gt; Display up to 2 postsFive menu columns =&gt; Display up to 1 postSix menu columns =&gt; Will not display any posts */\n  posts?: Maybe<NcmazfaustMenuPostsToContentNodeConnection>;\n};\n\n\n/** Interface representing fields of the ACF &quot;NcmazfaustMenu&quot; Field Group */\nexport type NcmazfaustMenu_FieldsPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** A node that can have an author assigned to it */\nexport type NodeWithAuthor = {\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** Connection between the NodeWithAuthor type and the User type */\nexport type NodeWithAuthorToUserConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {\n  __typename?: 'NodeWithAuthorToUserConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: User;\n};\n\n/** A node that can have comments associated with it */\nexport type NodeWithComments = {\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** A node that supports the content editor */\nexport type NodeWithContentEditor = {\n  /** The content of the post. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n\n/** A node that supports the content editor */\nexport type NodeWithContentEditorContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Node that has content blocks associated with it */\nexport type NodeWithEditorBlocks = {\n  /** List of editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n};\n\n\n/** Node that has content blocks associated with it */\nexport type NodeWithEditorBlocksEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** A node that can have an excerpt */\nexport type NodeWithExcerpt = {\n  /** The excerpt of the post. */\n  excerpt?: Maybe<Scalars['String']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n\n/** A node that can have an excerpt */\nexport type NodeWithExcerptExcerptArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** A node that can have a featured image set */\nexport type NodeWithFeaturedImage = {\n  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */\n  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;\n  /** The database identifier for the featured image node assigned to the content node */\n  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Globally unique ID of the featured image assigned to the node */\n  featuredImageId?: Maybe<Scalars['ID']['output']>;\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n};\n\n/** Connection between the NodeWithFeaturedImage type and the MediaItem type */\nexport type NodeWithFeaturedImageToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {\n  __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: MediaItem;\n};\n\n/** A node that can have page attributes */\nexport type NodeWithPageAttributes = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: Maybe<Scalars['Int']['output']>;\n};\n\n/** Node that has Page content blocks associated with it */\nexport type NodeWithPageEditorBlocks = {\n  /** List of Page editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PageEditorBlock>>>;\n};\n\n\n/** Node that has Page content blocks associated with it */\nexport type NodeWithPageEditorBlocksEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Node that has Post content blocks associated with it */\nexport type NodeWithPostEditorBlocks = {\n  /** List of Post editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PostEditorBlock>>>;\n};\n\n\n/** Node that has Post content blocks associated with it */\nexport type NodeWithPostEditorBlocksEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** A node that can have revisions */\nexport type NodeWithRevisions = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** True if the node is a revision of another node */\n  isRevision?: Maybe<Scalars['Boolean']['output']>;\n  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */\n  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;\n};\n\n/** Connection between the NodeWithRevisions type and the ContentNode type */\nexport type NodeWithRevisionsToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {\n  __typename?: 'NodeWithRevisionsToContentNodeConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: ContentNode;\n};\n\n/** A node that can have a template associated with it */\nexport type NodeWithTemplate = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** The template assigned to the node */\n  template?: Maybe<ContentTemplate>;\n};\n\n/** A node that NodeWith a title */\nexport type NodeWithTitle = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A node that NodeWith a title */\nexport type NodeWithTitleTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** A node that can have trackbacks and pingbacks */\nexport type NodeWithTrackbacks = {\n  /** The globally unique ID for the object */\n  id: Scalars['ID']['output'];\n  /** Whether the pings are open or closed for this particular post. */\n  pingStatus?: Maybe<Scalars['String']['output']>;\n  /** URLs that have been pinged. */\n  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** URLs queued to be pinged. */\n  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n};\n\n/** A singular connection from one Node to another, with support for relational data on the &quot;edge&quot; of the connection. */\nexport type OneToOneConnection = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected node */\n  node: Node;\n};\n\n/** The cardinality of the connection order */\nexport enum OrderEnum {\n  /** Sort the query result set in an ascending order */\n  Asc = 'ASC',\n  /** Sort the query result set in a descending order */\n  Desc = 'DESC'\n}\n\n/** The page type */\nexport type Page = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithPageEditorBlocks & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {\n  __typename?: 'Page';\n  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */\n  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the HierarchicalContentNode type and the ContentNode type */\n  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Page type and the Comment type */\n  comments?: Maybe<PageToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The content of the post. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** List of Page editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PageEditorBlock>>>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */\n  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;\n  /** The database identifier for the featured image node assigned to the content node */\n  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Globally unique ID of the featured image assigned to the node */\n  featuredImageId?: Maybe<Scalars['ID']['output']>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the page object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether this page is set to the static front page. */\n  isFrontPage: Scalars['Boolean']['output'];\n  /** Whether this page is set to the blog posts page. */\n  isPostsPage: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether this page is set to the privacy page. */\n  isPrivacyPage: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** True if the node is a revision of another node */\n  isRevision?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: Maybe<Scalars['Int']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  pageId: Scalars['Int']['output'];\n  /** The parent of the node. The parent object can be of various types */\n  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;\n  /** Database id of the parent node */\n  parentDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the parent node. */\n  parentId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Page type and the page type */\n  preview?: Maybe<PageToPreviewConnectionEdge>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */\n  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;\n  /** Connection between the Page type and the page type */\n  revisions?: Maybe<PageToRevisionConnection>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to a node of content */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The page type */\nexport type PageAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageChildrenArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PageToCommentConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The page type */\nexport type PageEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** The page type */\nexport type PageEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The page type */\nexport type PageEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The page type */\nexport type PageRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PageToRevisionConnectionWhereArgs>;\n};\n\n\n/** The page type */\nexport type PageTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Connection to page Nodes */\nexport type PageConnection = {\n  /** A list of edges (relational context) between RootQuery and connected page Nodes */\n  edges: Array<PageConnectionEdge>;\n  /** A list of connected page Nodes */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected page */\nexport type PageConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected page Node */\n  node: Page;\n};\n\n/** Page Info on the connected PageConnectionEdge */\nexport type PageConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** EditorBlock Interface for Page Block Type */\nexport type PageEditorBlock = {\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the Block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PageIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the Page type and the Comment type */\nexport type PageToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'PageToCommentConnection';\n  /** Edges for the PageToCommentConnection connection */\n  edges: Array<PageToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PageToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'PageToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;PageToCommentConnection&quot; */\nexport type PageToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PageToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PageToCommentConnection connection */\nexport type PageToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the Page type and the page type */\nexport type PageToPreviewConnectionEdge = Edge & OneToOneConnection & PageConnectionEdge & {\n  __typename?: 'PageToPreviewConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Page;\n};\n\n/** Connection between the Page type and the page type */\nexport type PageToRevisionConnection = Connection & PageConnection & {\n  __typename?: 'PageToRevisionConnection';\n  /** Edges for the PageToRevisionConnection connection */\n  edges: Array<PageToRevisionConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: PageToRevisionConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PageToRevisionConnectionEdge = Edge & PageConnectionEdge & {\n  __typename?: 'PageToRevisionConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Page;\n};\n\n/** Page Info on the &quot;PageToRevisionConnection&quot; */\nexport type PageToRevisionConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PageToRevisionConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PageToRevisionConnection connection */\nexport type PageToRevisionConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** An plugin object */\nexport type Plugin = Node & {\n  __typename?: 'Plugin';\n  /** Name of the plugin author(s), may also be a company name. */\n  author?: Maybe<Scalars['String']['output']>;\n  /** URI for the related author(s)/company website. */\n  authorUri?: Maybe<Scalars['String']['output']>;\n  /** Description of the plugin. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the plugin object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Display name of the plugin. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Plugin path. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** URI for the plugin website. This is useful for directing users for support requests etc. */\n  pluginUri?: Maybe<Scalars['String']['output']>;\n  /** Current version of the plugin. */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to Plugin Nodes */\nexport type PluginConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Plugin Nodes */\n  edges: Array<PluginConnectionEdge>;\n  /** A list of connected Plugin Nodes */\n  nodes: Array<Plugin>;\n  /** Information about pagination in a connection. */\n  pageInfo: PluginConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Plugin */\nexport type PluginConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Plugin Node */\n  node: Plugin;\n};\n\n/** Page Info on the connected PluginConnectionEdge */\nexport type PluginConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The status of the WordPress plugin. */\nexport enum PluginStatusEnum {\n  /** The plugin is currently active. */\n  Active = 'ACTIVE',\n  /** The plugin is a drop-in plugin. */\n  DropIn = 'DROP_IN',\n  /** The plugin is currently inactive. */\n  Inactive = 'INACTIVE',\n  /** The plugin is a must-use plugin. */\n  MustUse = 'MUST_USE',\n  /** The plugin is technically active but was paused while loading. */\n  Paused = 'PAUSED',\n  /** The plugin was active recently. */\n  RecentlyActive = 'RECENTLY_ACTIVE',\n  /** The plugin has an upgrade available. */\n  Upgrade = 'UPGRADE'\n}\n\n/** The post type */\nexport type Post = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithPostEditorBlocks & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable & WithAcfNcPostMetaData & WithAcfNcmazAudioUrl & WithAcfNcmazGalleryImgs & WithAcfNcmazVideoUrl & {\n  __typename?: 'Post';\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** Connection between the Post type and the category type */\n  categories?: Maybe<PostToCategoryConnection>;\n  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */\n  commentCount?: Maybe<Scalars['Int']['output']>;\n  /** Whether the comments are open or closed for this particular post. */\n  commentStatus?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Post type and the Comment type */\n  comments?: Maybe<PostToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The content of the post. */\n  content?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** List of Post editor blocks */\n  editorBlocks?: Maybe<Array<Maybe<PostEditorBlock>>>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The excerpt of the post. */\n  excerpt?: Maybe<Scalars['String']['output']>;\n  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */\n  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;\n  /** The database identifier for the featured image node assigned to the content node */\n  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Globally unique ID of the featured image assigned to the node */\n  featuredImageId?: Maybe<Scalars['ID']['output']>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the post object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** True if the node is a revision of another node */\n  isRevision?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether this page is sticky */\n  isSticky: Scalars['Boolean']['output'];\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** Fields of the NcPostMetaData ACF Field Group */\n  ncPostMetaData?: Maybe<NcPostMetaData>;\n  /** Fields of the NcmazAudioUrl ACF Field Group */\n  ncmazAudioUrl?: Maybe<NcmazAudioUrl>;\n  /** Fields of the NcmazGalleryImgs ACF Field Group */\n  ncmazGalleryImgs?: Maybe<NcmazGalleryImgs>;\n  /** Fields of the NcmazVideoUrl ACF Field Group */\n  ncmazVideoUrl?: Maybe<NcmazVideoUrl>;\n  /** Whether the pings are open or closed for this particular post. */\n  pingStatus?: Maybe<Scalars['String']['output']>;\n  /** URLs that have been pinged. */\n  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Connection between the Post type and the postFormat type */\n  postFormats?: Maybe<PostToPostFormatConnection>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  postId: Scalars['Int']['output'];\n  /** Connection between the Post type and the post type */\n  preview?: Maybe<PostToPreviewConnectionEdge>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */\n  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;\n  /** Connection between the Post type and the post type */\n  revisions?: Maybe<PostToRevisionConnection>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Post type and the tag type */\n  tags?: Maybe<PostToTagConnection>;\n  /** The template assigned to the node */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Connection between the Post type and the TermNode type */\n  terms?: Maybe<PostToTermNodeConnection>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** URLs queued to be pinged. */\n  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The post type */\nexport type PostCategoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToCategoryConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToCommentConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostContentArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The post type */\nexport type PostEditorBlocksArgs = {\n  flat?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** The post type */\nexport type PostEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The post type */\nexport type PostEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The post type */\nexport type PostExcerptArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n\n/** The post type */\nexport type PostPostFormatsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToPostFormatConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToRevisionConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostTagsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToTagConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostTermsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostToTermNodeConnectionWhereArgs>;\n};\n\n\n/** The post type */\nexport type PostTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Set relationships between the post to categories */\nexport type PostCategoriesInput = {\n  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostCategoriesNodeInput>>>;\n};\n\n/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostCategoriesNodeInput = {\n  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection to post Nodes */\nexport type PostConnection = {\n  /** A list of edges (relational context) between RootQuery and connected post Nodes */\n  edges: Array<PostConnectionEdge>;\n  /** A list of connected post Nodes */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected post */\nexport type PostConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected post Node */\n  node: Post;\n};\n\n/** Page Info on the connected PostConnectionEdge */\nexport type PostConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** EditorBlock Interface for Post Block Type */\nexport type PostEditorBlock = {\n  /** The API version of the Gutenberg Block */\n  apiVersion?: Maybe<Scalars['Int']['output']>;\n  /** The name of the category the Block belongs to */\n  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;\n  /** The id of the Block */\n  clientId?: Maybe<Scalars['String']['output']>;\n  /** CSS Classnames to apply to the block */\n  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The inner blocks of the Block */\n  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;\n  /** Whether the block is Dynamic (server rendered) */\n  isDynamic: Scalars['Boolean']['output'];\n  /** The name of the Block */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The parent id of the Block */\n  parentClientId?: Maybe<Scalars['String']['output']>;\n  /** The rendered HTML for the block */\n  renderedHtml?: Maybe<Scalars['String']['output']>;\n};\n\n/** The postFormat type */\nexport type PostFormat = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {\n  __typename?: 'PostFormat';\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the PostFormat type and the ContentNode type */\n  contentNodes?: Maybe<PostFormatToContentNodeConnection>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  postFormatId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the PostFormat type and the post type */\n  posts?: Maybe<PostFormatToPostConnection>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** Connection between the PostFormat type and the Taxonomy type */\n  taxonomy?: Maybe<PostFormatToTaxonomyConnectionEdge>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostFormatToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The postFormat type */\nexport type PostFormatPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<PostFormatToPostConnectionWhereArgs>;\n};\n\n/** Connection to postFormat Nodes */\nexport type PostFormatConnection = {\n  /** A list of edges (relational context) between RootQuery and connected postFormat Nodes */\n  edges: Array<PostFormatConnectionEdge>;\n  /** A list of connected postFormat Nodes */\n  nodes: Array<PostFormat>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostFormatConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected postFormat */\nexport type PostFormatConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected postFormat Node */\n  node: PostFormat;\n};\n\n/** Page Info on the connected PostFormatConnectionEdge */\nexport type PostFormatConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PostFormatIdType {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the PostFormat type and the ContentNode type */\nexport type PostFormatToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'PostFormatToContentNodeConnection';\n  /** Edges for the PostFormatToContentNodeConnection connection */\n  edges: Array<PostFormatToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostFormatToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostFormatToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'PostFormatToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;PostFormatToContentNodeConnection&quot; */\nexport type PostFormatToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PostFormatToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostFormatToContentNodeConnection connection */\nexport type PostFormatToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPostFormatEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the PostFormat type and the post type */\nexport type PostFormatToPostConnection = Connection & PostConnection & {\n  __typename?: 'PostFormatToPostConnection';\n  /** Edges for the PostFormatToPostConnection connection */\n  edges: Array<PostFormatToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostFormatToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostFormatToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'PostFormatToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;PostFormatToPostConnection&quot; */\nexport type PostFormatToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostFormatToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostFormatToPostConnection connection */\nexport type PostFormatToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the PostFormat type and the Taxonomy type */\nexport type PostFormatToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {\n  __typename?: 'PostFormatToTaxonomyConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Taxonomy;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum PostIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  Slug = 'SLUG',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** The format of post field data. */\nexport enum PostObjectFieldFormatEnum {\n  /** Provide the field value directly from database. Null on unauthenticated requests. */\n  Raw = 'RAW',\n  /** Provide the field value as rendered by WordPress. Default. */\n  Rendered = 'RENDERED'\n}\n\n/** The column to use when filtering by date */\nexport enum PostObjectsConnectionDateColumnEnum {\n  /** The date the comment was created in local time. */\n  Date = 'DATE',\n  /** The most recent modification date of the comment. */\n  Modified = 'MODIFIED'\n}\n\n/** Field to order the connection by */\nexport enum PostObjectsConnectionOrderbyEnum {\n  /** Order by author */\n  Author = 'AUTHOR',\n  /** Order by the number of comments it has acquired */\n  CommentCount = 'COMMENT_COUNT',\n  /** Order by publish date */\n  Date = 'DATE',\n  /** Preserve the ID order given in the IN array */\n  In = 'IN',\n  /** The number of likes on the post */\n  LikesCount = 'LIKES_COUNT',\n  /** Order by the menu order value */\n  MenuOrder = 'MENU_ORDER',\n  /** Order by last modified date */\n  Modified = 'MODIFIED',\n  /** Preserve slug order given in the NAME_IN array */\n  NameIn = 'NAME_IN',\n  /** Order by parent ID */\n  Parent = 'PARENT',\n  /** Order by slug */\n  Slug = 'SLUG',\n  /** Order by title */\n  Title = 'TITLE',\n  /** The number of views on the post */\n  ViewsCount = 'VIEWS_COUNT'\n}\n\n/** Options for ordering the connection */\nexport type PostObjectsConnectionOrderbyInput = {\n  /** The field to order the connection by */\n  field: PostObjectsConnectionOrderbyEnum;\n  /** Possible directions in which to order a list of items */\n  order: OrderEnum;\n};\n\n/** Set relationships between the post to postFormats */\nexport type PostPostFormatsInput = {\n  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostPostFormatsNodeInput>>>;\n};\n\n/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostPostFormatsNodeInput = {\n  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The status of the object. */\nexport enum PostStatusEnum {\n  /** Objects with the acf-disabled status */\n  AcfDisabled = 'ACF_DISABLED',\n  /** Objects with the auto-draft status */\n  AutoDraft = 'AUTO_DRAFT',\n  /** Objects with the draft status */\n  Draft = 'DRAFT',\n  /** Objects with the future status */\n  Future = 'FUTURE',\n  /** Objects with the inherit status */\n  Inherit = 'INHERIT',\n  /** Objects with the pending status */\n  Pending = 'PENDING',\n  /** Objects with the private status */\n  Private = 'PRIVATE',\n  /** Objects with the publish status */\n  Publish = 'PUBLISH',\n  /** Objects with the request-completed status */\n  RequestCompleted = 'REQUEST_COMPLETED',\n  /** Objects with the request-confirmed status */\n  RequestConfirmed = 'REQUEST_CONFIRMED',\n  /** Objects with the request-failed status */\n  RequestFailed = 'REQUEST_FAILED',\n  /** Objects with the request-pending status */\n  RequestPending = 'REQUEST_PENDING',\n  /** Objects with the trash status */\n  Trash = 'TRASH'\n}\n\n/** Set relationships between the post to tags */\nexport type PostTagsInput = {\n  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */\n  append?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The input list of items to set. */\n  nodes?: InputMaybe<Array<InputMaybe<PostTagsNodeInput>>>;\n};\n\n/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */\nexport type PostTagsNodeInput = {\n  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Post type and the category type */\nexport type PostToCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'PostToCategoryConnection';\n  /** Edges for the PostToCategoryConnection connection */\n  edges: Array<PostToCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'PostToCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;PostToCategoryConnection&quot; */\nexport type PostToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PostToCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToCategoryConnection connection */\nexport type PostToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Post type and the Comment type */\nexport type PostToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'PostToCommentConnection';\n  /** Edges for the PostToCommentConnection connection */\n  edges: Array<PostToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'PostToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;PostToCommentConnection&quot; */\nexport type PostToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'PostToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToCommentConnection connection */\nexport type PostToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the Post type and the postFormat type */\nexport type PostToPostFormatConnection = Connection & PostFormatConnection & {\n  __typename?: 'PostToPostFormatConnection';\n  /** Edges for the PostToPostFormatConnection connection */\n  edges: Array<PostToPostFormatConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<PostFormat>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToPostFormatConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {\n  __typename?: 'PostToPostFormatConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: PostFormat;\n};\n\n/** Page Info on the &quot;PostToPostFormatConnection&quot; */\nexport type PostToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToPostFormatConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToPostFormatConnection connection */\nexport type PostToPostFormatConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Post type and the post type */\nexport type PostToPreviewConnectionEdge = Edge & OneToOneConnection & PostConnectionEdge & {\n  __typename?: 'PostToPreviewConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Post;\n};\n\n/** Connection between the Post type and the post type */\nexport type PostToRevisionConnection = Connection & PostConnection & {\n  __typename?: 'PostToRevisionConnection';\n  /** Edges for the PostToRevisionConnection connection */\n  edges: Array<PostToRevisionConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToRevisionConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToRevisionConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'PostToRevisionConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;PostToRevisionConnection&quot; */\nexport type PostToRevisionConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToRevisionConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToRevisionConnection connection */\nexport type PostToRevisionConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Post type and the tag type */\nexport type PostToTagConnection = Connection & TagConnection & {\n  __typename?: 'PostToTagConnection';\n  /** Edges for the PostToTagConnection connection */\n  edges: Array<PostToTagConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Tag>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToTagConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToTagConnectionEdge = Edge & TagConnectionEdge & {\n  __typename?: 'PostToTagConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Tag;\n};\n\n/** Page Info on the &quot;PostToTagConnection&quot; */\nexport type PostToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToTagConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToTagConnection connection */\nexport type PostToTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the Post type and the TermNode type */\nexport type PostToTermNodeConnection = Connection & TermNodeConnection & {\n  __typename?: 'PostToTermNodeConnection';\n  /** Edges for the PostToTermNodeConnection connection */\n  edges: Array<PostToTermNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<TermNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: PostToTermNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type PostToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {\n  __typename?: 'PostToTermNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: TermNode;\n};\n\n/** Page Info on the &quot;PostToTermNodeConnection&quot; */\nexport type PostToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {\n  __typename?: 'PostToTermNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the PostToTermNodeConnection connection */\nexport type PostToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The Taxonomy to filter terms by */\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Details for labels of the PostType */\nexport type PostTypeLabelDetails = {\n  __typename?: 'PostTypeLabelDetails';\n  /** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */\n  addNew?: Maybe<Scalars['String']['output']>;\n  /** Label for adding a new singular item. */\n  addNewItem?: Maybe<Scalars['String']['output']>;\n  /** Label to signify all items in a submenu link. */\n  allItems?: Maybe<Scalars['String']['output']>;\n  /** Label for archives in nav menus */\n  archives?: Maybe<Scalars['String']['output']>;\n  /** Label for the attributes meta box. */\n  attributes?: Maybe<Scalars['String']['output']>;\n  /** Label for editing a singular item. */\n  editItem?: Maybe<Scalars['String']['output']>;\n  /** Label for the Featured Image meta box title. */\n  featuredImage?: Maybe<Scalars['String']['output']>;\n  /** Label for the table views hidden heading. */\n  filterItemsList?: Maybe<Scalars['String']['output']>;\n  /** Label for the media frame button. */\n  insertIntoItem?: Maybe<Scalars['String']['output']>;\n  /** Label for the table hidden heading. */\n  itemsList?: Maybe<Scalars['String']['output']>;\n  /** Label for the table pagination hidden heading. */\n  itemsListNavigation?: Maybe<Scalars['String']['output']>;\n  /** Label for the menu name. */\n  menuName?: Maybe<Scalars['String']['output']>;\n  /** General name for the post type, usually plural. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Label for the new item page title. */\n  newItem?: Maybe<Scalars['String']['output']>;\n  /** Label used when no items are found. */\n  notFound?: Maybe<Scalars['String']['output']>;\n  /** Label used when no items are in the trash. */\n  notFoundInTrash?: Maybe<Scalars['String']['output']>;\n  /** Label used to prefix parents of hierarchical items. */\n  parentItemColon?: Maybe<Scalars['String']['output']>;\n  /** Label for removing the featured image. */\n  removeFeaturedImage?: Maybe<Scalars['String']['output']>;\n  /** Label for searching plural items. */\n  searchItems?: Maybe<Scalars['String']['output']>;\n  /** Label for setting the featured image. */\n  setFeaturedImage?: Maybe<Scalars['String']['output']>;\n  /** Name for one object of this post type. */\n  singularName?: Maybe<Scalars['String']['output']>;\n  /** Label for the media frame filter. */\n  uploadedToThisItem?: Maybe<Scalars['String']['output']>;\n  /** Label in the media frame for using a featured image. */\n  useFeaturedImage?: Maybe<Scalars['String']['output']>;\n  /** Label for viewing a singular item. */\n  viewItem?: Maybe<Scalars['String']['output']>;\n  /** Label for viewing post type archives. */\n  viewItems?: Maybe<Scalars['String']['output']>;\n};\n\n/** Nodes that can be seen in a preview (unpublished) state. */\nexport type Previewable = {\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** The reading setting type */\nexport type ReadingSettings = {\n  __typename?: 'ReadingSettings';\n  /** The ID of the page that should display the latest posts */\n  pageForPosts?: Maybe<Scalars['Int']['output']>;\n  /** The ID of the page that should be displayed on the front page */\n  pageOnFront?: Maybe<Scalars['Int']['output']>;\n  /** Blog pages show at most. */\n  postsPerPage?: Maybe<Scalars['Int']['output']>;\n  /** What to show on the front page */\n  showOnFront?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the registerUser mutation. */\nexport type RegisterUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the user's username. */\n  username: Scalars['String']['input'];\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the registerUser mutation. */\nexport type RegisterUserPayload = {\n  __typename?: 'RegisterUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** The logical relation between each item in the array when there are more than one. */\nexport enum RelationEnum {\n  /** The logical AND condition returns true if both operands are true, otherwise, it returns false. */\n  And = 'AND',\n  /** The logical OR condition returns false if both operands are false, otherwise, it returns true. */\n  Or = 'OR'\n}\n\n/** Input for the resetUserPassword mutation. */\nexport type ResetUserPasswordInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Password reset key */\n  key?: InputMaybe<Scalars['String']['input']>;\n  /** The user's login (username). */\n  login?: InputMaybe<Scalars['String']['input']>;\n  /** The new password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the resetUserPassword mutation. */\nexport type ResetUserPasswordPayload = {\n  __typename?: 'ResetUserPasswordPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** Input for the restoreComment mutation. */\nexport type RestoreCommentInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment to be restored */\n  id: Scalars['ID']['input'];\n};\n\n/** The payload for the restoreComment mutation. */\nexport type RestoreCommentPayload = {\n  __typename?: 'RestoreCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The restored comment object */\n  comment?: Maybe<Comment>;\n  /** The ID of the restored comment */\n  restoredId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** The root mutation */\nexport type RootMutation = {\n  __typename?: 'RootMutation';\n  /** The createCategory mutation */\n  createCategory?: Maybe<CreateCategoryPayload>;\n  /** The createComment mutation */\n  createComment?: Maybe<CreateCommentPayload>;\n  /** The createGraphqlDocument mutation */\n  createGraphqlDocument?: Maybe<CreateGraphqlDocumentPayload>;\n  /** The createMediaItem mutation */\n  createMediaItem?: Maybe<CreateMediaItemPayload>;\n  /** The createPage mutation */\n  createPage?: Maybe<CreatePagePayload>;\n  /** The createPost mutation */\n  createPost?: Maybe<CreatePostPayload>;\n  /** The createPostFormat mutation */\n  createPostFormat?: Maybe<CreatePostFormatPayload>;\n  /** The createTag mutation */\n  createTag?: Maybe<CreateTagPayload>;\n  /** The createUser mutation */\n  createUser?: Maybe<CreateUserPayload>;\n  /** The createUserReactionPost mutation */\n  createUserReactionPost?: Maybe<CreateUserReactionPostPayload>;\n  /** The deleteCategory mutation */\n  deleteCategory?: Maybe<DeleteCategoryPayload>;\n  /** The deleteComment mutation */\n  deleteComment?: Maybe<DeleteCommentPayload>;\n  /** The deleteGraphqlDocument mutation */\n  deleteGraphqlDocument?: Maybe<DeleteGraphqlDocumentPayload>;\n  /** The deleteMediaItem mutation */\n  deleteMediaItem?: Maybe<DeleteMediaItemPayload>;\n  /** The deletePage mutation */\n  deletePage?: Maybe<DeletePagePayload>;\n  /** The deletePost mutation */\n  deletePost?: Maybe<DeletePostPayload>;\n  /** The deletePostFormat mutation */\n  deletePostFormat?: Maybe<DeletePostFormatPayload>;\n  /** The deleteTag mutation */\n  deleteTag?: Maybe<DeleteTagPayload>;\n  /** The deleteUser mutation */\n  deleteUser?: Maybe<DeleteUserPayload>;\n  /** The deleteUserReactionPost mutation */\n  deleteUserReactionPost?: Maybe<DeleteUserReactionPostPayload>;\n  /** The generateAuthorizationCode mutation */\n  generateAuthorizationCode?: Maybe<GenerateAuthorizationCodePayload>;\n  /** Increase the count. */\n  increaseCount?: Maybe<Scalars['Int']['output']>;\n  /** The ncmazFaustAddSubscriberToMailpoet mutation */\n  ncmazFaustAddSubscriberToMailpoet?: Maybe<NcmazFaustAddSubscriberToMailpoetPayload>;\n  /** The ncmazFaustUpdateUserReactionPostCount mutation */\n  ncmazFaustUpdateUserReactionPostCount?: Maybe<NcmazFaustUpdateUserReactionPostCountPayload>;\n  /** The registerUser mutation */\n  registerUser?: Maybe<RegisterUserPayload>;\n  /** The resetUserPassword mutation */\n  resetUserPassword?: Maybe<ResetUserPasswordPayload>;\n  /** The restoreComment mutation */\n  restoreComment?: Maybe<RestoreCommentPayload>;\n  /** Send password reset email to user */\n  sendPasswordResetEmail?: Maybe<SendPasswordResetEmailPayload>;\n  /** The updateCategory mutation */\n  updateCategory?: Maybe<UpdateCategoryPayload>;\n  /** The updateComment mutation */\n  updateComment?: Maybe<UpdateCommentPayload>;\n  /** The updateGraphqlDocument mutation */\n  updateGraphqlDocument?: Maybe<UpdateGraphqlDocumentPayload>;\n  /** The updateMediaItem mutation */\n  updateMediaItem?: Maybe<UpdateMediaItemPayload>;\n  /** The updatePage mutation */\n  updatePage?: Maybe<UpdatePagePayload>;\n  /** The updatePost mutation */\n  updatePost?: Maybe<UpdatePostPayload>;\n  /** The updatePostFormat mutation */\n  updatePostFormat?: Maybe<UpdatePostFormatPayload>;\n  /** The updateSettings mutation */\n  updateSettings?: Maybe<UpdateSettingsPayload>;\n  /** The updateTag mutation */\n  updateTag?: Maybe<UpdateTagPayload>;\n  /** The updateUser mutation */\n  updateUser?: Maybe<UpdateUserPayload>;\n  /** The updateUserReactionPost mutation */\n  updateUserReactionPost?: Maybe<UpdateUserReactionPostPayload>;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateCategoryArgs = {\n  input: CreateCategoryInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateCommentArgs = {\n  input: CreateCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateGraphqlDocumentArgs = {\n  input: CreateGraphqlDocumentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateMediaItemArgs = {\n  input: CreateMediaItemInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreatePageArgs = {\n  input: CreatePageInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreatePostArgs = {\n  input: CreatePostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreatePostFormatArgs = {\n  input: CreatePostFormatInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateTagArgs = {\n  input: CreateTagInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationCreateUserReactionPostArgs = {\n  input: CreateUserReactionPostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteCategoryArgs = {\n  input: DeleteCategoryInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteCommentArgs = {\n  input: DeleteCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteGraphqlDocumentArgs = {\n  input: DeleteGraphqlDocumentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteMediaItemArgs = {\n  input: DeleteMediaItemInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeletePageArgs = {\n  input: DeletePageInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeletePostArgs = {\n  input: DeletePostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeletePostFormatArgs = {\n  input: DeletePostFormatInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteTagArgs = {\n  input: DeleteTagInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteUserArgs = {\n  input: DeleteUserInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationDeleteUserReactionPostArgs = {\n  input: DeleteUserReactionPostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationGenerateAuthorizationCodeArgs = {\n  input: GenerateAuthorizationCodeInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationIncreaseCountArgs = {\n  count?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root mutation */\nexport type RootMutationNcmazFaustAddSubscriberToMailpoetArgs = {\n  input: NcmazFaustAddSubscriberToMailpoetInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationNcmazFaustUpdateUserReactionPostCountArgs = {\n  input: NcmazFaustUpdateUserReactionPostCountInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationRegisterUserArgs = {\n  input: RegisterUserInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationResetUserPasswordArgs = {\n  input: ResetUserPasswordInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationRestoreCommentArgs = {\n  input: RestoreCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationSendPasswordResetEmailArgs = {\n  input: SendPasswordResetEmailInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateCategoryArgs = {\n  input: UpdateCategoryInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateCommentArgs = {\n  input: UpdateCommentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateGraphqlDocumentArgs = {\n  input: UpdateGraphqlDocumentInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateMediaItemArgs = {\n  input: UpdateMediaItemInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdatePageArgs = {\n  input: UpdatePageInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdatePostArgs = {\n  input: UpdatePostInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdatePostFormatArgs = {\n  input: UpdatePostFormatInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateSettingsArgs = {\n  input: UpdateSettingsInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateTagArgs = {\n  input: UpdateTagInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\n/** The root mutation */\nexport type RootMutationUpdateUserReactionPostArgs = {\n  input: UpdateUserReactionPostInput;\n};\n\n/** The root entry point into the Graph */\nexport type RootQuery = {\n  __typename?: 'RootQuery';\n  /** Entry point to get all settings for the site */\n  allSettings?: Maybe<Settings>;\n  /** Connection between the RootQuery type and the category type */\n  categories?: Maybe<RootQueryToCategoryConnection>;\n  /** A 0bject */\n  category?: Maybe<Category>;\n  /** Returns a Comment */\n  comment?: Maybe<Comment>;\n  /** Connection between the RootQuery type and the Comment type */\n  comments?: Maybe<RootQueryToCommentConnection>;\n  /** A node used to manage content */\n  contentNode?: Maybe<ContentNode>;\n  /** Connection between the RootQuery type and the ContentNode type */\n  contentNodes?: Maybe<RootQueryToContentNodeConnection>;\n  /** Fetch a Content Type node by unique Identifier */\n  contentType?: Maybe<ContentType>;\n  /** Connection between the RootQuery type and the ContentType type */\n  contentTypes?: Maybe<RootQueryToContentTypeConnection>;\n  /** Fields of the &#039;DiscussionSettings&#039; settings group */\n  discussionSettings?: Maybe<DiscussionSettings>;\n  /** Fields of the &#039;GeneralSettings&#039; settings group */\n  generalSettings?: Maybe<GeneralSettings>;\n  /** Returns the stylesheet resulting of merging core, theme, and user data. */\n  globalStylesheet?: Maybe<Scalars['String']['output']>;\n  /** An object of the graphqlDocument Type. Saved GraphQL Documents */\n  graphqlDocument?: Maybe<GraphqlDocument>;\n  /**\n   * A graphqlDocument object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  graphqlDocumentBy?: Maybe<GraphqlDocument>;\n  /** Connection between the RootQuery type and the graphqlDocument type */\n  graphqlDocuments?: Maybe<RootQueryToGraphqlDocumentConnection>;\n  /** An object of the mediaItem Type.  */\n  mediaItem?: Maybe<MediaItem>;\n  /**\n   * A mediaItem object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  mediaItemBy?: Maybe<MediaItem>;\n  /** Connection between the RootQuery type and the mediaItem type */\n  mediaItems?: Maybe<RootQueryToMediaItemConnection>;\n  /** A WordPress navigation menu */\n  menu?: Maybe<Menu>;\n  /** A WordPress navigation menu item */\n  menuItem?: Maybe<MenuItem>;\n  /** Connection between the RootQuery type and the MenuItem type */\n  menuItems?: Maybe<RootQueryToMenuItemConnection>;\n  /** Connection between the RootQuery type and the Menu type */\n  menus?: Maybe<RootQueryToMenuConnection>;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n  /** Fetches an object given its Unique Resource Identifier */\n  nodeByUri?: Maybe<UniformResourceIdentifiable>;\n  /** An object of the page Type.  */\n  page?: Maybe<Page>;\n  /**\n   * A page object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  pageBy?: Maybe<Page>;\n  /** Connection between the RootQuery type and the page type */\n  pages?: Maybe<RootQueryToPageConnection>;\n  /** A WordPress plugin */\n  plugin?: Maybe<Plugin>;\n  /** Connection between the RootQuery type and the Plugin type */\n  plugins?: Maybe<RootQueryToPluginConnection>;\n  /** An object of the post Type.  */\n  post?: Maybe<Post>;\n  /**\n   * A post object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  postBy?: Maybe<Post>;\n  /** A 0bject */\n  postFormat?: Maybe<PostFormat>;\n  /** Connection between the RootQuery type and the postFormat type */\n  postFormats?: Maybe<RootQueryToPostFormatConnection>;\n  /** Connection between the RootQuery type and the post type */\n  posts?: Maybe<RootQueryToPostConnection>;\n  /** Fields of the &#039;ReadingSettings&#039; settings group */\n  readingSettings?: Maybe<ReadingSettings>;\n  /** Connection between the RootQuery type and the EnqueuedScript type */\n  registeredScripts?: Maybe<RootQueryToEnqueuedScriptConnection>;\n  /** Connection between the RootQuery type and the EnqueuedStylesheet type */\n  registeredStylesheets?: Maybe<RootQueryToEnqueuedStylesheetConnection>;\n  /** Connection between the RootQuery type and the ContentNode type */\n  revisions?: Maybe<RootQueryToRevisionsConnection>;\n  /** The logo set in the customizer */\n  siteLogo?: Maybe<MediaItem>;\n  /** A 0bject */\n  tag?: Maybe<Tag>;\n  /** Connection between the RootQuery type and the tag type */\n  tags?: Maybe<RootQueryToTagConnection>;\n  /** Connection between the RootQuery type and the Taxonomy type */\n  taxonomies?: Maybe<RootQueryToTaxonomyConnection>;\n  /** Fetch a Taxonomy node by unique Identifier */\n  taxonomy?: Maybe<Taxonomy>;\n  /** A node in a taxonomy used to group and relate content nodes */\n  termNode?: Maybe<TermNode>;\n  /** Connection between the RootQuery type and the TermNode type */\n  terms?: Maybe<RootQueryToTermNodeConnection>;\n  /** A Theme object */\n  theme?: Maybe<Theme>;\n  /** Connection between the RootQuery type and the Theme type */\n  themes?: Maybe<RootQueryToThemeConnection>;\n  /** Returns a user */\n  user?: Maybe<User>;\n  /** An object of the userReactionPost Type. Intermediate table to store information about each user&#039;s post retention. */\n  userReactionPost?: Maybe<UserReactionPost>;\n  /**\n   * A userReactionPost object\n   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)\n   */\n  userReactionPostBy?: Maybe<UserReactionPost>;\n  /** Connection between the RootQuery type and the userReactionPost type */\n  userReactionPosts?: Maybe<RootQueryToUserReactionPostConnection>;\n  /** Returns a user role */\n  userRole?: Maybe<UserRole>;\n  /** Connection between the RootQuery type and the UserRole type */\n  userRoles?: Maybe<RootQueryToUserRoleConnection>;\n  /** Connection between the RootQuery type and the User type */\n  users?: Maybe<RootQueryToUserConnection>;\n  /** Returns the current user */\n  viewer?: Maybe<User>;\n  /** Fields of the &#039;WritingSettings&#039; settings group */\n  writingSettings?: Maybe<WritingSettings>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCategoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToCategoryConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCategoryArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<CategoryIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCommentArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<CommentNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToCommentConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentNodeArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  contentType?: InputMaybe<ContentTypeEnum>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<ContentNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentTypeArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<ContentTypeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryContentTypesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryGlobalStylesheetArgs = {\n  types?: InputMaybe<Array<InputMaybe<GlobalStylesheetTypesEnum>>>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryGraphqlDocumentArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<GraphqlDocumentIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryGraphqlDocumentByArgs = {\n  graphqlDocumentId?: InputMaybe<Scalars['Int']['input']>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n  slug?: InputMaybe<Scalars['String']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryGraphqlDocumentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToGraphqlDocumentConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMediaItemArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<MediaItemIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMediaItemByArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n  mediaItemId?: InputMaybe<Scalars['Int']['input']>;\n  slug?: InputMaybe<Scalars['String']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMediaItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToMediaItemConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenuArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<MenuNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenuItemArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<MenuItemNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenuItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToMenuItemConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryMenusArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToMenuConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryNodeArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryNodeByUriArgs = {\n  uri: Scalars['String']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPageArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<PageIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPageByArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n  pageId?: InputMaybe<Scalars['Int']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPageConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPluginArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPluginsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPluginConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<PostIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostByArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n  postId?: InputMaybe<Scalars['Int']['input']>;\n  slug?: InputMaybe<Scalars['String']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostFormatArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<PostFormatIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostFormatsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPostFormatConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToPostConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryRegisteredScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryRegisteredStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToRevisionsConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTagArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<TagIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTagsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToTagConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTaxonomiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTaxonomyArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<TaxonomyIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTermNodeArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<TermNodeIdTypeEnum>;\n  taxonomy?: InputMaybe<TaxonomyEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryTermsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToTermNodeConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryThemeArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryThemesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserArgs = {\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<UserNodeIdTypeEnum>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserReactionPostArgs = {\n  asPreview?: InputMaybe<Scalars['Boolean']['input']>;\n  id: Scalars['ID']['input'];\n  idType?: InputMaybe<UserReactionPostIdType>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserReactionPostByArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n  slug?: InputMaybe<Scalars['String']['input']>;\n  uri?: InputMaybe<Scalars['String']['input']>;\n  userReactionPostId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserReactionPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToUserReactionPostConnectionWhereArgs>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserRoleArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUserRolesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The root entry point into the Graph */\nexport type RootQueryUsersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<RootQueryToUserConnectionWhereArgs>;\n};\n\n/** Connection between the RootQuery type and the category type */\nexport type RootQueryToCategoryConnection = CategoryConnection & Connection & {\n  __typename?: 'RootQueryToCategoryConnection';\n  /** Edges for the RootQueryToCategoryConnection connection */\n  edges: Array<RootQueryToCategoryConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Category>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToCategoryConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {\n  __typename?: 'RootQueryToCategoryConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Category;\n};\n\n/** Page Info on the &quot;RootQueryToCategoryConnection&quot; */\nexport type RootQueryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToCategoryConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToCategoryConnection connection */\nexport type RootQueryToCategoryConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the Comment type */\nexport type RootQueryToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'RootQueryToCommentConnection';\n  /** Edges for the RootQueryToCommentConnection connection */\n  edges: Array<RootQueryToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'RootQueryToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;RootQueryToCommentConnection&quot; */\nexport type RootQueryToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToCommentConnection connection */\nexport type RootQueryToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the RootQuery type and the ContentNode type */\nexport type RootQueryToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'RootQueryToContentNodeConnection';\n  /** Edges for the RootQueryToContentNodeConnection connection */\n  edges: Array<RootQueryToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'RootQueryToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;RootQueryToContentNodeConnection&quot; */\nexport type RootQueryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToContentNodeConnection connection */\nexport type RootQueryToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the ContentType type */\nexport type RootQueryToContentTypeConnection = Connection & ContentTypeConnection & {\n  __typename?: 'RootQueryToContentTypeConnection';\n  /** Edges for the RootQueryToContentTypeConnection connection */\n  edges: Array<RootQueryToContentTypeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentType>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToContentTypeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {\n  __typename?: 'RootQueryToContentTypeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentType;\n};\n\n/** Page Info on the &quot;RootQueryToContentTypeConnection&quot; */\nexport type RootQueryToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToContentTypeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the EnqueuedScript type */\nexport type RootQueryToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'RootQueryToEnqueuedScriptConnection';\n  /** Edges for the RootQueryToEnqueuedScriptConnection connection */\n  edges: Array<RootQueryToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'RootQueryToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;RootQueryToEnqueuedScriptConnection&quot; */\nexport type RootQueryToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the EnqueuedStylesheet type */\nexport type RootQueryToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'RootQueryToEnqueuedStylesheetConnection';\n  /** Edges for the RootQueryToEnqueuedStylesheetConnection connection */\n  edges: Array<RootQueryToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'RootQueryToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;RootQueryToEnqueuedStylesheetConnection&quot; */\nexport type RootQueryToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the graphqlDocument type */\nexport type RootQueryToGraphqlDocumentConnection = Connection & GraphqlDocumentConnection & {\n  __typename?: 'RootQueryToGraphqlDocumentConnection';\n  /** Edges for the RootQueryToGraphqlDocumentConnection connection */\n  edges: Array<RootQueryToGraphqlDocumentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<GraphqlDocument>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToGraphqlDocumentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToGraphqlDocumentConnectionEdge = Edge & GraphqlDocumentConnectionEdge & {\n  __typename?: 'RootQueryToGraphqlDocumentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: GraphqlDocument;\n};\n\n/** Page Info on the &quot;RootQueryToGraphqlDocumentConnection&quot; */\nexport type RootQueryToGraphqlDocumentConnectionPageInfo = GraphqlDocumentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToGraphqlDocumentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToGraphqlDocumentConnection connection */\nexport type RootQueryToGraphqlDocumentConnectionWhereArgs = {\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the mediaItem type */\nexport type RootQueryToMediaItemConnection = Connection & MediaItemConnection & {\n  __typename?: 'RootQueryToMediaItemConnection';\n  /** Edges for the RootQueryToMediaItemConnection connection */\n  edges: Array<RootQueryToMediaItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MediaItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToMediaItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {\n  __typename?: 'RootQueryToMediaItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MediaItem;\n};\n\n/** Page Info on the &quot;RootQueryToMediaItemConnection&quot; */\nexport type RootQueryToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToMediaItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToMediaItemConnection connection */\nexport type RootQueryToMediaItemConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the Menu type */\nexport type RootQueryToMenuConnection = Connection & MenuConnection & {\n  __typename?: 'RootQueryToMenuConnection';\n  /** Edges for the RootQueryToMenuConnection connection */\n  edges: Array<RootQueryToMenuConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Menu>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToMenuConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToMenuConnectionEdge = Edge & MenuConnectionEdge & {\n  __typename?: 'RootQueryToMenuConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Menu;\n};\n\n/** Page Info on the &quot;RootQueryToMenuConnection&quot; */\nexport type RootQueryToMenuConnectionPageInfo = MenuConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToMenuConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToMenuConnection connection */\nexport type RootQueryToMenuConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The slug of the menu to query items for */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the MenuItem type */\nexport type RootQueryToMenuItemConnection = Connection & MenuItemConnection & {\n  __typename?: 'RootQueryToMenuItemConnection';\n  /** Edges for the RootQueryToMenuItemConnection connection */\n  edges: Array<RootQueryToMenuItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MenuItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToMenuItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {\n  __typename?: 'RootQueryToMenuItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MenuItem;\n};\n\n/** Page Info on the &quot;RootQueryToMenuItemConnection&quot; */\nexport type RootQueryToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToMenuItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToMenuItemConnection connection */\nexport type RootQueryToMenuItemConnectionWhereArgs = {\n  /** The database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** The menu location for the menu being queried */\n  location?: InputMaybe<MenuLocationEnum>;\n  /** The database ID of the parent menu object */\n  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent menu object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the RootQuery type and the page type */\nexport type RootQueryToPageConnection = Connection & PageConnection & {\n  __typename?: 'RootQueryToPageConnection';\n  /** Edges for the RootQueryToPageConnection connection */\n  edges: Array<RootQueryToPageConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPageConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPageConnectionEdge = Edge & PageConnectionEdge & {\n  __typename?: 'RootQueryToPageConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Page;\n};\n\n/** Page Info on the &quot;RootQueryToPageConnection&quot; */\nexport type RootQueryToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPageConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPageConnection connection */\nexport type RootQueryToPageConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the Plugin type */\nexport type RootQueryToPluginConnection = Connection & PluginConnection & {\n  __typename?: 'RootQueryToPluginConnection';\n  /** Edges for the RootQueryToPluginConnection connection */\n  edges: Array<RootQueryToPluginConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Plugin>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPluginConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPluginConnectionEdge = Edge & PluginConnectionEdge & {\n  __typename?: 'RootQueryToPluginConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Plugin;\n};\n\n/** Page Info on the &quot;RootQueryToPluginConnection&quot; */\nexport type RootQueryToPluginConnectionPageInfo = PageInfo & PluginConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPluginConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPluginConnection connection */\nexport type RootQueryToPluginConnectionWhereArgs = {\n  /** Show plugin based on a keyword search. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve plugins where plugin status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PluginStatusEnum>>>;\n  /** Show plugins with a specific status. */\n  status?: InputMaybe<PluginStatusEnum>;\n};\n\n/** Connection between the RootQuery type and the post type */\nexport type RootQueryToPostConnection = Connection & PostConnection & {\n  __typename?: 'RootQueryToPostConnection';\n  /** Edges for the RootQueryToPostConnection connection */\n  edges: Array<RootQueryToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'RootQueryToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;RootQueryToPostConnection&quot; */\nexport type RootQueryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPostConnection connection */\nexport type RootQueryToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter posts liked/save/viewed by user slug (user_slug/reaction, eg: admin/SAVE) */\n  inUserAndReaction?: InputMaybe<Scalars['String']['input']>;\n  /** Filter related posts of post_database_id */\n  isRelatedOfPostId?: InputMaybe<Scalars['Int']['input']>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to only include sticky posts */\n  onlySticky?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the postFormat type */\nexport type RootQueryToPostFormatConnection = Connection & PostFormatConnection & {\n  __typename?: 'RootQueryToPostFormatConnection';\n  /** Edges for the RootQueryToPostFormatConnection connection */\n  edges: Array<RootQueryToPostFormatConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<PostFormat>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToPostFormatConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {\n  __typename?: 'RootQueryToPostFormatConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: PostFormat;\n};\n\n/** Page Info on the &quot;RootQueryToPostFormatConnection&quot; */\nexport type RootQueryToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToPostFormatConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToPostFormatConnection connection */\nexport type RootQueryToPostFormatConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the ContentNode type */\nexport type RootQueryToRevisionsConnection = Connection & ContentNodeConnection & {\n  __typename?: 'RootQueryToRevisionsConnection';\n  /** Edges for the RootQueryToRevisionsConnection connection */\n  edges: Array<RootQueryToRevisionsConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToRevisionsConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'RootQueryToRevisionsConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;RootQueryToRevisionsConnection&quot; */\nexport type RootQueryToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToRevisionsConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToRevisionsConnection connection */\nexport type RootQueryToRevisionsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the tag type */\nexport type RootQueryToTagConnection = Connection & TagConnection & {\n  __typename?: 'RootQueryToTagConnection';\n  /** Edges for the RootQueryToTagConnection connection */\n  edges: Array<RootQueryToTagConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Tag>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToTagConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToTagConnectionEdge = Edge & TagConnectionEdge & {\n  __typename?: 'RootQueryToTagConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Tag;\n};\n\n/** Page Info on the &quot;RootQueryToTagConnection&quot; */\nexport type RootQueryToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToTagConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToTagConnection connection */\nexport type RootQueryToTagConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the Taxonomy type */\nexport type RootQueryToTaxonomyConnection = Connection & TaxonomyConnection & {\n  __typename?: 'RootQueryToTaxonomyConnection';\n  /** Edges for the RootQueryToTaxonomyConnection connection */\n  edges: Array<RootQueryToTaxonomyConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Taxonomy>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToTaxonomyConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {\n  __typename?: 'RootQueryToTaxonomyConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Taxonomy;\n};\n\n/** Page Info on the &quot;RootQueryToTaxonomyConnection&quot; */\nexport type RootQueryToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToTaxonomyConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the TermNode type */\nexport type RootQueryToTermNodeConnection = Connection & TermNodeConnection & {\n  __typename?: 'RootQueryToTermNodeConnection';\n  /** Edges for the RootQueryToTermNodeConnection connection */\n  edges: Array<RootQueryToTermNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<TermNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToTermNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {\n  __typename?: 'RootQueryToTermNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: TermNode;\n};\n\n/** Page Info on the &quot;RootQueryToTermNodeConnection&quot; */\nexport type RootQueryToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToTermNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToTermNodeConnection connection */\nexport type RootQueryToTermNodeConnectionWhereArgs = {\n  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */\n  cacheDomain?: InputMaybe<Scalars['String']['input']>;\n  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */\n  childOf?: InputMaybe<Scalars['Int']['input']>;\n  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */\n  childless?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Retrieve terms where the description is LIKE the input value. Default empty. */\n  descriptionLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */\n  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */\n  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */\n  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Array of term ids to include. Default empty array. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of names to return term(s) for. Default empty. */\n  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Retrieve terms where the name is LIKE the input value. Default empty. */\n  nameLike?: InputMaybe<Scalars['String']['input']>;\n  /** Array of object IDs. Results will be limited to terms associated with these objects. */\n  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Direction the connection should be ordered in */\n  order?: InputMaybe<OrderEnum>;\n  /** Field(s) to order terms by. Defaults to 'name'. */\n  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;\n  /** Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false. */\n  padCounts?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Parent term ID to retrieve direct-child terms of. Default empty. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of slugs to return term(s) for. Default empty. */\n  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The Taxonomy to filter terms by */\n  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of term taxonomy IDs, to match when querying terms. */\n  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Whether to prime meta caches for matched terms. Default true. */\n  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Connection between the RootQuery type and the Theme type */\nexport type RootQueryToThemeConnection = Connection & ThemeConnection & {\n  __typename?: 'RootQueryToThemeConnection';\n  /** Edges for the RootQueryToThemeConnection connection */\n  edges: Array<RootQueryToThemeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Theme>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToThemeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToThemeConnectionEdge = Edge & ThemeConnectionEdge & {\n  __typename?: 'RootQueryToThemeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Theme;\n};\n\n/** Page Info on the &quot;RootQueryToThemeConnection&quot; */\nexport type RootQueryToThemeConnectionPageInfo = PageInfo & ThemeConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToThemeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the RootQuery type and the User type */\nexport type RootQueryToUserConnection = Connection & UserConnection & {\n  __typename?: 'RootQueryToUserConnection';\n  /** Edges for the RootQueryToUserConnection connection */\n  edges: Array<RootQueryToUserConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<User>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToUserConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToUserConnectionEdge = Edge & UserConnectionEdge & {\n  __typename?: 'RootQueryToUserConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: User;\n};\n\n/** Page Info on the &quot;RootQueryToUserConnection&quot; */\nexport type RootQueryToUserConnectionPageInfo = PageInfo & UserConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToUserConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToUserConnection connection */\nexport type RootQueryToUserConnectionWhereArgs = {\n  /** Array of userIds to exclude. */\n  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** Pass an array of post types to filter results to users who have published posts in those post types. */\n  hasPublishedPosts?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of userIds to include. */\n  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;\n  /** The user login. */\n  login?: InputMaybe<Scalars['String']['input']>;\n  /** An array of logins to include. Users matching one of these logins will be included in results. */\n  loginIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */\n  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** The user nicename. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */\n  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */\n  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<UsersConnectionOrderbyInput>>>;\n  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */\n  role?: InputMaybe<UserRoleEnum>;\n  /** An array of role names. Matched users must have at least one of these roles. */\n  roleIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;\n  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */\n  roleNotIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;\n  /** Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */\n  searchColumns?: InputMaybe<Array<InputMaybe<UsersConnectionSearchColumnEnum>>>;\n};\n\n/** Connection between the RootQuery type and the userReactionPost type */\nexport type RootQueryToUserReactionPostConnection = Connection & UserReactionPostConnection & {\n  __typename?: 'RootQueryToUserReactionPostConnection';\n  /** Edges for the RootQueryToUserReactionPostConnection connection */\n  edges: Array<RootQueryToUserReactionPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<UserReactionPost>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToUserReactionPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToUserReactionPostConnectionEdge = Edge & UserReactionPostConnectionEdge & {\n  __typename?: 'RootQueryToUserReactionPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: UserReactionPost;\n};\n\n/** Page Info on the &quot;RootQueryToUserReactionPostConnection&quot; */\nexport type RootQueryToUserReactionPostConnectionPageInfo = PageInfo & UserReactionPostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToUserReactionPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the RootQueryToUserReactionPostConnection connection */\nexport type RootQueryToUserReactionPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the RootQuery type and the UserRole type */\nexport type RootQueryToUserRoleConnection = Connection & UserRoleConnection & {\n  __typename?: 'RootQueryToUserRoleConnection';\n  /** Edges for the RootQueryToUserRoleConnection connection */\n  edges: Array<RootQueryToUserRoleConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<UserRole>;\n  /** Information about pagination in a connection. */\n  pageInfo: RootQueryToUserRoleConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type RootQueryToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {\n  __typename?: 'RootQueryToUserRoleConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: UserRole;\n};\n\n/** Page Info on the &quot;RootQueryToUserRoleConnection&quot; */\nexport type RootQueryToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {\n  __typename?: 'RootQueryToUserRoleConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the sendPasswordResetEmail mutation. */\nexport type SendPasswordResetEmailInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the user's username or email address. */\n  username: Scalars['String']['input'];\n};\n\n/** The payload for the sendPasswordResetEmail mutation. */\nexport type SendPasswordResetEmailPayload = {\n  __typename?: 'SendPasswordResetEmailPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent. */\n  success?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * The user that the password reset email was sent to\n   * @deprecated This field will be removed in a future version of WPGraphQL\n   */\n  user?: Maybe<User>;\n};\n\n/** All of the registered settings */\nexport type Settings = {\n  __typename?: 'Settings';\n  /** Settings of the the string Settings Group */\n  discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsDateFormat?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsDescription?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsEmail?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsLanguage?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the integer Settings Group */\n  generalSettingsStartOfWeek?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsTimeFormat?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsTimezone?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsTitle?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the string Settings Group */\n  generalSettingsUrl?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the integer Settings Group */\n  readingSettingsPageForPosts?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the integer Settings Group */\n  readingSettingsPageOnFront?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the integer Settings Group */\n  readingSettingsPostsPerPage?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the string Settings Group */\n  readingSettingsShowOnFront?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the integer Settings Group */\n  writingSettingsDefaultCategory?: Maybe<Scalars['Int']['output']>;\n  /** Settings of the the string Settings Group */\n  writingSettingsDefaultPostFormat?: Maybe<Scalars['String']['output']>;\n  /** Settings of the the boolean Settings Group */\n  writingSettingsUseSmilies?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** The tag type */\nexport type Tag = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {\n  __typename?: 'Tag';\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the Tag type and the ContentNode type */\n  contentNodes?: Maybe<TagToContentNodeConnection>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Connection between the Tag type and the post type */\n  posts?: Maybe<TagToPostConnection>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of databaseId\n   */\n  tagId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the Tag type and the Taxonomy type */\n  taxonomy?: Maybe<TagToTaxonomyConnectionEdge>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** The tag type */\nexport type TagContentNodesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<TagToContentNodeConnectionWhereArgs>;\n};\n\n\n/** The tag type */\nexport type TagEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The tag type */\nexport type TagEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The tag type */\nexport type TagPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<TagToPostConnectionWhereArgs>;\n};\n\n/** Connection to tag Nodes */\nexport type TagConnection = {\n  /** A list of edges (relational context) between RootQuery and connected tag Nodes */\n  edges: Array<TagConnectionEdge>;\n  /** A list of connected tag Nodes */\n  nodes: Array<Tag>;\n  /** Information about pagination in a connection. */\n  pageInfo: TagConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected tag */\nexport type TagConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected tag Node */\n  node: Tag;\n};\n\n/** Page Info on the connected TagConnectionEdge */\nexport type TagConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum TagIdType {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the Tag type and the ContentNode type */\nexport type TagToContentNodeConnection = Connection & ContentNodeConnection & {\n  __typename?: 'TagToContentNodeConnection';\n  /** Edges for the TagToContentNodeConnection connection */\n  edges: Array<TagToContentNodeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: TagToContentNodeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TagToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'TagToContentNodeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;TagToContentNodeConnection&quot; */\nexport type TagToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TagToContentNodeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the TagToContentNodeConnection connection */\nexport type TagToContentNodeConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfTagEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Tag type and the post type */\nexport type TagToPostConnection = Connection & PostConnection & {\n  __typename?: 'TagToPostConnection';\n  /** Edges for the TagToPostConnection connection */\n  edges: Array<TagToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: TagToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TagToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'TagToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;TagToPostConnection&quot; */\nexport type TagToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'TagToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the TagToPostConnection connection */\nexport type TagToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the Tag type and the Taxonomy type */\nexport type TagToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {\n  __typename?: 'TagToTaxonomyConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: Taxonomy;\n};\n\n/** A taxonomy object */\nexport type Taxonomy = Node & {\n  __typename?: 'Taxonomy';\n  /** List of Content Types associated with the Taxonomy */\n  connectedContentTypes?: Maybe<TaxonomyToContentTypeConnection>;\n  /** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The plural name of the post type within the GraphQL Schema. */\n  graphqlPluralName?: Maybe<Scalars['String']['output']>;\n  /** The singular name of the post type within the GraphQL Schema. */\n  graphqlSingleName?: Maybe<Scalars['String']['output']>;\n  /** Whether the taxonomy is hierarchical */\n  hierarchical?: Maybe<Scalars['Boolean']['output']>;\n  /** The globally unique identifier of the taxonomy object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Name of the taxonomy shown in the menu. Usually plural. */\n  label?: Maybe<Scalars['String']['output']>;\n  /** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Whether the taxonomy is publicly queryable */\n  public?: Maybe<Scalars['Boolean']['output']>;\n  /** Name of content type to diplay in REST API &quot;wp/v2&quot; namespace. */\n  restBase?: Maybe<Scalars['String']['output']>;\n  /** The REST Controller class assigned to handling this content type. */\n  restControllerClass?: Maybe<Scalars['String']['output']>;\n  /** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */\n  showCloud?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to display a column for the taxonomy on its post type listing screens. */\n  showInAdminColumn?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to add the post type to the GraphQL Schema. */\n  showInGraphql?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to show the taxonomy in the admin menu */\n  showInMenu?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the taxonomy is available for selection in navigation menus. */\n  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to show the taxonomy in the quick/bulk edit panel. */\n  showInQuickEdit?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */\n  showInRest?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */\n  showUi?: Maybe<Scalars['Boolean']['output']>;\n};\n\n\n/** A taxonomy object */\nexport type TaxonomyConnectedContentTypesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to Taxonomy Nodes */\nexport type TaxonomyConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Taxonomy Nodes */\n  edges: Array<TaxonomyConnectionEdge>;\n  /** A list of connected Taxonomy Nodes */\n  nodes: Array<Taxonomy>;\n  /** Information about pagination in a connection. */\n  pageInfo: TaxonomyConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Taxonomy */\nexport type TaxonomyConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Taxonomy Node */\n  node: Taxonomy;\n};\n\n/** Page Info on the connected TaxonomyConnectionEdge */\nexport type TaxonomyConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Allowed taxonomies */\nexport enum TaxonomyEnum {\n  /** Taxonomy enum category */\n  Category = 'CATEGORY',\n  /** Taxonomy enum post_format */\n  Postformat = 'POSTFORMAT',\n  /** Taxonomy enum post_tag */\n  Tag = 'TAG'\n}\n\n/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum TaxonomyIdTypeEnum {\n  /** The globally unique ID */\n  Id = 'ID',\n  /** The name of the taxonomy */\n  Name = 'NAME'\n}\n\n/** Connection between the Taxonomy type and the ContentType type */\nexport type TaxonomyToContentTypeConnection = Connection & ContentTypeConnection & {\n  __typename?: 'TaxonomyToContentTypeConnection';\n  /** Edges for the TaxonomyToContentTypeConnection connection */\n  edges: Array<TaxonomyToContentTypeConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentType>;\n  /** Information about pagination in a connection. */\n  pageInfo: TaxonomyToContentTypeConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TaxonomyToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {\n  __typename?: 'TaxonomyToContentTypeConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentType;\n};\n\n/** Page Info on the &quot;TaxonomyToContentTypeConnection&quot; */\nexport type TaxonomyToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TaxonomyToContentTypeConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to the node */\nexport type Template_Blank = ContentTemplate & {\n  __typename?: 'Template_Blank';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** The template assigned to the node */\nexport type Template_BlogAlternative = ContentTemplate & {\n  __typename?: 'Template_BlogAlternative';\n  /** The name of the template */\n  templateName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */\nexport type TermNode = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The number of objects connected to the object */\n  count?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the primary key from the database. */\n  databaseId: Scalars['Int']['output'];\n  /** The description of the object */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Connection between the TermNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;\n  /** Connection between the TermNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The link to the term */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The human friendly name of the object. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** An alphanumeric identifier for the object unique to its type. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The name of the taxonomy that the object is associated with */\n  taxonomyName?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The ID of the term group that this term object belongs to */\n  termGroupId?: Maybe<Scalars['Int']['output']>;\n  /** The taxonomy ID that the object is associated with */\n  termTaxonomyId?: Maybe<Scalars['Int']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */\nexport type TermNodeEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */\nexport type TermNodeEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Connection to TermNode Nodes */\nexport type TermNodeConnection = {\n  /** A list of edges (relational context) between RootQuery and connected TermNode Nodes */\n  edges: Array<TermNodeConnectionEdge>;\n  /** A list of connected TermNode Nodes */\n  nodes: Array<TermNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: TermNodeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected TermNode */\nexport type TermNodeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected TermNode Node */\n  node: TermNode;\n};\n\n/** Page Info on the connected TermNodeConnectionEdge */\nexport type TermNodeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field. */\nexport enum TermNodeIdTypeEnum {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The name of the node */\n  Name = 'NAME',\n  /** Url friendly name of the node */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI'\n}\n\n/** Connection between the TermNode type and the EnqueuedScript type */\nexport type TermNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'TermNodeToEnqueuedScriptConnection';\n  /** Edges for the TermNodeToEnqueuedScriptConnection connection */\n  edges: Array<TermNodeToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TermNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'TermNodeToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;TermNodeToEnqueuedScriptConnection&quot; */\nexport type TermNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TermNodeToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the TermNode type and the EnqueuedStylesheet type */\nexport type TermNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'TermNodeToEnqueuedStylesheetConnection';\n  /** Edges for the TermNodeToEnqueuedStylesheetConnection connection */\n  edges: Array<TermNodeToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type TermNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'TermNodeToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;TermNodeToEnqueuedStylesheetConnection&quot; */\nexport type TermNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'TermNodeToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Options for ordering the connection by */\nexport enum TermObjectsConnectionOrderbyEnum {\n  /** Order the connection by item count. */\n  Count = 'COUNT',\n  /** Order the connection by description. */\n  Description = 'DESCRIPTION',\n  /** Order the connection by name. */\n  Name = 'NAME',\n  /** Order the connection by slug. */\n  Slug = 'SLUG',\n  /** Order the connection by term group. */\n  TermGroup = 'TERM_GROUP',\n  /** Order the connection by term id. */\n  TermId = 'TERM_ID',\n  /** Order the connection by term order. */\n  TermOrder = 'TERM_ORDER'\n}\n\n/** A theme object */\nexport type Theme = Node & {\n  __typename?: 'Theme';\n  /** Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ). */\n  author?: Maybe<Scalars['String']['output']>;\n  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ). */\n  authorUri?: Maybe<Scalars['String']['output']>;\n  /** The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ). */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the theme object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ). */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot(). */\n  screenshot?: Maybe<Scalars['String']['output']>;\n  /** The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet(). */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ). */\n  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ). */\n  themeUri?: Maybe<Scalars['String']['output']>;\n  /** The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ). */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to Theme Nodes */\nexport type ThemeConnection = {\n  /** A list of edges (relational context) between RootQuery and connected Theme Nodes */\n  edges: Array<ThemeConnectionEdge>;\n  /** A list of connected Theme Nodes */\n  nodes: Array<Theme>;\n  /** Information about pagination in a connection. */\n  pageInfo: ThemeConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected Theme */\nexport type ThemeConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected Theme Node */\n  node: Theme;\n};\n\n/** Page Info on the connected ThemeConnectionEdge */\nexport type ThemeConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Any node that has a URI */\nexport type UniformResourceIdentifiable = {\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** The unique resource identifier path */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the updateCategory mutation. */\nexport type UpdateCategoryInput = {\n  /** The slug that the category will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the category object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the category object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the category that should be set as the parent */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateCategory mutation. */\nexport type UpdateCategoryPayload = {\n  __typename?: 'UpdateCategoryPayload';\n  /** The created category */\n  category?: Maybe<Category>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Input for the updateComment mutation. */\nexport type UpdateCommentInput = {\n  /** The approval status of the comment. */\n  approved?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the comment's author. */\n  author?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the comment's author. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The url of the comment's author. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The database ID of the post object the comment belongs to. */\n  commentOn?: InputMaybe<Scalars['Int']['input']>;\n  /** Content of the comment. */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment being updated. */\n  id: Scalars['ID']['input'];\n  /** Parent comment ID of current comment. */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** The approval status of the comment */\n  status?: InputMaybe<CommentStatusEnum>;\n  /** Type of comment. */\n  type?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateComment mutation. */\nexport type UpdateCommentPayload = {\n  __typename?: 'UpdateCommentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The comment that was created */\n  comment?: Maybe<Comment>;\n  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Input for the updateGraphqlDocument mutation. */\nexport type UpdateGraphqlDocumentInput = {\n  /** Alias names for saved GraphQL query documents */\n  alias?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** Description for the saved GraphQL document */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Allow, deny or default access grant for specific query */\n  grant?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the graphqlDocument object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** HTTP Cache-Control max-age directive for a saved GraphQL document */\n  maxAgeHeader?: InputMaybe<Scalars['Int']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateGraphqlDocument mutation. */\nexport type UpdateGraphqlDocumentPayload = {\n  __typename?: 'UpdateGraphqlDocumentPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  graphqlDocument?: Maybe<GraphqlDocument>;\n};\n\n/** Input for the updateMediaItem mutation. */\nexport type UpdateMediaItemInput = {\n  /** Alternative text to display when mediaItem is not displayed */\n  altText?: InputMaybe<Scalars['String']['input']>;\n  /** The userId to assign as the author of the mediaItem */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** The caption for the mediaItem */\n  caption?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the mediaItem */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the mediaItem */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The date (in GMT zone) of the mediaItem */\n  dateGmt?: InputMaybe<Scalars['String']['input']>;\n  /** Description of the mediaItem */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The file name of the mediaItem */\n  filePath?: InputMaybe<Scalars['String']['input']>;\n  /** The file type of the mediaItem */\n  fileType?: InputMaybe<MimeTypeEnum>;\n  /** The ID of the mediaItem object */\n  id: Scalars['ID']['input'];\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The ping status for the mediaItem */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the mediaItem */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the mediaItem */\n  status?: InputMaybe<MediaItemStatusEnum>;\n  /** The title of the mediaItem */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateMediaItem mutation. */\nexport type UpdateMediaItemPayload = {\n  __typename?: 'UpdateMediaItemPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The MediaItem object mutation type. */\n  mediaItem?: Maybe<MediaItem>;\n};\n\n/** Input for the updatePage mutation. */\nexport type UpdatePageInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the page object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the parent object */\n  parentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updatePage mutation. */\nexport type UpdatePagePayload = {\n  __typename?: 'UpdatePagePayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  page?: Maybe<Page>;\n};\n\n/** Input for the updatePostFormat mutation. */\nexport type UpdatePostFormatInput = {\n  /** The slug that the post_format will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_format object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the postFormat object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the post_format object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updatePostFormat mutation. */\nexport type UpdatePostFormatPayload = {\n  __typename?: 'UpdatePostFormatPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_format */\n  postFormat?: Maybe<PostFormat>;\n};\n\n/** Input for the updatePost mutation. */\nexport type UpdatePostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** Set connections between the post and categories */\n  categories?: InputMaybe<PostCategoriesInput>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The comment status for the object */\n  commentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the object */\n  content?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The excerpt of the object */\n  excerpt?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the post object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  ncTags?: InputMaybe<Scalars['String']['input']>;\n  ncmazAudioUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazFeaturedImgAlt?: InputMaybe<Scalars['String']['input']>;\n  ncmazFeaturedImgUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg1Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg1Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg2Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg2Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg3Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg3Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg4Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg4Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg5Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg5Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg6Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg6Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg7Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg7Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg8Alt?: InputMaybe<Scalars['String']['input']>;\n  ncmazGalleryImg8Url?: InputMaybe<Scalars['String']['input']>;\n  ncmazVideoUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The ping status for the object */\n  pingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** URLs that have been pinged. */\n  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Set connections between the post and postFormats */\n  postFormats?: InputMaybe<PostPostFormatsInput>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Set connections between the post and tags */\n  tags?: InputMaybe<PostTagsInput>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n  /** URLs queued to be pinged. */\n  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n};\n\n/** The payload for the updatePost mutation. */\nexport type UpdatePostPayload = {\n  __typename?: 'UpdatePostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  post?: Maybe<Post>;\n};\n\n/** Input for the updateSettings mutation. */\nexport type UpdateSettingsInput = {\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Allow people to submit comments on new posts. */\n  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars['String']['input']>;\n  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */\n  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars['String']['input']>;\n  /** A date format for all date strings. */\n  generalSettingsDateFormat?: InputMaybe<Scalars['String']['input']>;\n  /** Site tagline. */\n  generalSettingsDescription?: InputMaybe<Scalars['String']['input']>;\n  /** This address is used for admin purposes, like new user notification. */\n  generalSettingsEmail?: InputMaybe<Scalars['String']['input']>;\n  /** WordPress locale code. */\n  generalSettingsLanguage?: InputMaybe<Scalars['String']['input']>;\n  /** A day number of the week that the week should start on. */\n  generalSettingsStartOfWeek?: InputMaybe<Scalars['Int']['input']>;\n  /** A time format for all time strings. */\n  generalSettingsTimeFormat?: InputMaybe<Scalars['String']['input']>;\n  /** A city in the same timezone as you. */\n  generalSettingsTimezone?: InputMaybe<Scalars['String']['input']>;\n  /** Site title. */\n  generalSettingsTitle?: InputMaybe<Scalars['String']['input']>;\n  /** Site URL. */\n  generalSettingsUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the page that should display the latest posts */\n  readingSettingsPageForPosts?: InputMaybe<Scalars['Int']['input']>;\n  /** The ID of the page that should be displayed on the front page */\n  readingSettingsPageOnFront?: InputMaybe<Scalars['Int']['input']>;\n  /** Blog pages show at most. */\n  readingSettingsPostsPerPage?: InputMaybe<Scalars['Int']['input']>;\n  /** What to show on the front page */\n  readingSettingsShowOnFront?: InputMaybe<Scalars['String']['input']>;\n  /** Default post category. */\n  writingSettingsDefaultCategory?: InputMaybe<Scalars['Int']['input']>;\n  /** Default post format. */\n  writingSettingsDefaultPostFormat?: InputMaybe<Scalars['String']['input']>;\n  /** Convert emoticons like :-) and :-P to graphics on display. */\n  writingSettingsUseSmilies?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** The payload for the updateSettings mutation. */\nexport type UpdateSettingsPayload = {\n  __typename?: 'UpdateSettingsPayload';\n  /** Update all settings. */\n  allSettings?: Maybe<Settings>;\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Update the DiscussionSettings setting. */\n  discussionSettings?: Maybe<DiscussionSettings>;\n  /** Update the GeneralSettings setting. */\n  generalSettings?: Maybe<GeneralSettings>;\n  /** Update the ReadingSettings setting. */\n  readingSettings?: Maybe<ReadingSettings>;\n  /** Update the WritingSettings setting. */\n  writingSettings?: Maybe<WritingSettings>;\n};\n\n/** Input for the updateTag mutation. */\nexport type UpdateTagInput = {\n  /** The slug that the post_tag will be an alias of */\n  aliasOf?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the post_tag object */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the tag object to update */\n  id: Scalars['ID']['input'];\n  /** The name of the post_tag object to mutate */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */\n  slug?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateTag mutation. */\nexport type UpdateTagPayload = {\n  __typename?: 'UpdateTagPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created post_tag */\n  tag?: Maybe<Tag>;\n};\n\n/** Input for the updateUser mutation. */\nexport type UpdateUserInput = {\n  /** User's AOL IM account. */\n  aim?: InputMaybe<Scalars['String']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing content about the user. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */\n  displayName?: InputMaybe<Scalars['String']['input']>;\n  /** A string containing the user's email address. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** \tThe user's first name. */\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user */\n  id: Scalars['ID']['input'];\n  /** User's Jabber account. */\n  jabber?: InputMaybe<Scalars['String']['input']>;\n  /** The user's last name. */\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  /** User's locale. */\n  locale?: InputMaybe<Scalars['String']['input']>;\n  ncmazBackgroundImgAlt?: InputMaybe<Scalars['String']['input']>;\n  ncmazBackgroundImgUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazBio?: InputMaybe<Scalars['String']['input']>;\n  ncmazBuymeacoffeUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazFacebookUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazFeaturedImgAlt?: InputMaybe<Scalars['String']['input']>;\n  ncmazFeaturedImgUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazGithubUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazInstagramUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazLinkedinUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazMediumUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazPinterestUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazTiktokUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazTwitchUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazTwitterUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazVimeoUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazWebsiteUrl?: InputMaybe<Scalars['String']['input']>;\n  ncmazYoutubeUrl?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains a URL-friendly name for the user. The default is the user's username. */\n  nicename?: InputMaybe<Scalars['String']['input']>;\n  /** The user's nickname, defaults to the user's username. */\n  nickname?: InputMaybe<Scalars['String']['input']>;\n  /** A string that contains the plain text password for the user. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The date the user registered. Format is Y-m-d H:i:s. */\n  registered?: InputMaybe<Scalars['String']['input']>;\n  /** A string for whether to enable the rich editor or not. False if not empty. */\n  richEditing?: InputMaybe<Scalars['String']['input']>;\n  /** An array of roles to be assigned to the user. */\n  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** A string containing the user's URL for the user's web site. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n  /** User's Yahoo IM account. */\n  yim?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateUser mutation. */\nexport type UpdateUserPayload = {\n  __typename?: 'UpdateUserPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The User object mutation type. */\n  user?: Maybe<User>;\n};\n\n/** Input for the updateUserReactionPost mutation. */\nexport type UpdateUserReactionPostInput = {\n  /** The userId to assign as the author of the object */\n  authorId?: InputMaybe<Scalars['ID']['input']>;\n  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17  */\n  date?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the userReactionPost object */\n  id: Scalars['ID']['input'];\n  /** Override the edit lock when another user is editing the post */\n  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */\n  menuOrder?: InputMaybe<Scalars['Int']['input']>;\n  /** The password used to protect the content of the object */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** The slug of the object */\n  slug?: InputMaybe<Scalars['String']['input']>;\n  /** The status of the object */\n  status?: InputMaybe<PostStatusEnum>;\n  /** The title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The payload for the updateUserReactionPost mutation. */\nexport type UpdateUserReactionPostPayload = {\n  __typename?: 'UpdateUserReactionPostPayload';\n  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Post object mutation type. */\n  userReactionPost?: Maybe<UserReactionPost>;\n};\n\n/** A User object */\nexport type User = Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable & WithAcfNcUserMeta & {\n  __typename?: 'User';\n  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */\n  avatar?: Maybe<Avatar>;\n  /** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */\n  capKey?: Maybe<Scalars['String']['output']>;\n  /** A list of capabilities (permissions) granted to the user */\n  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Connection between the User type and the Comment type */\n  comments?: Maybe<UserToCommentConnection>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Identifies the primary key from the database. */\n  databaseId: Scalars['Int']['output'];\n  /** Description of the user. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<UserToEnqueuedScriptConnection>;\n  /** Connection between the User type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<UserToEnqueuedStylesheetConnection>;\n  /** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */\n  extraCapabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */\n  firstName?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the user object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */\n  lastName?: Maybe<Scalars['String']['output']>;\n  /** The preferred language locale set for the user. Value derived from get_user_locale(). */\n  locale?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User type and the mediaItem type */\n  mediaItems?: Maybe<UserToMediaItemConnection>;\n  /** Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Fields of the NcUserMeta ACF Field Group */\n  ncUserMeta?: Maybe<NcUserMeta>;\n  /** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */\n  nicename?: Maybe<Scalars['String']['output']>;\n  /** Nickname of the user. */\n  nickname?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User type and the page type */\n  pages?: Maybe<UserToPageConnection>;\n  /** Connection between the User type and the post type */\n  posts?: Maybe<UserToPostConnection>;\n  /** The date the user registered or was created. The field follows a full ISO8601 date string format. */\n  registeredDate?: Maybe<Scalars['String']['output']>;\n  /** Connection between the User and Revisions authored by the user */\n  revisions?: Maybe<UserToRevisionsConnection>;\n  /** Connection between the User type and the UserRole type */\n  roles?: Maybe<UserToUserRoleConnection>;\n  /** Whether the Toolbar should be displayed when the user is viewing the site. */\n  shouldShowAdminToolbar?: Maybe<Scalars['Boolean']['output']>;\n  shouldShowFaustToolbar?: Maybe<Scalars['Boolean']['output']>;\n  /** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */\n  slug?: Maybe<Scalars['String']['output']>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n  /** A website url that is associated with the user. */\n  url?: Maybe<Scalars['String']['output']>;\n  /**\n   * The Id of the user. Equivalent to WP_User-&gt;ID\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  userId?: Maybe<Scalars['Int']['output']>;\n  /** Connection between the User type and the userReactionPost type */\n  userReactionPosts?: Maybe<UserToUserReactionPostConnection>;\n  /** Username for the user. This field is equivalent to WP_User-&gt;user_login. */\n  username?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A User object */\nexport type UserAvatarArgs = {\n  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;\n  rating?: InputMaybe<AvatarRatingEnum>;\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A User object */\nexport type UserCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToCommentConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A User object */\nexport type UserEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A User object */\nexport type UserMediaItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToMediaItemConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserPagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToPageConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToPostConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserRevisionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToRevisionsConnectionWhereArgs>;\n};\n\n\n/** A User object */\nexport type UserRolesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A User object */\nexport type UserUserReactionPostsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  where?: InputMaybe<UserToUserReactionPostConnectionWhereArgs>;\n};\n\n/** Connection to User Nodes */\nexport type UserConnection = {\n  /** A list of edges (relational context) between RootQuery and connected User Nodes */\n  edges: Array<UserConnectionEdge>;\n  /** A list of connected User Nodes */\n  nodes: Array<User>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected User */\nexport type UserConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected User Node */\n  node: User;\n};\n\n/** Page Info on the connected UserConnectionEdge */\nexport type UserConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\". */\nexport enum UserNodeIdTypeEnum {\n  /** The Database ID for the node */\n  DatabaseId = 'DATABASE_ID',\n  /** The Email of the User */\n  Email = 'EMAIL',\n  /** The hashed Global ID */\n  Id = 'ID',\n  /** The slug of the User */\n  Slug = 'SLUG',\n  /** The URI for the node */\n  Uri = 'URI',\n  /** The username the User uses to login with */\n  Username = 'USERNAME'\n}\n\n/** The userReactionPost type */\nexport type UserReactionPost = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {\n  __typename?: 'UserReactionPost';\n  /** Connection between the NodeWithAuthor type and the User type */\n  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;\n  /** The database identifier of the author of the node */\n  authorDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** The globally unique identifier of the author of the node */\n  authorId?: Maybe<Scalars['ID']['output']>;\n  /** @deprecated Deprecated in favor of using Next.js pages */\n  conditionalTags?: Maybe<ConditionalTags>;\n  /** Connection between the ContentNode type and the ContentType type */\n  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;\n  /** The name of the Content Type the node belongs to */\n  contentTypeName: Scalars['String']['output'];\n  /** The unique identifier stored in the database */\n  databaseId: Scalars['Int']['output'];\n  /** Post publishing date. */\n  date?: Maybe<Scalars['String']['output']>;\n  /** The publishing date set in GMT. */\n  dateGmt?: Maybe<Scalars['String']['output']>;\n  /** The desired slug of the post */\n  desiredSlug?: Maybe<Scalars['String']['output']>;\n  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */\n  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;\n  /** The RSS enclosure for the object */\n  enclosure?: Maybe<Scalars['String']['output']>;\n  /** Connection between the ContentNode type and the EnqueuedScript type */\n  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;\n  /** Connection between the ContentNode type and the EnqueuedStylesheet type */\n  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;\n  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */\n  guid?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier of the user-reaction-post object. */\n  id: Scalars['ID']['output'];\n  /** Whether the node is a Content Node */\n  isContentNode: Scalars['Boolean']['output'];\n  /** Whether the object is a node in the preview state */\n  isPreview?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** Whether the node is a Term */\n  isTermNode: Scalars['Boolean']['output'];\n  /** The user that most recently edited the node */\n  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;\n  /** The permalink of the post */\n  link?: Maybe<Scalars['String']['output']>;\n  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */\n  modified?: Maybe<Scalars['String']['output']>;\n  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */\n  modifiedGmt?: Maybe<Scalars['String']['output']>;\n  /** Connection between the UserReactionPost type and the userReactionPost type */\n  preview?: Maybe<UserReactionPostToPreviewConnectionEdge>;\n  /** The database id of the preview node */\n  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the object is a node in the preview state */\n  previewRevisionId?: Maybe<Scalars['ID']['output']>;\n  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */\n  slug?: Maybe<Scalars['String']['output']>;\n  /** The current status of the object */\n  status?: Maybe<Scalars['String']['output']>;\n  /** The template assigned to the node */\n  template?: Maybe<ContentTemplate>;\n  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The unique resource identifier path */\n  uri?: Maybe<Scalars['String']['output']>;\n  /**\n   * The id field matches the WP_Post-&gt;ID field.\n   * @deprecated Deprecated in favor of the databaseId field\n   */\n  userReactionPostId: Scalars['Int']['output'];\n};\n\n\n/** The userReactionPost type */\nexport type UserReactionPostEnqueuedScriptsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The userReactionPost type */\nexport type UserReactionPostEnqueuedStylesheetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** The userReactionPost type */\nexport type UserReactionPostTitleArgs = {\n  format?: InputMaybe<PostObjectFieldFormatEnum>;\n};\n\n/** Connection to userReactionPost Nodes */\nexport type UserReactionPostConnection = {\n  /** A list of edges (relational context) between RootQuery and connected userReactionPost Nodes */\n  edges: Array<UserReactionPostConnectionEdge>;\n  /** A list of connected userReactionPost Nodes */\n  nodes: Array<UserReactionPost>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserReactionPostConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected userReactionPost */\nexport type UserReactionPostConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected userReactionPost Node */\n  node: UserReactionPost;\n};\n\n/** Page Info on the connected UserReactionPostConnectionEdge */\nexport type UserReactionPostConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The Type of Identifier used to fetch a single resource. Default is ID. */\nexport enum UserReactionPostIdType {\n  /** Identify a resource by the Database ID. */\n  DatabaseId = 'DATABASE_ID',\n  /** Identify a resource by the (hashed) Global ID. */\n  Id = 'ID',\n  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */\n  Slug = 'SLUG',\n  /** Identify a resource by the URI. */\n  Uri = 'URI'\n}\n\n/** Connection between the UserReactionPost type and the userReactionPost type */\nexport type UserReactionPostToPreviewConnectionEdge = Edge & OneToOneConnection & UserReactionPostConnectionEdge & {\n  __typename?: 'UserReactionPostToPreviewConnectionEdge';\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The node of the connection, without the edges */\n  node: UserReactionPost;\n};\n\n/** A user role object */\nexport type UserRole = Node & {\n  __typename?: 'UserRole';\n  /** The capabilities that belong to this role */\n  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** The display name of the role */\n  displayName?: Maybe<Scalars['String']['output']>;\n  /** The globally unique identifier for the user role object. */\n  id: Scalars['ID']['output'];\n  /** Whether the object is restricted from the current viewer */\n  isRestricted?: Maybe<Scalars['Boolean']['output']>;\n  /** The registered name of the role */\n  name?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection to UserRole Nodes */\nexport type UserRoleConnection = {\n  /** A list of edges (relational context) between RootQuery and connected UserRole Nodes */\n  edges: Array<UserRoleConnectionEdge>;\n  /** A list of connected UserRole Nodes */\n  nodes: Array<UserRole>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserRoleConnectionPageInfo;\n};\n\n/** Edge between a Node and a connected UserRole */\nexport type UserRoleConnectionEdge = {\n  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The connected UserRole Node */\n  node: UserRole;\n};\n\n/** Page Info on the connected UserRoleConnectionEdge */\nexport type UserRoleConnectionPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Names of available user roles */\nexport enum UserRoleEnum {\n  /** User role with specific capabilities */\n  Administrator = 'ADMINISTRATOR',\n  /** User role with specific capabilities */\n  Author = 'AUTHOR',\n  /** User role with specific capabilities */\n  Contributor = 'CONTRIBUTOR',\n  /** User role with specific capabilities */\n  Editor = 'EDITOR',\n  /** User role with specific capabilities */\n  Subscriber = 'SUBSCRIBER'\n}\n\n/** Connection between the User type and the Comment type */\nexport type UserToCommentConnection = CommentConnection & Connection & {\n  __typename?: 'UserToCommentConnection';\n  /** Edges for the UserToCommentConnection connection */\n  edges: Array<UserToCommentConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Comment>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToCommentConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToCommentConnectionEdge = CommentConnectionEdge & Edge & {\n  __typename?: 'UserToCommentConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Comment;\n};\n\n/** Page Info on the &quot;UserToCommentConnection&quot; */\nexport type UserToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToCommentConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToCommentConnection connection */\nexport type UserToCommentConnectionWhereArgs = {\n  /** Comment author email address. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** Array of author IDs to include comments for. */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to exclude comments for. */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Comment author URL. */\n  authorUrl?: InputMaybe<Scalars['String']['input']>;\n  /** Array of comment IDs to include. */\n  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */\n  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Include comments of a given type. */\n  commentType?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments from a given array of comment types. */\n  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Exclude comments from a given array of comment types. */\n  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;\n  /** Content object author ID to limit results by. */\n  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs to retrieve comments for. */\n  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of author IDs *not* to retrieve comments for. */\n  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Limit results to those affiliated with a given content object ID. */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** Array of content object IDs to include affiliated comments for. */\n  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of content object IDs to exclude affiliated comments for. */\n  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */\n  contentName?: InputMaybe<Scalars['String']['input']>;\n  /** Content Object parent ID to retrieve affiliated comments for. */\n  contentParent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */\n  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */\n  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Karma score to retrieve matching comments for. */\n  karma?: InputMaybe<Scalars['Int']['input']>;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n  /** Field to order the comments by. */\n  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;\n  /** Parent ID of comment to retrieve children of. */\n  parent?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of parent IDs of comments to retrieve children for. */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of parent IDs of comments *not* to retrieve children for. */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Search term(s) to retrieve matching comments for. */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Comment status to limit results by. */\n  status?: InputMaybe<Scalars['String']['input']>;\n  /** Include comments for a specific user ID. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Connection between the User type and the EnqueuedScript type */\nexport type UserToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {\n  __typename?: 'UserToEnqueuedScriptConnection';\n  /** Edges for the UserToEnqueuedScriptConnection connection */\n  edges: Array<UserToEnqueuedScriptConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedScript>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToEnqueuedScriptConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {\n  __typename?: 'UserToEnqueuedScriptConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedScript;\n};\n\n/** Page Info on the &quot;UserToEnqueuedScriptConnection&quot; */\nexport type UserToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToEnqueuedScriptConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the User type and the EnqueuedStylesheet type */\nexport type UserToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {\n  __typename?: 'UserToEnqueuedStylesheetConnection';\n  /** Edges for the UserToEnqueuedStylesheetConnection connection */\n  edges: Array<UserToEnqueuedStylesheetConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<EnqueuedStylesheet>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToEnqueuedStylesheetConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {\n  __typename?: 'UserToEnqueuedStylesheetConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: EnqueuedStylesheet;\n};\n\n/** Page Info on the &quot;UserToEnqueuedStylesheetConnection&quot; */\nexport type UserToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToEnqueuedStylesheetConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Connection between the User type and the mediaItem type */\nexport type UserToMediaItemConnection = Connection & MediaItemConnection & {\n  __typename?: 'UserToMediaItemConnection';\n  /** Edges for the UserToMediaItemConnection connection */\n  edges: Array<UserToMediaItemConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<MediaItem>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToMediaItemConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {\n  __typename?: 'UserToMediaItemConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: MediaItem;\n};\n\n/** Page Info on the &quot;UserToMediaItemConnection&quot; */\nexport type UserToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToMediaItemConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToMediaItemConnection connection */\nexport type UserToMediaItemConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the page type */\nexport type UserToPageConnection = Connection & PageConnection & {\n  __typename?: 'UserToPageConnection';\n  /** Edges for the UserToPageConnection connection */\n  edges: Array<UserToPageConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Page>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToPageConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToPageConnectionEdge = Edge & PageConnectionEdge & {\n  __typename?: 'UserToPageConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Page;\n};\n\n/** Page Info on the &quot;UserToPageConnection&quot; */\nexport type UserToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToPageConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToPageConnection connection */\nexport type UserToPageConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the post type */\nexport type UserToPostConnection = Connection & PostConnection & {\n  __typename?: 'UserToPostConnection';\n  /** Edges for the UserToPostConnection connection */\n  edges: Array<UserToPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<Post>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToPostConnectionEdge = Edge & PostConnectionEdge & {\n  __typename?: 'UserToPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: Post;\n};\n\n/** Page Info on the &quot;UserToPostConnection&quot; */\nexport type UserToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'UserToPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToPostConnection connection */\nexport type UserToPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Category ID */\n  categoryId?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Use Category Slug */\n  categoryName?: InputMaybe<Scalars['String']['input']>;\n  /** Array of category IDs, used to display objects from one category OR another */\n  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Tag Slug */\n  tag?: InputMaybe<Scalars['String']['input']>;\n  /** Use Tag ID */\n  tagId?: InputMaybe<Scalars['String']['input']>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag IDs, used to display objects from one tag OR another */\n  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Array of tag slugs, used to display objects from one tag AND another */\n  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Array of tag slugs, used to include objects in ANY specified tags */\n  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the ContentNode type */\nexport type UserToRevisionsConnection = Connection & ContentNodeConnection & {\n  __typename?: 'UserToRevisionsConnection';\n  /** Edges for the UserToRevisionsConnection connection */\n  edges: Array<UserToRevisionsConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<ContentNode>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToRevisionsConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {\n  __typename?: 'UserToRevisionsConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: ContentNode;\n};\n\n/** Page Info on the &quot;UserToRevisionsConnection&quot; */\nexport type UserToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {\n  __typename?: 'UserToRevisionsConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToRevisionsConnection connection */\nexport type UserToRevisionsConnectionWhereArgs = {\n  /** The Types of content to filter */\n  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the userReactionPost type */\nexport type UserToUserReactionPostConnection = Connection & UserReactionPostConnection & {\n  __typename?: 'UserToUserReactionPostConnection';\n  /** Edges for the UserToUserReactionPostConnection connection */\n  edges: Array<UserToUserReactionPostConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<UserReactionPost>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToUserReactionPostConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToUserReactionPostConnectionEdge = Edge & UserReactionPostConnectionEdge & {\n  __typename?: 'UserToUserReactionPostConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: UserReactionPost;\n};\n\n/** Page Info on the &quot;UserToUserReactionPostConnection&quot; */\nexport type UserToUserReactionPostConnectionPageInfo = PageInfo & UserReactionPostConnectionPageInfo & WpPageInfo & {\n  __typename?: 'UserToUserReactionPostConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Arguments for filtering the UserToUserReactionPostConnection connection */\nexport type UserToUserReactionPostConnectionWhereArgs = {\n  /** The user that's connected as the author of the object. Use the userId for the author object. */\n  author?: InputMaybe<Scalars['Int']['input']>;\n  /** Find objects connected to author(s) in the array of author's userIds */\n  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Find objects connected to the author by the author's nicename */\n  authorName?: InputMaybe<Scalars['String']['input']>;\n  /** Find objects NOT connected to author(s) in the array of author's userIds */\n  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Filter the connection based on dates */\n  dateQuery?: InputMaybe<DateQueryInput>;\n  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */\n  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Specific database ID of the object */\n  id?: InputMaybe<Scalars['Int']['input']>;\n  /** Array of IDs for the objects to retrieve */\n  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Get objects with a specific mimeType property */\n  mimeType?: InputMaybe<MimeTypeEnum>;\n  /** Slug / post_name of the object */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Specify objects to retrieve. Use slugs */\n  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  /** Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored */\n  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** What paramater to use to order the objects by. */\n  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;\n  /** Use ID to return only children. Use 0 to return only top-level items */\n  parent?: InputMaybe<Scalars['ID']['input']>;\n  /** Specify objects whose parent is in an array */\n  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Specify posts whose parent is not in an array */\n  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;\n  /** Show posts with a specific password. */\n  password?: InputMaybe<Scalars['String']['input']>;\n  /** Show Posts based on a keyword search */\n  search?: InputMaybe<Scalars['String']['input']>;\n  /** Retrieve posts where post status is in an array. */\n  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;\n  /** Show posts with a specific status. */\n  status?: InputMaybe<PostStatusEnum>;\n  /** Title of the object */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Connection between the User type and the UserRole type */\nexport type UserToUserRoleConnection = Connection & UserRoleConnection & {\n  __typename?: 'UserToUserRoleConnection';\n  /** Edges for the UserToUserRoleConnection connection */\n  edges: Array<UserToUserRoleConnectionEdge>;\n  /** The nodes of the connection, without the edges */\n  nodes: Array<UserRole>;\n  /** Information about pagination in a connection. */\n  pageInfo: UserToUserRoleConnectionPageInfo;\n};\n\n/** An edge in a connection */\nexport type UserToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {\n  __typename?: 'UserToUserRoleConnectionEdge';\n  /** A cursor for use in pagination */\n  cursor?: Maybe<Scalars['String']['output']>;\n  /** The item at the end of the edge */\n  node: UserRole;\n};\n\n/** Page Info on the &quot;UserToUserRoleConnection&quot; */\nexport type UserToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {\n  __typename?: 'UserToUserRoleConnectionPageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Field to order the connection by */\nexport enum UsersConnectionOrderbyEnum {\n  /** Order by display name */\n  DisplayName = 'DISPLAY_NAME',\n  /** Order by email address */\n  Email = 'EMAIL',\n  /** Order by login */\n  Login = 'LOGIN',\n  /** Preserve the login order given in the LOGIN_IN array */\n  LoginIn = 'LOGIN_IN',\n  /** Order by nice name */\n  NiceName = 'NICE_NAME',\n  /** Preserve the nice name order given in the NICE_NAME_IN array */\n  NiceNameIn = 'NICE_NAME_IN',\n  /** Order by registration date */\n  Registered = 'REGISTERED',\n  /** Order by URL */\n  Url = 'URL'\n}\n\n/** Options for ordering the connection */\nexport type UsersConnectionOrderbyInput = {\n  /** The field name used to sort the results. */\n  field: UsersConnectionOrderbyEnum;\n  /** The cardinality of the order of the connection */\n  order?: InputMaybe<OrderEnum>;\n};\n\n/** Column used for searching for users. */\nexport enum UsersConnectionSearchColumnEnum {\n  /** The user's email address. */\n  Email = 'EMAIL',\n  /** The globally unique ID. */\n  Id = 'ID',\n  /** The username the User uses to login with. */\n  Login = 'LOGIN',\n  /** A URL-friendly name for the user. The default is the user's username. */\n  Nicename = 'NICENAME',\n  /** The URL of the user's website. */\n  Url = 'URL'\n}\n\n/** Information about pagination in a connection. */\nexport type WpPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** Provides access to fields of the &quot;NcPostMetaData&quot; ACF Field Group via the &quot;ncPostMetaData&quot; field */\nexport type WithAcfNcPostMetaData = {\n  /** Fields of the NcPostMetaData ACF Field Group */\n  ncPostMetaData?: Maybe<NcPostMetaData>;\n};\n\n/** Provides access to fields of the &quot;NcTaxonomyMeta&quot; ACF Field Group via the &quot;ncTaxonomyMeta&quot; field */\nexport type WithAcfNcTaxonomyMeta = {\n  /** Fields of the NcTaxonomyMeta ACF Field Group */\n  ncTaxonomyMeta?: Maybe<NcTaxonomyMeta>;\n};\n\n/** Provides access to fields of the &quot;NcUserMeta&quot; ACF Field Group via the &quot;ncUserMeta&quot; field */\nexport type WithAcfNcUserMeta = {\n  /** Fields of the NcUserMeta ACF Field Group */\n  ncUserMeta?: Maybe<NcUserMeta>;\n};\n\n/** Provides access to fields of the &quot;NcmazAudioUrl&quot; ACF Field Group via the &quot;ncmazAudioUrl&quot; field */\nexport type WithAcfNcmazAudioUrl = {\n  /** Fields of the NcmazAudioUrl ACF Field Group */\n  ncmazAudioUrl?: Maybe<NcmazAudioUrl>;\n};\n\n/** Provides access to fields of the &quot;NcmazGalleryImgs&quot; ACF Field Group via the &quot;ncmazGalleryImgs&quot; field */\nexport type WithAcfNcmazGalleryImgs = {\n  /** Fields of the NcmazGalleryImgs ACF Field Group */\n  ncmazGalleryImgs?: Maybe<NcmazGalleryImgs>;\n};\n\n/** Provides access to fields of the &quot;NcmazVideoUrl&quot; ACF Field Group via the &quot;ncmazVideoUrl&quot; field */\nexport type WithAcfNcmazVideoUrl = {\n  /** Fields of the NcmazVideoUrl ACF Field Group */\n  ncmazVideoUrl?: Maybe<NcmazVideoUrl>;\n};\n\n/** Provides access to fields of the &quot;NcmazfaustMenu&quot; ACF Field Group via the &quot;ncmazfaustMenu&quot; field */\nexport type WithAcfNcmazfaustMenu = {\n  /** Fields of the NcmazfaustMenu ACF Field Group */\n  ncmazfaustMenu?: Maybe<NcmazfaustMenu>;\n};\n\n/** The writing setting type */\nexport type WritingSettings = {\n  __typename?: 'WritingSettings';\n  /** Default post category. */\n  defaultCategory?: Maybe<Scalars['Int']['output']>;\n  /** Default post format. */\n  defaultPostFormat?: Maybe<Scalars['String']['output']>;\n  /** Convert emoticons like :-) and :-P to graphics on display. */\n  useSmilies?: Maybe<Scalars['Boolean']['output']>;\n};\n\nexport type NcmazFcTagShortFieldsFragmentFragment = { __typename: 'Tag', name?: string | null, uri?: string | null, databaseId: number, count?: number | null } & { ' $fragmentName'?: 'NcmazFcTagShortFieldsFragmentFragment' };\n\nexport type NcmazFcTagFullFieldsFragmentFragment = (\n  { __typename?: 'Tag', description?: string | null, count?: number | null }\n  & { ' $fragmentRefs'?: { 'NcmazFcTagShortFieldsFragmentFragment': NcmazFcTagShortFieldsFragmentFragment } }\n) & { ' $fragmentName'?: 'NcmazFcTagFullFieldsFragmentFragment' };\n\nexport type NcmazFcCategoryFullFieldsFragmentFragment = { __typename: 'Category', databaseId: number, description?: string | null, name?: string | null, uri?: string | null, count?: number | null, ncTaxonomyMeta?: { __typename?: 'NcTaxonomyMeta', color?: Array<string | null> | null, featuredImage?: { __typename?: 'NcTaxonomyMetaFeaturedImageToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null } | null } & { ' $fragmentName'?: 'NcmazFcCategoryFullFieldsFragmentFragment' };\n\nexport type NcmazFcCategoryCardFieldsNotImageFragment = { __typename: 'Category', name?: string | null, uri?: string | null, count?: number | null, databaseId: number, ncTaxonomyMeta?: { __typename?: 'NcTaxonomyMeta', color?: Array<string | null> | null } | null } & { ' $fragmentName'?: 'NcmazFcCategoryCardFieldsNotImageFragment' };\n\nexport type NcmazFcPostsEdegsFieldsFragment = { __typename?: 'RootQueryToPostConnection', nodes: Array<(\n    { __typename?: 'Post' }\n    & { ' $fragmentRefs'?: { 'NcmazFcPostCardFieldsFragment': NcmazFcPostCardFieldsFragment } }\n  )> } & { ' $fragmentName'?: 'NcmazFcPostsEdegsFieldsFragment' };\n\nexport type NcmazFcPostFullFieldsFragment = { __typename: 'Post', uri?: string | null, modified?: string | null, date?: string | null, commentStatus?: string | null, status?: string | null, commentCount?: number | null, excerpt?: string | null, databaseId: number, title?: string | null, content?: string | null, author?: { __typename?: 'NodeWithAuthorToUserConnectionEdge', node: (\n      { __typename?: 'User', description?: string | null }\n      & { ' $fragmentRefs'?: { 'NcmazFcUserShortForPostCardFragmentFragment': NcmazFcUserShortForPostCardFragmentFragment } }\n    ) } | null, categories?: { __typename?: 'PostToCategoryConnection', nodes: Array<(\n      { __typename?: 'Category' }\n      & { ' $fragmentRefs'?: { 'NcmazFcCategoryCardFieldsNotImageFragment': NcmazFcCategoryCardFieldsNotImageFragment } }\n    )> } | null, tags?: { __typename?: 'PostToTagConnection', nodes: Array<(\n      { __typename?: 'Tag' }\n      & { ' $fragmentRefs'?: { 'NcmazFcTagShortFieldsFragmentFragment': NcmazFcTagShortFieldsFragmentFragment } }\n    )> } | null, featuredImage?: { __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge', node: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n    ) } | null, postFormats?: { __typename?: 'PostToPostFormatConnection', nodes: Array<{ __typename?: 'PostFormat', id: string, name?: string | null, slug?: string | null }> } | null, ncmazVideoUrl?: { __typename?: 'NcmazVideoUrl', videoUrl?: string | null } | null, ncmazAudioUrl?: { __typename?: 'NcmazAudioUrl', audioUrl?: string | null } | null, ncPostMetaData?: (\n    { __typename?: 'NcPostMetaData' }\n    & { ' $fragmentRefs'?: { 'NcmazFcPostMetaFullFieldsFragment': NcmazFcPostMetaFullFieldsFragment } }\n  ) | null, ncmazGalleryImgs?: { __typename?: 'NcmazGalleryImgs', image1?: { __typename?: 'NcmazGalleryImgsImage1ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null, image2?: { __typename?: 'NcmazGalleryImgsImage2ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null, image3?: { __typename?: 'NcmazGalleryImgsImage3ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null, image4?: { __typename?: 'NcmazGalleryImgsImage4ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null, image5?: { __typename?: 'NcmazGalleryImgsImage5ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null, image6?: { __typename?: 'NcmazGalleryImgsImage6ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null, image7?: { __typename?: 'NcmazGalleryImgsImage7ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null, image8?: { __typename?: 'NcmazGalleryImgsImage8ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageHasDetailFieldsFragment': NcmazFcImageHasDetailFieldsFragment } }\n      ) } | null } | null } & { ' $fragmentName'?: 'NcmazFcPostFullFieldsFragment' };\n\nexport type NcmazFcPostCardFieldsFragment = (\n  { __typename?: 'Post', ncmazGalleryImgs?: { __typename?: 'NcmazGalleryImgs', image1?: { __typename?: 'NcmazGalleryImgsImage1ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, image2?: { __typename?: 'NcmazGalleryImgsImage2ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, image3?: { __typename?: 'NcmazGalleryImgsImage3ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, image4?: { __typename?: 'NcmazGalleryImgsImage4ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, image5?: { __typename?: 'NcmazGalleryImgsImage5ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, image6?: { __typename?: 'NcmazGalleryImgsImage6ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, image7?: { __typename?: 'NcmazGalleryImgsImage7ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, image8?: { __typename?: 'NcmazGalleryImgsImage8ToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null } | null }\n  & { ' $fragmentRefs'?: { 'NcmazFcPostCardFieldsNotNcmazGalleryImgsFragment': NcmazFcPostCardFieldsNotNcmazGalleryImgsFragment } }\n) & { ' $fragmentName'?: 'NcmazFcPostCardFieldsFragment' };\n\nexport type NcmazFcPostCardFieldsNotNcmazGalleryImgsFragment = { __typename: 'Post', databaseId: number, title?: string | null, uri?: string | null, status?: string | null, modified?: string | null, date?: string | null, commentStatus?: string | null, commentCount?: number | null, excerpt?: string | null, author?: { __typename?: 'NodeWithAuthorToUserConnectionEdge', node: (\n      { __typename?: 'User' }\n      & { ' $fragmentRefs'?: { 'NcmazFcUserShortForPostCardFragmentFragment': NcmazFcUserShortForPostCardFragmentFragment } }\n    ) } | null, categories?: { __typename?: 'PostToCategoryConnection', nodes: Array<(\n      { __typename?: 'Category' }\n      & { ' $fragmentRefs'?: { 'NcmazFcCategoryCardFieldsNotImageFragment': NcmazFcCategoryCardFieldsNotImageFragment } }\n    )> } | null, featuredImage?: { __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge', node: (\n      { __typename?: 'MediaItem' }\n      & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n    ) } | null, postFormats?: { __typename?: 'PostToPostFormatConnection', nodes: Array<{ __typename?: 'PostFormat', name?: string | null, slug?: string | null }> } | null, ncmazVideoUrl?: { __typename?: 'NcmazVideoUrl', videoUrl?: string | null } | null, ncmazAudioUrl?: { __typename?: 'NcmazAudioUrl', audioUrl?: string | null } | null, ncPostMetaData?: (\n    { __typename?: 'NcPostMetaData' }\n    & { ' $fragmentRefs'?: { 'NcmazFcPostMetaFieldsFragment': NcmazFcPostMetaFieldsFragment } }\n  ) | null } & { ' $fragmentName'?: 'NcmazFcPostCardFieldsNotNcmazGalleryImgsFragment' };\n\nexport type NcmazFcImageFieldsFragment = { __typename: 'MediaItem', altText?: string | null, databaseId: number, sourceUrl?: string | null } & { ' $fragmentName'?: 'NcmazFcImageFieldsFragment' };\n\nexport type NcmazFcImageHasDetailFieldsFragment = { __typename: 'MediaItem', altText?: string | null, databaseId: number, sourceUrl?: string | null, caption?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } & { ' $fragmentName'?: 'NcmazFcImageHasDetailFieldsFragment' };\n\nexport type NcmazFcPostMetaFieldsFragment = { __typename: 'NcPostMetaData', viewsCount?: number | null, readingTime?: number | null, likesCount?: number | null } & { ' $fragmentName'?: 'NcmazFcPostMetaFieldsFragment' };\n\nexport type NcmazFcPostMetaFullFieldsFragment = { __typename: 'NcPostMetaData', viewsCount?: number | null, readingTime?: number | null, likesCount?: number | null, savedsCount?: number | null, showRightSidebar?: boolean | null, template?: Array<string | null> | null } & { ' $fragmentName'?: 'NcmazFcPostMetaFullFieldsFragment' };\n\nexport type NcmazFcUserShortForPostCardFragmentFragment = { __typename?: 'User', databaseId: number, uri?: string | null, username?: string | null, name?: string | null, ncUserMeta?: { __typename?: 'NcUserMeta', featuredImage?: { __typename?: 'NcUserMetaFeaturedImageToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null } | null } & { ' $fragmentName'?: 'NcmazFcUserShortForPostCardFragmentFragment' };\n\nexport type NcmazFcUserFullFieldsFragment = { __typename?: 'User', id: string, databaseId: number, uri?: string | null, username?: string | null, name?: string | null, description?: string | null, ncUserMeta?: { __typename?: 'NcUserMeta', buymeacoffeUrl?: string | null, color?: string | null, facebookUrl?: string | null, githubUrl?: string | null, instagramUrl?: string | null, linkedinUrl?: string | null, mediumUrl?: string | null, ncBio?: string | null, pinterestUrl?: string | null, twitchUrl?: string | null, twitterUrl?: string | null, vimeoUrl?: string | null, websiteUrl?: string | null, youtubeUrl?: string | null, tiktokUrl?: string | null, featuredImage?: { __typename?: 'NcUserMetaFeaturedImageToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null, backgroundImage?: { __typename?: 'NcUserMetaBackgroundImageToMediaItemConnectionEdge', node: (\n        { __typename?: 'MediaItem' }\n        & { ' $fragmentRefs'?: { 'NcmazFcImageFieldsFragment': NcmazFcImageFieldsFragment } }\n      ) } | null } | null } & { ' $fragmentName'?: 'NcmazFcUserFullFieldsFragment' };\n\nexport const NcmazFcTagShortFieldsFragmentFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTagShortFieldsFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Tag\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}}]}}]} as unknown as DocumentNode<NcmazFcTagShortFieldsFragmentFragment, unknown>;\nexport const NcmazFcTagFullFieldsFragmentFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTagFullFieldsFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Tag\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTagShortFieldsFragment\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTagShortFieldsFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Tag\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}}]}}]} as unknown as DocumentNode<NcmazFcTagFullFieldsFragmentFragment, unknown>;\nexport const NcmazFcImageFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}}]} as unknown as DocumentNode<NcmazFcImageFieldsFragment, unknown>;\nexport const NcmazFcCategoryFullFieldsFragmentFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryFullFieldsFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}}]} as unknown as DocumentNode<NcmazFcCategoryFullFieldsFragmentFragment, unknown>;\nexport const NcmazFcUserShortForPostCardFragmentFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}}]} as unknown as DocumentNode<NcmazFcUserShortForPostCardFragmentFragment, unknown>;\nexport const NcmazFcCategoryCardFieldsNotImageFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}}]} as unknown as DocumentNode<NcmazFcCategoryCardFieldsNotImageFragment, unknown>;\nexport const NcmazFcPostMetaFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NcPostMetaData\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"likesCount\"}}]}}]} as unknown as DocumentNode<NcmazFcPostMetaFieldsFragment, unknown>;\nexport const NcmazFcPostCardFieldsNotNcmazGalleryImgsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFieldsNOTNcmazGalleryImgs\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modified\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentStatus\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"excerpt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"author\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"postFormats\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazVideoUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"videoUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazAudioUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"audioUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncPostMetaData\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NcPostMetaData\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"likesCount\"}}]}}]} as unknown as DocumentNode<NcmazFcPostCardFieldsNotNcmazGalleryImgsFragment, unknown>;\nexport const NcmazFcPostCardFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFieldsNOTNcmazGalleryImgs\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazGalleryImgs\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image1\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image2\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image3\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image4\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image5\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image6\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image7\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image8\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NcPostMetaData\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"likesCount\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFieldsNOTNcmazGalleryImgs\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modified\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentStatus\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"excerpt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"author\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"postFormats\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazVideoUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"videoUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazAudioUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"audioUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncPostMetaData\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"}}]}}]}}]} as unknown as DocumentNode<NcmazFcPostCardFieldsFragment, unknown>;\nexport const NcmazFcPostsEdegsFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostsEdegsFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"RootQueryToPostConnection\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NcPostMetaData\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"likesCount\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFieldsNOTNcmazGalleryImgs\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modified\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentStatus\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"excerpt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"author\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"postFormats\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazVideoUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"videoUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazAudioUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"audioUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncPostMetaData\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFields\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostCardFieldsNOTNcmazGalleryImgs\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazGalleryImgs\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image1\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image2\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image3\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image4\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image5\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image6\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image7\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image8\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}}]} as unknown as DocumentNode<NcmazFcPostsEdegsFieldsFragment, unknown>;\nexport const NcmazFcImageHasDetailFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"mediaDetails\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"height\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"width\"}}]}}]}}]} as unknown as DocumentNode<NcmazFcImageHasDetailFieldsFragment, unknown>;\nexport const NcmazFcPostMetaFullFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFullFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NcPostMetaData\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"likesCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"savedsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"showRightSidebar\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"template\"}}]}}]} as unknown as DocumentNode<NcmazFcPostMetaFullFieldsFragment, unknown>;\nexport const NcmazFcPostFullFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostFullFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Post\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modified\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentStatus\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"commentCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"excerpt\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"content\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"author\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}},{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"tags\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"IntValue\",\"value\":\"20\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTagShortFieldsFragment\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"postFormats\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"slug\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazVideoUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"videoUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazAudioUrl\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"audioUrl\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncPostMetaData\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFullFields\"}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncmazGalleryImgs\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image1\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image2\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image3\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image4\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image5\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image6\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image7\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"image8\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserShortForPostCardFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcCategoryCardFieldsNotImage\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Category\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncTaxonomyMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcTagShortFieldsFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Tag\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"count\"}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageHasDetailFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"caption\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"mediaDetails\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"height\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"width\"}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcPostMetaFullFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NcPostMetaData\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"viewsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"readingTime\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"likesCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"savedsCount\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"showRightSidebar\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"template\"}}]}}]} as unknown as DocumentNode<NcmazFcPostFullFieldsFragment, unknown>;\nexport const NcmazFcUserFullFieldsFragmentDoc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcUserFullFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"uri\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncUserMeta\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"buymeacoffeUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"color\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"facebookUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"githubUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"instagramUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"linkedinUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"mediumUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"ncBio\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"pinterestUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"twitchUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"twitterUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"vimeoUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"websiteUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"youtubeUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"tiktokUrl\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"featuredImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"backgroundImage\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"node\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"}}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NcmazFcImageFields\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MediaItem\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"altText\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"databaseId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sourceUrl\"}}]}}]} as unknown as DocumentNode<NcmazFcUserFullFieldsFragment, unknown>;","export * from \"./fragment-masking\";\nexport * from \"./gql\";","import React, { FC } from \"react\";\nimport { useFragment } from \"../__generated__\";\nimport { Notice } from \"@wordpress/components\";\nimport { NC_CATEGORY_FULL_FIELDS_FRAGMENT } from \"../fragments\";\n\ninterface Props {\n\tterms: any[];\n}\n\nconst DemoTermsList: FC<Props> = ({ terms }) => {\n\treturn (\n\t\t<div>\n\t\t\t<div className={`flex flex-wrap gap-3 mt-3`}>\n\t\t\t\t{terms.map((term) => {\n\t\t\t\t\tconst node = useFragment(NC_CATEGORY_FULL_FIELDS_FRAGMENT, term);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={node.databaseId}\n\t\t\t\t\t\t\tclassName=\"relative inline-flex items-center justify-between p-2 pr-5 space-x-5 rounded-3xl bg-neutral-100 dark:bg-neutral-800 dark:bg-opacity-30 hover:shadow-xl transition-shadow \"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t\t\t\t<div className=\"block flex-shrink-0 w-11 h-11 sm:w-16 sm:h-16 relative rounded-full overflow-hidden shadow-lg\">\n\t\t\t\t\t\t\t\t\t<div className=\"nc-NcImage absolute inset-0\">\n\t\t\t\t\t\t\t\t\t\t{/* @ts-ignore */}\n\t\t\t\t\t\t\t\t\t\t{node.ncTaxonomyMeta?.featuredImage?.node?.sourceUrl ? (\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\t\t\t\t// {/* @ts-ignore */}\n\t\t\t\t\t\t\t\t\t\t\t\t\tnode.ncTaxonomyMeta?.featuredImage?.node?.sourceUrl\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"object-cover w-full h-full \"\n\t\t\t\t\t\t\t\t\t\t\t\talt=\"DIYer and TV \"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"absolute inset-0 h-full w-full rounded-2xl bg-gray-50 object-cover\"></div>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col flex-grow\">\n\t\t\t\t\t\t\t\t\t<h2 className=\"block font-semibold text-lg\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"line-clamp-1\">{node.name}</span>\n\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t<span className=\"text-xs text-neutral-500 dark:text-neutral-400 mt-1\">\n\t\t\t\t\t\t\t\t\t\t{node.count} articles\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default DemoTermsList;\n","import { AttrsGenericType } from \"../types\";\n\nexport interface BlockTerms_Attrs {\n\tuniqueId: string;\n\tnumberOfTags: number;\n\torder: \"DESC\" | \"ASC\";\n\torderBy: \"NAME\" | \"COUNT\" | \"TERM_GROUP\" | \"TERM_ORDER\";\n\ttaxonomy: \"CATEGORY\" | \"POSTFORMAT\" | \"TAG\";\n\tshowTagCounts: boolean;\n\tblockVariation: string;\n\thasBackground: boolean;\n}\n\nconst blokcAttrs: AttrsGenericType<BlockTerms_Attrs> = {\n\tuniqueId: {\n\t\ttype: \"string\",\n\t\t// default: \"\",\n\t},\n\torder: {\n\t\ttype: \"string\",\n\t\t// default: \"DESC\",\n\t},\n\torderBy: {\n\t\ttype: \"string\",\n\t\t// default: \"NAME\",\n\t},\n\tblockVariation: {\n\t\ttype: \"string\",\n\t\t// default: \"grid-1\",\n\t},\n\tnumberOfTags: {\n\t\ttype: \"number\",\n\t\t// default: 30,\n\t},\n\tshowTagCounts: {\n\t\ttype: \"boolean\",\n\t\t// default: true,\n\t},\n\ttaxonomy: {\n\t\ttype: \"string\",\n\t\t// default: \"TAG\",\n\t},\n\thasBackground: {\n\t\ttype: \"boolean\",\n\t\t// default: \"TAG\",\n\t},\n};\n\nexport default blokcAttrs;\n","const v1 = {};\nconst v2 = {};\n\nconst deprecated = [v2, v1];\n\nexport default deprecated;\n","/**\n * WordPress dependencies\n */\nimport React, { FC, useEffect, useState, useRef } from \"react\";\nimport {\n\tPanelBody,\n\tToggleControl,\n\tSelectControl,\n\tRangeControl,\n\tFormToggle,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport { InspectorControls, useBlockProps } from \"@wordpress/block-editor\";\nimport { ContainerEditProps } from \"../types\";\nimport { BlockTerms_Attrs } from \"./attributes\";\nimport TermOrderControl from \"./order-control\";\nimport ServerSideRender from \"@wordpress/server-side-render\";\nimport BlockLoadingPlaceholder from \"../components/BlockLoadingPlaceholder\";\nimport DemoTermsList from \"./DemoTermsList\";\nimport BlockEmptyPlaceholder from \"../components/BlockEmptyPlaceholder\";\nimport BackgroundSection from \"../frontend-components/BackgroundSection/BackgroundSection\";\nimport classNames from \"../utils/className\";\n\nconst MIN_TAGS = 1;\nconst MAX_TAGS = 80;\n\nconst Edit: FC<ContainerEditProps<BlockTerms_Attrs>> = (props) => {\n\tconst { attributes, setAttributes, clientId } = props;\n\n\tconst {\n\t\tblockVariation,\n\t\tnumberOfTags,\n\t\tshowTagCounts,\n\t\ttaxonomy,\n\t\tuniqueId,\n\t\torder,\n\t\torderBy,\n\t\thasBackground,\n\t} = attributes;\n\n\tconst [initTermsFromSSR, setInitTermsFromSSR] = useState<any[] | null>(null);\n\tconst [initErrorFromSSR, setInitErrorFromSSR] = useState<string | null>(null);\n\tconst SERVER_SIDE_ID = \"ncmazfcSSR-block-\" + clientId;\n\tconst observerRef = useRef<MutationObserver | null>(null);\n\t// ---- SAVE uniqueId ----\n\tuseEffect(() => {\n\t\tsetAttributes({ uniqueId: clientId });\n\t}, []);\n\n\tconst getTermsDataFromSeverSideRenderNode = (wrapNode: HTMLElement) => {\n\t\tconst node = wrapNode.querySelector(\n\t\t\t\".ncmazfc-block-content-common-class\"\n\t\t) as HTMLElement | null;\n\n\t\tconst dataInitTerms =\n\t\t\tnode?.getAttribute(\"data-ncmazfc-init-terms\") || \"null\";\n\t\tconst dataInitErrors =\n\t\t\tnode?.getAttribute(\"data-ncmazfc-init-errors\") || \"null\";\n\n\t\treturn {\n\t\t\tinitTerms: JSON.parse(dataInitTerms),\n\t\t\tinitErrors: JSON.parse(dataInitErrors),\n\t\t};\n\t};\n\n\tuseEffect(() => {\n\t\tconst targetNode = document.getElementById(SERVER_SIDE_ID);\n\t\tif (!targetNode) return;\n\n\t\t// Options for the observer (which mutations to observe)\n\t\tconst config = { childList: true };\n\n\t\t// Callback function to execute when mutations are observed\n\t\tconst callback = (mutationList, observer) => {\n\t\t\tfor (const mutation of mutationList) {\n\t\t\t\tif (mutation.type === \"childList\") {\n\t\t\t\t\tconst { initErrors, initTerms } = getTermsDataFromSeverSideRenderNode(\n\t\t\t\t\t\tmutation.target\n\t\t\t\t\t);\n\t\t\t\t\tsetInitErrorFromSSR(initErrors);\n\t\t\t\t\tsetInitTermsFromSSR(initTerms);\n\t\t\t\t\tif (!!initErrors || !!initTerms) {\n\t\t\t\t\t\tobserver.disconnect();\n\t\t\t\t\t\tobserverRef.current = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (!observerRef.current) {\n\t\t\tobserverRef.current = new MutationObserver(callback);\n\t\t\tobserverRef.current.observe(targetNode, config);\n\t\t}\n\t}, [numberOfTags, showTagCounts, taxonomy, uniqueId, order, orderBy]);\n\n\tconst renderLayoutType = () => {\n\t\tconst dataLists = initTermsFromSSR;\n\t\tif (!dataLists) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!dataLists?.length) {\n\t\t\treturn <BlockEmptyPlaceholder />;\n\t\t}\n\n\t\treturn <DemoTermsList terms={dataLists || []} />;\n\t};\n\n\t// render\n\tconst inspectorControls = (\n\t\t<InspectorControls>\n\t\t\t<PanelBody title=\"Layout\">\n\t\t\t\t<div className=\"space-y-2.5\">\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tlabel={__(\"Select block's variation\", \"ncmazfc\")}\n\t\t\t\t\t\tvalue={blockVariation}\n\t\t\t\t\t\thelp={\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t(**) Select variation to change the layout and card style of the\n\t\t\t\t\t\t\t\tblock. The editor preview of the variants is currently under\n\t\t\t\t\t\t\t\tconstruction, so you won't notice the change here, but it will\n\t\t\t\t\t\t\t\tbe changed and applied in the client UI. Sorry for the\n\t\t\t\t\t\t\t\tinconvenience, you can check out the{\" \"}\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\thref=\"https://ncmaz-faust.chisnghiax.com/block-term-variations-preview\"\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\t\t\t\tclassName=\"underline text-blue-400\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tstyling of the variations here\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonChange={(blockVariation) => setAttributes({ blockVariation })}\n\t\t\t\t\t>\n\t\t\t\t\t\t<optgroup label=\"Grid\">\n\t\t\t\t\t\t\t<option value=\"grid-1\">Grid 1</option>\n\t\t\t\t\t\t\t<option value=\"grid-2\">Grid 2</option>\n\t\t\t\t\t\t\t<option value=\"grid-3\">Grid 3</option>\n\t\t\t\t\t\t\t<option value=\"grid-4\">Grid 4</option>\n\t\t\t\t\t\t\t<option value=\"grid-5\">Grid 5</option>\n\t\t\t\t\t\t</optgroup>\n\n\t\t\t\t\t\t<optgroup label=\"Slider\">\n\t\t\t\t\t\t\t<option value=\"slider-1\">Slider 1</option>\n\t\t\t\t\t\t\t<option value=\"slider-2\">Slider 2</option>\n\t\t\t\t\t\t\t<option value=\"slider-3\">Slider 3</option>\n\t\t\t\t\t\t\t<option value=\"slider-4\">Slider 4</option>\n\t\t\t\t\t\t\t<option value=\"slider-5\">Slider 5</option>\n\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t</SelectControl>\n\t\t\t\t\t<div className=\"w-full space-x-3 flex \">\n\t\t\t\t\t\t<FormToggle\n\t\t\t\t\t\t\tchecked={hasBackground}\n\t\t\t\t\t\t\tonChange={() => setAttributes({ hasBackground: !hasBackground })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<legend>{__(\"Enable Background\", \"ncmazfc\")}</legend>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</PanelBody>\n\t\t\t<PanelBody title={__(\"Settings\")}>\n\t\t\t\t<SelectControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tlabel={__(\"Taxonomy\")}\n\t\t\t\t\toptions={[\n\t\t\t\t\t\t{ label: \"CATEGORY\", value: \"CATEGORY\" },\n\t\t\t\t\t\t{ label: \"POSTFORMAT\", value: \"POSTFORMAT\" },\n\t\t\t\t\t\t{ label: \"TAG\", value: \"TAG\" },\n\t\t\t\t\t]}\n\t\t\t\t\tvalue={taxonomy}\n\t\t\t\t\tonChange={(selectedTaxonomy) =>\n\t\t\t\t\t\tsetAttributes({\n\t\t\t\t\t\t\ttaxonomy: selectedTaxonomy as BlockTerms_Attrs[\"taxonomy\"],\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\n\t\t\t\t<TermOrderControl\n\t\t\t\t\t{...{ order, orderBy }}\n\t\t\t\t\tonChange={({ order, orderBy }) => {\n\t\t\t\t\t\tsetAttributes({ order, orderBy });\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<ToggleControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tlabel={__(\"Show post counts\")}\n\t\t\t\t\tchecked={showTagCounts}\n\t\t\t\t\tonChange={() => setAttributes({ showTagCounts: !showTagCounts })}\n\t\t\t\t/>\n\t\t\t\t<RangeControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tlabel={__(\"Number of tags\")}\n\t\t\t\t\tvalue={numberOfTags}\n\t\t\t\t\tonChange={(value) => setAttributes({ numberOfTags: value })}\n\t\t\t\t\tmin={MIN_TAGS}\n\t\t\t\t\tmax={MAX_TAGS}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t</PanelBody>\n\t\t</InspectorControls>\n\t);\n\n\tconst renderContent = () => {\n\t\treturn (\n\t\t\t<div className=\"relative\">\n\t\t\t\t{initErrorFromSSR && (\n\t\t\t\t\t<div className=\"text-red-500 text-sm\">\n\t\t\t\t\t\t<h3>Error!</h3>\n\t\t\t\t\t\t<pre>\n\t\t\t\t\t\t\t<code>{JSON.stringify(initErrorFromSSR, null, 2)}</code>\n\t\t\t\t\t\t</pre>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{initTermsFromSSR && renderLayoutType()}\n\n\t\t\t\t<div id={SERVER_SIDE_ID}>\n\t\t\t\t\t<ServerSideRender\n\t\t\t\t\t\tblock=\"ncmaz-faust/block-terms\"\n\t\t\t\t\t\tattributes={attributes}\n\t\t\t\t\t\thttpMethod=\"POST\"\n\t\t\t\t\t\tLoadingResponsePlaceholder={() => (\n\t\t\t\t\t\t\t<div className=\"absolute bg-black/10 -inset-2.5 flex items-center justify-center\">\n\t\t\t\t\t\t\t\t<BlockLoadingPlaceholder />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tEmptyResponsePlaceholder={() => <div />}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{inspectorControls}\n\n\t\t\t<div\n\t\t\t\t{...useBlockProps({\n\t\t\t\t\tclassName: classNames(\n\t\t\t\t\t\t\"not-prose\",\n\t\t\t\t\t\thasBackground ? \"relative py-16\" : \"\"\n\t\t\t\t\t),\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t{hasBackground ? <BackgroundSection /> : null}\n\t\t\t\t{renderContent()}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\n// @ts-ignore\nexport default Edit;\n","import { registerBlockType } from \"@wordpress/blocks\";\nimport \"./style.scss\";\n\n/**\n * Internal dependencies\n */\nimport Edit from \"./edit\";\nimport save from \"./save\";\nimport metadata from \"./block.json\";\nimport deprecated from \"./deprecated\";\nimport attributes from \"./attributes\";\n//\n\nregisterBlockType(metadata.name, {\n\tedit: Edit,\n\tsave,\n\t// attributes,\n\tdeprecated: deprecated,\n\texample: {},\n\ticon: (\n\t\t<svg\n\t\t\tclassName=\"wcb-editor-block-icons fill-none \"\n\t\t\twidth={24}\n\t\t\theight={24}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t>\n\t\t\t<path\n\t\t\t\td=\"M5 10H7C9 10 10 9 10 7V5C10 3 9 2 7 2H5C3 2 2 3 2 5V7C2 9 3 10 5 10Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M17 10H19C21 10 22 9 22 7V5C22 3 21 2 19 2H17C15 2 14 3 14 5V7C14 9 15 10 17 10Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M17 22H19C21 22 22 21 22 19V17C22 15 21 14 19 14H17C15 14 14 15 14 17V19C14 21 15 22 17 22Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M5 22H7C9 22 10 21 10 19V17C10 15 9 14 7 14H5C3 14 2 15 2 17V19C2 21 3 22 5 22Z\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"1.5\"\n\t\t\t\tstrokeMiterlimit={10}\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t/>\n\t\t</svg>\n\t),\n});\n","/**\n * WordPress dependencies\n */\nimport React from \"react\";\nimport { SelectControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport { BlockTerms_Attrs } from \"./attributes\";\n\nconst orderOptions: {\n\tlabel: string;\n\tvalue: `${BlockTerms_Attrs[\"orderBy\"]}/${BlockTerms_Attrs[\"order\"]}`;\n}[] = [\n\t{\n\t\tlabel: __(\"Item count/desc\"),\n\t\tvalue: \"COUNT/DESC\",\n\t},\n\t{\n\t\tlabel: __(\"Item count/asc\"),\n\t\tvalue: \"COUNT/ASC\",\n\t},\n\t{\n\t\t/* translators: label for ordering posts by title in ascending order */\n\t\tlabel: __(\"A → Z\"),\n\t\tvalue: \"NAME/ASC\",\n\t},\n\t{\n\t\t/* translators: label for ordering posts by title in descending order */\n\t\tlabel: __(\"Z → A\"),\n\t\tvalue: \"NAME/DESC\",\n\t},\n\t{\n\t\t/* translators: label for ordering posts by title in ascending order */\n\t\tlabel: __(\"Term group/asc\"),\n\t\tvalue: \"TERM_GROUP/ASC\",\n\t},\n\t{\n\t\t/* translators: label for ordering posts by title in descending order */\n\t\tlabel: __(\"Term group/desc\"),\n\t\tvalue: \"TERM_GROUP/DESC\",\n\t},\n\t{\n\t\t/* translators: label for ordering posts by title in ascending order */\n\t\tlabel: __(\"Term order/asc\"),\n\t\tvalue: \"TERM_ORDER/ASC\",\n\t},\n\t{\n\t\t/* translators: label for ordering posts by title in descending order */\n\t\tlabel: __(\"Term order/desc\"),\n\t\tvalue: \"TERM_ORDER/DESC\",\n\t},\n];\nfunction TermOrderControl({\n\torder,\n\torderBy,\n\tonChange,\n}: {\n\torder: BlockTerms_Attrs[\"order\"];\n\torderBy: BlockTerms_Attrs[\"orderBy\"];\n\tonChange: (value: {\n\t\torder: BlockTerms_Attrs[\"order\"];\n\t\torderBy: BlockTerms_Attrs[\"orderBy\"];\n\t}) => void;\n}) {\n\treturn (\n\t\t<SelectControl\n\t\t\t__nextHasNoMarginBottom\n\t\t\tlabel={__(\"Order by\")}\n\t\t\tvalue={`${orderBy}/${order}`}\n\t\t\toptions={orderOptions}\n\t\t\tonChange={(value) => {\n\t\t\t\tconst [newOrderBy, newOrder] = value.split(\"/\");\n\t\t\t\t// @ts-ignore\n\t\t\t\tonChange({ order: newOrder, orderBy: newOrderBy });\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nexport default TermOrderControl;\n","import { useBlockProps } from \"@wordpress/block-editor\";\nimport React from \"react\";\n\nexport default function save() {\n\treturn (\n\t\t<p {...useBlockProps.save()}>\n\t\t\t{\"Todo List – hello from the saved content!\"}\n\t\t</p>\n\t);\n}\n","import { Placeholder } from \"@wordpress/components\";\nimport { Icon, file } from \"@wordpress/icons\";\nimport { __ } from \"@wordpress/i18n\";\nimport React from \"react\";\n\nconst BlockEmptyPlaceholder = () => (\n\t<Placeholder\n\t\ticon={<Icon icon={file} />}\n\t\tlabel={__(\"Ncmaz faust block!\", \"wcb\")}\n\t\tclassName=\"\"\n\t>\n\t\t{__(\"No results found! Please try another selection.\", \"ncmazfc\")}\n\t</Placeholder>\n);\nexport default BlockEmptyPlaceholder;\n","import { Spinner } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport React from \"react\";\n\nconst BlockLoadingPlaceholder = () => (\n\t<div className=\"container flex items-center justify-center py-7\">\n\t\t<Spinner />\n\t</div>\n);\nexport default BlockLoadingPlaceholder;\n","import { gql } from \"../__generated__\";\n\n// TAG =================================================\nexport const NC_TAG_SHORT_FIELDS_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcTagShortFieldsFragment on Tag {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tdatabaseId\n\t\tcount\n\t}\n`);\nexport const NC_TAG_FULL_FIELDS_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcTagFullFieldsFragment on Tag {\n\t\t...NcmazFcTagShortFieldsFragment\n\t\tdescription\n\t\tcount\n\t}\n`);\n\n// CATEGORY =================================================\nexport const NC_CATEGORY_FULL_FIELDS_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcCategoryFullFieldsFragment on Category {\n\t\t__typename\n\t\tdatabaseId\n\t\tdescription\n\t\tname\n\t\turi\n\t\tcount\n\t\tncTaxonomyMeta {\n\t\t\tcolor\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`);\nexport const NC_CATEGORY_CARD_FIELD_NOT_IMAGE_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcCategoryCardFieldsNotImage on Category {\n\t\t__typename\n\t\tname\n\t\turi\n\t\tcount\n\t\tdatabaseId\n\t\tncTaxonomyMeta {\n\t\t\tcolor\n\t\t}\n\t}\n`);\n\n// POSTS =================================================\nexport const NC_POSTS_EDGES_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcPostsEdegsFields on RootQueryToPostConnection {\n\t\tnodes {\n\t\t\t...NcmazFcPostCardFields\n\t\t}\n\t}\n`);\nexport const NC_POST_FULL_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcPostFullFields on Post {\n\t\t__typename\n\t\turi\n\t\tmodified\n\t\tdate\n\t\tcommentStatus\n\t\tstatus\n\t\tcommentCount\n\t\texcerpt\n\t\tdatabaseId\n\t\ttitle\n\t\tcontent\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\tdescription\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\ttags(first: 20) {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcTagShortFieldsFragment\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t}\n\t\t}\n\t\tpostFormats {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tslug\n\t\t\t}\n\t\t}\n\t\tncmazVideoUrl {\n\t\t\tvideoUrl\n\t\t}\n\t\tncmazAudioUrl {\n\t\t\taudioUrl\n\t\t}\n\t\tncPostMetaData {\n\t\t\t...NcmazFcPostMetaFullFields\n\t\t}\n\t\tncmazGalleryImgs {\n\t\t\timage1 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage2 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage3 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage4 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage5 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage6 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage7 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage8 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageHasDetailFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`);\nexport const NC_POST_CARD_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcPostCardFields on Post {\n\t\t...NcmazFcPostCardFieldsNOTNcmazGalleryImgs\n\t\tncmazGalleryImgs {\n\t\t\timage1 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage2 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage3 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage4 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage5 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage6 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage7 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\timage8 {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`);\nexport const NC_POST_CARD_NOT_NCMAZGALLERY_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcPostCardFieldsNOTNcmazGalleryImgs on Post {\n\t\t__typename\n\t\tdatabaseId\n\t\ttitle\n\t\turi\n\t\tstatus\n\t\tmodified\n\t\tdate\n\t\tcommentStatus\n\t\tcommentCount\n\t\texcerpt\n\t\tauthor {\n\t\t\tnode {\n\t\t\t\t...NcmazFcUserShortForPostCardFragment\n\t\t\t}\n\t\t}\n\t\tcategories {\n\t\t\tnodes {\n\t\t\t\t...NcmazFcCategoryCardFieldsNotImage\n\t\t\t}\n\t\t}\n\t\tfeaturedImage {\n\t\t\tnode {\n\t\t\t\t...NcmazFcImageFields\n\t\t\t}\n\t\t}\n\t\tpostFormats {\n\t\t\tnodes {\n\t\t\t\tname\n\t\t\t\tslug\n\t\t\t}\n\t\t}\n\t\tncmazVideoUrl {\n\t\t\tvideoUrl\n\t\t}\n\t\tncmazAudioUrl {\n\t\t\taudioUrl\n\t\t}\n\t\tncPostMetaData {\n\t\t\t...NcmazFcPostMetaFields\n\t\t}\n\t}\n`);\n\n// MEDIA =================================================\nexport const NC_IMAGE_MEDIA_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcImageFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t}\n`);\nexport const NC_IMAGE_MEDIA_HAS_DETAIL_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcImageHasDetailFields on MediaItem {\n\t\t__typename\n\t\taltText\n\t\tdatabaseId\n\t\tsourceUrl\n\t\tcaption\n\t\tmediaDetails {\n\t\t\theight\n\t\t\twidth\n\t\t}\n\t}\n`);\n\n//  POSTS METADATA =================================================\nexport const NC_POST_META_DATA_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcPostMetaFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t}\n`);\nexport const NC_POST_META_DATA_FULL_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcPostMetaFullFields on NcPostMetaData {\n\t\t__typename\n\t\tviewsCount\n\t\treadingTime\n\t\tlikesCount\n\t\tsavedsCount\n\t\tshowRightSidebar\n\t\ttemplate\n\t}\n`);\n\n// USER   =================================================\nexport const NC_USER_SHORT_FOR_POST_CARD_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcUserShortForPostCardFragment on User {\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tncUserMeta {\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`);\n\nexport const NC_USER_FULL_FIELDS_FRAGMENT = gql(/* GraphQL */ `\n\tfragment NcmazFcUserFullFields on User {\n\t\tid\n\t\tdatabaseId\n\t\turi\n\t\tusername\n\t\tname\n\t\tdescription\n\t\tncUserMeta {\n\t\t\tbuymeacoffeUrl\n\t\t\tcolor\n\t\t\tfacebookUrl\n\t\t\tgithubUrl\n\t\t\tinstagramUrl\n\t\t\tlinkedinUrl\n\t\t\tmediumUrl\n\t\t\tncBio\n\t\t\tpinterestUrl\n\t\t\ttwitchUrl\n\t\t\ttwitterUrl\n\t\t\tvimeoUrl\n\t\t\twebsiteUrl\n\t\t\tyoutubeUrl\n\t\t\ttiktokUrl\n\t\t\tfeaturedImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t\tbackgroundImage {\n\t\t\t\tnode {\n\t\t\t\t\t...NcmazFcImageFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`);\n","import React, { FC } from \"react\";\n\nconst BackgroundSection = ({\n\tclassName = \"bg-neutral-100 dark:bg-black/20 \",\n}) => {\n\treturn (\n\t\t<div\n\t\t\tclassName={`absolute inset-y-0 w-screen xl:max-w-[1340px] 2xl:max-w-screen-2xl left-1/2 transform -translate-x-1/2 xl:rounded-[40px] z-0  ${className}`}\n\t\t>\n\t\t\t<span className=\"sr-only hidden\">bg</span>\n\t\t</div>\n\t);\n};\n\nexport default BackgroundSection;\n","export default function classNames(...classes) {\n\treturn classes.filter(Boolean).join(\" \");\n}\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"primitives\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"block-terms/index\": 0,\n\t\"block-terms/style-index\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkncmaz_faust_core\"] = self[\"webpackChunkncmaz_faust_core\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"block-terms/style-index\"], () => (__webpack_require__(\"./src/block-terms/index.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["useFragment","_documentNode","fragmentType","makeFragmentData","data","_fragment","isFragmentReady","queryNode","fragmentNode","deferredFields","__meta__","fragDef","definitions","fragName","name","value","fields","length","every","field","types","documents","NcmazFcTagShortFieldsFragmentFragmentDoc","NcmazFcTagFullFieldsFragmentFragmentDoc","NcmazFcCategoryFullFieldsFragmentFragmentDoc","NcmazFcCategoryCardFieldsNotImageFragmentDoc","NcmazFcPostsEdegsFieldsFragmentDoc","NcmazFcPostFullFieldsFragmentDoc","NcmazFcPostCardFieldsFragmentDoc","NcmazFcPostCardFieldsNotNcmazGalleryImgsFragmentDoc","NcmazFcImageFieldsFragmentDoc","NcmazFcImageHasDetailFieldsFragmentDoc","NcmazFcPostMetaFieldsFragmentDoc","NcmazFcPostMetaFullFieldsFragmentDoc","NcmazFcUserShortForPostCardFragmentFragmentDoc","NcmazFcUserFullFieldsFragmentDoc","gql","source","_source","AvatarRatingEnum","CategoryIdType","CommentNodeIdTypeEnum","CommentStatusEnum","CommentsConnectionOrderbyEnum","ContentNodeIdTypeEnum","ContentTypeEnum","ContentTypeIdTypeEnum","ContentTypesOfCategoryEnum","ContentTypesOfPostFormatEnum","ContentTypesOfTagEnum","GlobalStylesheetTypesEnum","GraphqlDocumentIdType","MediaItemIdType","MediaItemSizeEnum","MediaItemStatusEnum","MenuItemNodeIdTypeEnum","MenuLocationEnum","MenuNodeIdTypeEnum","MimeTypeEnum","NcmazFcUserReactionPostActionEnum","NcmazFcUserReactionPostNumberUpdateEnum","NcmazFcUserReactionPostUpdateResuiltEnum","OrderEnum","PageIdType","PluginStatusEnum","PostFormatIdType","PostIdType","PostObjectFieldFormatEnum","PostObjectsConnectionDateColumnEnum","PostObjectsConnectionOrderbyEnum","PostStatusEnum","RelationEnum","TagIdType","TaxonomyEnum","TaxonomyIdTypeEnum","TermNodeIdTypeEnum","TermObjectsConnectionOrderbyEnum","UserNodeIdTypeEnum","UserReactionPostIdType","UserRoleEnum","UsersConnectionOrderbyEnum","UsersConnectionSearchColumnEnum","React","NC_CATEGORY_FULL_FIELDS_FRAGMENT","DemoTermsList","terms","createElement","className","map","term","node","key","databaseId","ncTaxonomyMeta","featuredImage","sourceUrl","src","alt","count","blokcAttrs","uniqueId","type","order","orderBy","blockVariation","numberOfTags","showTagCounts","taxonomy","hasBackground","v1","v2","deprecated","useEffect","useState","useRef","PanelBody","ToggleControl","SelectControl","RangeControl","FormToggle","__","InspectorControls","useBlockProps","TermOrderControl","ServerSideRender","BlockLoadingPlaceholder","BlockEmptyPlaceholder","BackgroundSection","classNames","MIN_TAGS","MAX_TAGS","Edit","props","attributes","setAttributes","clientId","initTermsFromSSR","setInitTermsFromSSR","initErrorFromSSR","setInitErrorFromSSR","SERVER_SIDE_ID","observerRef","getTermsDataFromSeverSideRenderNode","wrapNode","querySelector","dataInitTerms","getAttribute","dataInitErrors","initTerms","JSON","parse","initErrors","targetNode","document","getElementById","config","childList","callback","mutationList","observer","mutation","target","disconnect","current","MutationObserver","observe","renderLayoutType","dataLists","inspectorControls","title","label","help","href","rel","onChange","checked","__nextHasNoMarginBottom","options","selectedTaxonomy","min","max","required","renderContent","stringify","id","block","httpMethod","LoadingResponsePlaceholder","EmptyResponsePlaceholder","Fragment","registerBlockType","save","metadata","edit","example","icon","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeMiterlimit","strokeLinecap","strokeLinejoin","orderOptions","newOrderBy","newOrder","split","Placeholder","Icon","file","Spinner","NC_TAG_SHORT_FIELDS_FRAGMENT","NC_TAG_FULL_FIELDS_FRAGMENT","NC_CATEGORY_CARD_FIELD_NOT_IMAGE_FRAGMENT","NC_POSTS_EDGES_FRAGMENT","NC_POST_FULL_FRAGMENT","NC_POST_CARD_FRAGMENT","NC_POST_CARD_NOT_NCMAZGALLERY_FRAGMENT","NC_IMAGE_MEDIA_FRAGMENT","NC_IMAGE_MEDIA_HAS_DETAIL_FRAGMENT","NC_POST_META_DATA_FRAGMENT","NC_POST_META_DATA_FULL_FRAGMENT","NC_USER_SHORT_FOR_POST_CARD_FRAGMENT","NC_USER_FULL_FIELDS_FRAGMENT","classes","filter","Boolean","join"],"sourceRoot":""}